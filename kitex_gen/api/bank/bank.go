// Code generated by Kitex v0.7.1. DO NOT EDIT.

package bank

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	api "gitlab.yoyiit.com/youyi/app-bank/kitex_gen/api"
)

func serviceInfo() *kitex.ServiceInfo {
	return bankServiceInfo
}

var bankServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "bank"
	handlerType := (*api.Bank)(nil)
	methods := map[string]kitex.MethodInfo{
		"listBankTransferReceipt":                    kitex.NewMethodInfo(listBankTransferReceiptHandler, newBankListBankTransferReceiptArgs, newBankListBankTransferReceiptResult, false),
		"getBankTransferReceipt":                     kitex.NewMethodInfo(getBankTransferReceiptHandler, newBankGetBankTransferReceiptArgs, newBankGetBankTransferReceiptResult, false),
		"addBankTransferReceipt":                     kitex.NewMethodInfo(addBankTransferReceiptHandler, newBankAddBankTransferReceiptArgs, newBankAddBankTransferReceiptResult, false),
		"editBankTransferReceipt":                    kitex.NewMethodInfo(editBankTransferReceiptHandler, newBankEditBankTransferReceiptArgs, newBankEditBankTransferReceiptResult, false),
		"deleteBankTransferReceipt":                  kitex.NewMethodInfo(deleteBankTransferReceiptHandler, newBankDeleteBankTransferReceiptArgs, newBankDeleteBankTransferReceiptResult, false),
		"countBankTransferReceipt":                   kitex.NewMethodInfo(countBankTransferReceiptHandler, newBankCountBankTransferReceiptArgs, newBankCountBankTransferReceiptResult, false),
		"confirmTransaction":                         kitex.NewMethodInfo(confirmTransactionHandler, newBankConfirmTransactionArgs, newBankConfirmTransactionResult, false),
		"handleTransferReceiptResult":                kitex.NewMethodInfo(handleTransferReceiptResult_Handler, newBankHandleTransferReceiptResultArgs, newBankHandleTransferReceiptResultResult, false),
		"listBankTransactionDetail":                  kitex.NewMethodInfo(listBankTransactionDetailHandler, newBankListBankTransactionDetailArgs, newBankListBankTransactionDetailResult, false),
		"simpleListBankTransactionDetail":            kitex.NewMethodInfo(simpleListBankTransactionDetailHandler, newBankSimpleListBankTransactionDetailArgs, newBankSimpleListBankTransactionDetailResult, false),
		"getBankTransactionDetail":                   kitex.NewMethodInfo(getBankTransactionDetailHandler, newBankGetBankTransactionDetailArgs, newBankGetBankTransactionDetailResult, false),
		"simpleGetBankTransactionDetail":             kitex.NewMethodInfo(simpleGetBankTransactionDetailHandler, newBankSimpleGetBankTransactionDetailArgs, newBankSimpleGetBankTransactionDetailResult, false),
		"handleTransactionDetail":                    kitex.NewMethodInfo(handleTransactionDetailHandler, newBankHandleTransactionDetailArgs, newBankHandleTransactionDetailResult, false),
		"createTransactionDetailProcessInstance":     kitex.NewMethodInfo(createTransactionDetailProcessInstanceHandler, newBankCreateTransactionDetailProcessInstanceArgs, newBankCreateTransactionDetailProcessInstanceResult, false),
		"EditBankTransactionDetailExtField":          kitex.NewMethodInfo(editBankTransactionDetailExtFieldHandler, newBankEditBankTransactionDetailExtFieldArgs, newBankEditBankTransactionDetailExtFieldResult, false),
		"listBankTransactionDetailProcessInstance":   kitex.NewMethodInfo(listBankTransactionDetailProcessInstanceHandler, newBankListBankTransactionDetailProcessInstanceArgs, newBankListBankTransactionDetailProcessInstanceResult, false),
		"GetBankCodeInfo":                            kitex.NewMethodInfo(getBankCodeInfoHandler, newBankGetBankCodeInfoArgs, newBankGetBankCodeInfoResult, false),
		"QueryBankCardInfo":                          kitex.NewMethodInfo(queryBankCardInfoHandler, newBankQueryBankCardInfoArgs, newBankQueryBankCardInfoResult, false),
		"ListBankCode":                               kitex.NewMethodInfo(listBankCodeHandler, newBankListBankCodeArgs, newBankListBankCodeResult, false),
		"GetBankCode":                                kitex.NewMethodInfo(getBankCodeHandler, newBankGetBankCodeArgs, newBankGetBankCodeResult, false),
		"AddBankCode":                                kitex.NewMethodInfo(addBankCodeHandler, newBankAddBankCodeArgs, newBankAddBankCodeResult, false),
		"EditBankCode":                               kitex.NewMethodInfo(editBankCodeHandler, newBankEditBankCodeArgs, newBankEditBankCodeResult, false),
		"DeleteBankCode":                             kitex.NewMethodInfo(deleteBankCodeHandler, newBankDeleteBankCodeArgs, newBankDeleteBankCodeResult, false),
		"HandleSyncTransferReceipt":                  kitex.NewMethodInfo(handleSyncTransferReceiptHandler, newBankHandleSyncTransferReceiptArgs, newBankHandleSyncTransferReceiptResult, false),
		"UpdateBankTransactionRecDetail":             kitex.NewMethodInfo(updateBankTransactionRecDetailHandler, newBankUpdateBankTransactionRecDetailArgs, newBankUpdateBankTransactionRecDetailResult, false),
		"syncTransferReceipt":                        kitex.NewMethodInfo(syncTransferReceiptHandler, newBankSyncTransferReceiptArgs, newBankSyncTransferReceiptResult, false),
		"syncTransactionDetail":                      kitex.NewMethodInfo(syncTransactionDetailHandler, newBankSyncTransactionDetailArgs, newBankSyncTransactionDetailResult, false),
		"dashboardData":                              kitex.NewMethodInfo(dashboardDataHandler, newBankDashboardDataArgs, newBankDashboardDataResult, false),
		"getCashFlowMonthChartData":                  kitex.NewMethodInfo(getCashFlowMonthChartDataHandler, newBankGetCashFlowMonthChartDataArgs, newBankGetCashFlowMonthChartDataResult, false),
		"getBalanceMonthChartData":                   kitex.NewMethodInfo(getBalanceMonthChartDataHandler, newBankGetBalanceMonthChartDataArgs, newBankGetBalanceMonthChartDataResult, false),
		"QueryAccountBalance":                        kitex.NewMethodInfo(queryAccountBalanceHandler, newBankQueryAccountBalanceArgs, newBankQueryAccountBalanceResult, false),
		"ImportBankBusinessPayrollData":              kitex.NewMethodInfo(importBankBusinessPayrollDataHandler, newBankImportBankBusinessPayrollDataArgs, newBankImportBankBusinessPayrollDataResult, false),
		"ListBankBusinessPayroll":                    kitex.NewMethodInfo(listBankBusinessPayrollHandler, newBankListBankBusinessPayrollArgs, newBankListBankBusinessPayrollResult, false),
		"ListBankBusinessPayrollDetail":              kitex.NewMethodInfo(listBankBusinessPayrollDetailHandler, newBankListBankBusinessPayrollDetailArgs, newBankListBankBusinessPayrollDetailResult, false),
		"SyncBankBusinessPayrollDetail":              kitex.NewMethodInfo(syncBankBusinessPayrollDetailHandler, newBankSyncBankBusinessPayrollDetailArgs, newBankSyncBankBusinessPayrollDetailResult, false),
		"HandleTransactionDetailReceipt":             kitex.NewMethodInfo(handleTransactionDetailReceiptHandler, newBankHandleTransactionDetailReceiptArgs, newBankHandleTransactionDetailReceiptResult, false),
		"createVirtualAccount":                       kitex.NewMethodInfo(createVirtualAccountHandler, newBankCreateVirtualAccountArgs, newBankCreateVirtualAccountResult, false),
		"SyncVirtualAccountBalance":                  kitex.NewMethodInfo(syncVirtualAccountBalanceHandler, newBankSyncVirtualAccountBalanceArgs, newBankSyncVirtualAccountBalanceResult, false),
		"QueryVirtualAccountBalance":                 kitex.NewMethodInfo(queryVirtualAccountBalanceHandler, newBankQueryVirtualAccountBalanceArgs, newBankQueryVirtualAccountBalanceResult, false),
		"spdBankVirtualAccountTranscation":           kitex.NewMethodInfo(spdBankVirtualAccountTranscationHandler, newBankSpdBankVirtualAccountTranscationArgs, newBankSpdBankVirtualAccountTranscationResult, false),
		"PinganBankTransaction":                      kitex.NewMethodInfo(pinganBankTransactionHandler, newBankPinganBankTransactionArgs, newBankPinganBankTransactionResult, false),
		"listPaymentReceipt":                         kitex.NewMethodInfo(listPaymentReceiptHandler, newBankListPaymentReceiptArgs, newBankListPaymentReceiptResult, false),
		"getPaymentReceipt":                          kitex.NewMethodInfo(getPaymentReceiptHandler, newBankGetPaymentReceiptArgs, newBankGetPaymentReceiptResult, false),
		"simpleGetPaymentReceipt":                    kitex.NewMethodInfo(simpleGetPaymentReceiptHandler, newBankSimpleGetPaymentReceiptArgs, newBankSimpleGetPaymentReceiptResult, false),
		"simpleGetPaymentReceiptByProcessInstanceId": kitex.NewMethodInfo(simpleGetPaymentReceiptByProcessInstanceIdHandler, newBankSimpleGetPaymentReceiptByProcessInstanceIdArgs, newBankSimpleGetPaymentReceiptByProcessInstanceIdResult, false),
		"addPaymentReceipt":                          kitex.NewMethodInfo(addPaymentReceiptHandler, newBankAddPaymentReceiptArgs, newBankAddPaymentReceiptResult, false),
		"approvePaymentReceipt":                      kitex.NewMethodInfo(approvePaymentReceiptHandler, newBankApprovePaymentReceiptArgs, newBankApprovePaymentReceiptResult, false),
		"refusePaymentReceipt":                       kitex.NewMethodInfo(refusePaymentReceiptHandler, newBankRefusePaymentReceiptArgs, newBankRefusePaymentReceiptResult, false),
		"paymentReceiptRun":                          kitex.NewMethodInfo(paymentReceiptRunHandler, newBankPaymentReceiptRunArgs, newBankPaymentReceiptRunResult, false),
		"transmitPaymentReceipt":                     kitex.NewMethodInfo(transmitPaymentReceiptHandler, newBankTransmitPaymentReceiptArgs, newBankTransmitPaymentReceiptResult, false),
		"sendBackPaymentApplication":                 kitex.NewMethodInfo(sendBackPaymentApplicationHandler, newBankSendBackPaymentApplicationArgs, newBankSendBackPaymentApplicationResult, false),
		"withDrawPaymentReceipt":                     kitex.NewMethodInfo(withDrawPaymentReceiptHandler, newBankWithDrawPaymentReceiptArgs, newBankWithDrawPaymentReceiptResult, false),
		"commentPaymentReceipt":                      kitex.NewMethodInfo(commentPaymentReceiptHandler, newBankCommentPaymentReceiptArgs, newBankCommentPaymentReceiptResult, false),
		"addTagPaymentReceipt":                       kitex.NewMethodInfo(addTagPaymentReceiptHandler, newBankAddTagPaymentReceiptArgs, newBankAddTagPaymentReceiptResult, false),
		"handleSyncPaymentReceipt":                   kitex.NewMethodInfo(handleSyncPaymentReceiptHandler, newBankHandleSyncPaymentReceiptArgs, newBankHandleSyncPaymentReceiptResult, false),
		"syncPaymentReceipt":                         kitex.NewMethodInfo(syncPaymentReceiptHandler, newBankSyncPaymentReceiptArgs, newBankSyncPaymentReceiptResult, false),
		"pinganBankAccountSignatureApply":            kitex.NewMethodInfo(pinganBankAccountSignatureApplyHandler, newBankPinganBankAccountSignatureApplyArgs, newBankPinganBankAccountSignatureApplyResult, false),
		"pinganBankAccountSignatureQuery":            kitex.NewMethodInfo(pinganBankAccountSignatureQueryHandler, newBankPinganBankAccountSignatureQueryArgs, newBankPinganBankAccountSignatureQueryResult, false),
		"systemRefusePaymentReceipt":                 kitex.NewMethodInfo(systemRefusePaymentReceiptHandler, newBankSystemRefusePaymentReceiptArgs, newBankSystemRefusePaymentReceiptResult, false),
		"systemApprovePaymentReceipt":                kitex.NewMethodInfo(systemApprovePaymentReceiptHandler, newBankSystemApprovePaymentReceiptArgs, newBankSystemApprovePaymentReceiptResult, false),
		"icbcBankAccountSignatureQuery":              kitex.NewMethodInfo(icbcBankAccountSignatureQueryHandler, newBankIcbcBankAccountSignatureQueryArgs, newBankIcbcBankAccountSignatureQueryResult, false),
		"MinShengBankAccountSignatureApply":          kitex.NewMethodInfo(minShengBankAccountSignatureApplyHandler, newBankMinShengBankAccountSignatureApplyArgs, newBankMinShengBankAccountSignatureApplyResult, false),
		"MinShengBankAccountSignatureQuery":          kitex.NewMethodInfo(minShengBankAccountSignatureQueryHandler, newBankMinShengBankAccountSignatureQueryArgs, newBankMinShengBankAccountSignatureQueryResult, false),
		"icbcBankListTransactionDetail":              kitex.NewMethodInfo(icbcBankListTransactionDetailHandler, newBankIcbcBankListTransactionDetailArgs, newBankIcbcBankListTransactionDetailResult, false),
		"syncBankTransactionReceipt":                 kitex.NewMethodInfo(syncBankTransactionReceiptHandler, newBankSyncBankTransactionReceiptArgs, newBankSyncBankTransactionReceiptResult, false),
		"getBankTransactionReceipt":                  kitex.NewMethodInfo(getBankTransactionReceiptHandler, newBankGetBankTransactionReceiptArgs, newBankGetBankTransactionReceiptResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "api",
		"ServiceFilePath": "bank.thrift",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.1",
		Extra:           extra,
	}
	return svcInfo
}

func listBankTransferReceiptHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankListBankTransferReceiptArgs)
	realResult := result.(*api.BankListBankTransferReceiptResult)
	success, err := handler.(api.Bank).ListBankTransferReceipt(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBankListBankTransferReceiptArgs() interface{} {
	return api.NewBankListBankTransferReceiptArgs()
}

func newBankListBankTransferReceiptResult() interface{} {
	return api.NewBankListBankTransferReceiptResult()
}

func getBankTransferReceiptHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankGetBankTransferReceiptArgs)
	realResult := result.(*api.BankGetBankTransferReceiptResult)
	success, err := handler.(api.Bank).GetBankTransferReceipt(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBankGetBankTransferReceiptArgs() interface{} {
	return api.NewBankGetBankTransferReceiptArgs()
}

func newBankGetBankTransferReceiptResult() interface{} {
	return api.NewBankGetBankTransferReceiptResult()
}

func addBankTransferReceiptHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankAddBankTransferReceiptArgs)
	realResult := result.(*api.BankAddBankTransferReceiptResult)
	success, err := handler.(api.Bank).AddBankTransferReceipt(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newBankAddBankTransferReceiptArgs() interface{} {
	return api.NewBankAddBankTransferReceiptArgs()
}

func newBankAddBankTransferReceiptResult() interface{} {
	return api.NewBankAddBankTransferReceiptResult()
}

func editBankTransferReceiptHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankEditBankTransferReceiptArgs)

	err := handler.(api.Bank).EditBankTransferReceipt(ctx, realArg.Req)
	if err != nil {
		return err
	}

	return nil
}
func newBankEditBankTransferReceiptArgs() interface{} {
	return api.NewBankEditBankTransferReceiptArgs()
}

func newBankEditBankTransferReceiptResult() interface{} {
	return api.NewBankEditBankTransferReceiptResult()
}

func deleteBankTransferReceiptHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankDeleteBankTransferReceiptArgs)

	err := handler.(api.Bank).DeleteBankTransferReceipt(ctx, realArg.Req)
	if err != nil {
		return err
	}

	return nil
}
func newBankDeleteBankTransferReceiptArgs() interface{} {
	return api.NewBankDeleteBankTransferReceiptArgs()
}

func newBankDeleteBankTransferReceiptResult() interface{} {
	return api.NewBankDeleteBankTransferReceiptResult()
}

func countBankTransferReceiptHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankCountBankTransferReceiptArgs)
	realResult := result.(*api.BankCountBankTransferReceiptResult)
	success, err := handler.(api.Bank).CountBankTransferReceipt(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newBankCountBankTransferReceiptArgs() interface{} {
	return api.NewBankCountBankTransferReceiptArgs()
}

func newBankCountBankTransferReceiptResult() interface{} {
	return api.NewBankCountBankTransferReceiptResult()
}

func confirmTransactionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankConfirmTransactionArgs)

	err := handler.(api.Bank).ConfirmTransaction(ctx, realArg.Req)
	if err != nil {
		return err
	}

	return nil
}
func newBankConfirmTransactionArgs() interface{} {
	return api.NewBankConfirmTransactionArgs()
}

func newBankConfirmTransactionResult() interface{} {
	return api.NewBankConfirmTransactionResult()
}

func handleTransferReceiptResult_Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankHandleTransferReceiptResultArgs)

	err := handler.(api.Bank).HandleTransferReceiptResult_(ctx, realArg.Id)
	if err != nil {
		return err
	}

	return nil
}
func newBankHandleTransferReceiptResultArgs() interface{} {
	return api.NewBankHandleTransferReceiptResultArgs()
}

func newBankHandleTransferReceiptResultResult() interface{} {
	return api.NewBankHandleTransferReceiptResultResult()
}

func listBankTransactionDetailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankListBankTransactionDetailArgs)
	realResult := result.(*api.BankListBankTransactionDetailResult)
	success, err := handler.(api.Bank).ListBankTransactionDetail(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBankListBankTransactionDetailArgs() interface{} {
	return api.NewBankListBankTransactionDetailArgs()
}

func newBankListBankTransactionDetailResult() interface{} {
	return api.NewBankListBankTransactionDetailResult()
}

func simpleListBankTransactionDetailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankSimpleListBankTransactionDetailArgs)
	realResult := result.(*api.BankSimpleListBankTransactionDetailResult)
	success, err := handler.(api.Bank).SimpleListBankTransactionDetail(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBankSimpleListBankTransactionDetailArgs() interface{} {
	return api.NewBankSimpleListBankTransactionDetailArgs()
}

func newBankSimpleListBankTransactionDetailResult() interface{} {
	return api.NewBankSimpleListBankTransactionDetailResult()
}

func getBankTransactionDetailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankGetBankTransactionDetailArgs)
	realResult := result.(*api.BankGetBankTransactionDetailResult)
	success, err := handler.(api.Bank).GetBankTransactionDetail(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBankGetBankTransactionDetailArgs() interface{} {
	return api.NewBankGetBankTransactionDetailArgs()
}

func newBankGetBankTransactionDetailResult() interface{} {
	return api.NewBankGetBankTransactionDetailResult()
}

func simpleGetBankTransactionDetailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankSimpleGetBankTransactionDetailArgs)
	realResult := result.(*api.BankSimpleGetBankTransactionDetailResult)
	success, err := handler.(api.Bank).SimpleGetBankTransactionDetail(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBankSimpleGetBankTransactionDetailArgs() interface{} {
	return api.NewBankSimpleGetBankTransactionDetailArgs()
}

func newBankSimpleGetBankTransactionDetailResult() interface{} {
	return api.NewBankSimpleGetBankTransactionDetailResult()
}

func handleTransactionDetailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankHandleTransactionDetailArgs)

	err := handler.(api.Bank).HandleTransactionDetail(ctx, realArg.BeginDate, realArg.EndDate, realArg.OrganizationId)
	if err != nil {
		return err
	}

	return nil
}
func newBankHandleTransactionDetailArgs() interface{} {
	return api.NewBankHandleTransactionDetailArgs()
}

func newBankHandleTransactionDetailResult() interface{} {
	return api.NewBankHandleTransactionDetailResult()
}

func createTransactionDetailProcessInstanceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankCreateTransactionDetailProcessInstanceArgs)

	err := handler.(api.Bank).CreateTransactionDetailProcessInstance(ctx, realArg.Id)
	if err != nil {
		return err
	}

	return nil
}
func newBankCreateTransactionDetailProcessInstanceArgs() interface{} {
	return api.NewBankCreateTransactionDetailProcessInstanceArgs()
}

func newBankCreateTransactionDetailProcessInstanceResult() interface{} {
	return api.NewBankCreateTransactionDetailProcessInstanceResult()
}

func editBankTransactionDetailExtFieldHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankEditBankTransactionDetailExtFieldArgs)

	err := handler.(api.Bank).EditBankTransactionDetailExtField(ctx, realArg.Req)
	if err != nil {
		return err
	}

	return nil
}
func newBankEditBankTransactionDetailExtFieldArgs() interface{} {
	return api.NewBankEditBankTransactionDetailExtFieldArgs()
}

func newBankEditBankTransactionDetailExtFieldResult() interface{} {
	return api.NewBankEditBankTransactionDetailExtFieldResult()
}

func listBankTransactionDetailProcessInstanceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankListBankTransactionDetailProcessInstanceArgs)
	realResult := result.(*api.BankListBankTransactionDetailProcessInstanceResult)
	success, err := handler.(api.Bank).ListBankTransactionDetailProcessInstance(ctx, realArg.Id)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBankListBankTransactionDetailProcessInstanceArgs() interface{} {
	return api.NewBankListBankTransactionDetailProcessInstanceArgs()
}

func newBankListBankTransactionDetailProcessInstanceResult() interface{} {
	return api.NewBankListBankTransactionDetailProcessInstanceResult()
}

func getBankCodeInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankGetBankCodeInfoArgs)
	realResult := result.(*api.BankGetBankCodeInfoResult)
	success, err := handler.(api.Bank).GetBankCodeInfo(ctx, realArg.Code)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBankGetBankCodeInfoArgs() interface{} {
	return api.NewBankGetBankCodeInfoArgs()
}

func newBankGetBankCodeInfoResult() interface{} {
	return api.NewBankGetBankCodeInfoResult()
}

func queryBankCardInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankQueryBankCardInfoArgs)
	realResult := result.(*api.BankQueryBankCardInfoResult)
	success, err := handler.(api.Bank).QueryBankCardInfo(ctx, realArg.CardNo)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBankQueryBankCardInfoArgs() interface{} {
	return api.NewBankQueryBankCardInfoArgs()
}

func newBankQueryBankCardInfoResult() interface{} {
	return api.NewBankQueryBankCardInfoResult()
}

func listBankCodeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankListBankCodeArgs)
	realResult := result.(*api.BankListBankCodeResult)
	success, err := handler.(api.Bank).ListBankCode(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBankListBankCodeArgs() interface{} {
	return api.NewBankListBankCodeArgs()
}

func newBankListBankCodeResult() interface{} {
	return api.NewBankListBankCodeResult()
}

func getBankCodeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankGetBankCodeArgs)
	realResult := result.(*api.BankGetBankCodeResult)
	success, err := handler.(api.Bank).GetBankCode(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBankGetBankCodeArgs() interface{} {
	return api.NewBankGetBankCodeArgs()
}

func newBankGetBankCodeResult() interface{} {
	return api.NewBankGetBankCodeResult()
}

func addBankCodeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankAddBankCodeArgs)

	err := handler.(api.Bank).AddBankCode(ctx, realArg.Req)
	if err != nil {
		return err
	}

	return nil
}
func newBankAddBankCodeArgs() interface{} {
	return api.NewBankAddBankCodeArgs()
}

func newBankAddBankCodeResult() interface{} {
	return api.NewBankAddBankCodeResult()
}

func editBankCodeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankEditBankCodeArgs)

	err := handler.(api.Bank).EditBankCode(ctx, realArg.Req)
	if err != nil {
		return err
	}

	return nil
}
func newBankEditBankCodeArgs() interface{} {
	return api.NewBankEditBankCodeArgs()
}

func newBankEditBankCodeResult() interface{} {
	return api.NewBankEditBankCodeResult()
}

func deleteBankCodeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankDeleteBankCodeArgs)

	err := handler.(api.Bank).DeleteBankCode(ctx, realArg.Id)
	if err != nil {
		return err
	}

	return nil
}
func newBankDeleteBankCodeArgs() interface{} {
	return api.NewBankDeleteBankCodeArgs()
}

func newBankDeleteBankCodeResult() interface{} {
	return api.NewBankDeleteBankCodeResult()
}

func handleSyncTransferReceiptHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankHandleSyncTransferReceiptArgs)

	err := handler.(api.Bank).HandleSyncTransferReceipt(ctx, realArg.BeginDate, realArg.EndDate, realArg.OrganizationId)
	if err != nil {
		return err
	}

	return nil
}
func newBankHandleSyncTransferReceiptArgs() interface{} {
	return api.NewBankHandleSyncTransferReceiptArgs()
}

func newBankHandleSyncTransferReceiptResult() interface{} {
	return api.NewBankHandleSyncTransferReceiptResult()
}

func updateBankTransactionRecDetailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankUpdateBankTransactionRecDetailArgs)

	err := handler.(api.Bank).UpdateBankTransactionRecDetail(ctx, realArg.Req)
	if err != nil {
		return err
	}

	return nil
}
func newBankUpdateBankTransactionRecDetailArgs() interface{} {
	return api.NewBankUpdateBankTransactionRecDetailArgs()
}

func newBankUpdateBankTransactionRecDetailResult() interface{} {
	return api.NewBankUpdateBankTransactionRecDetailResult()
}

func syncTransferReceiptHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankSyncTransferReceiptArgs)

	err := handler.(api.Bank).SyncTransferReceipt(ctx, realArg.TaskId, realArg.Param, realArg.OrganizationId)
	if err != nil {
		return err
	}

	return nil
}
func newBankSyncTransferReceiptArgs() interface{} {
	return api.NewBankSyncTransferReceiptArgs()
}

func newBankSyncTransferReceiptResult() interface{} {
	return api.NewBankSyncTransferReceiptResult()
}

func syncTransactionDetailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankSyncTransactionDetailArgs)

	err := handler.(api.Bank).SyncTransactionDetail(ctx, realArg.TaskId, realArg.Param, realArg.OrganizationId)
	if err != nil {
		return err
	}

	return nil
}
func newBankSyncTransactionDetailArgs() interface{} {
	return api.NewBankSyncTransactionDetailArgs()
}

func newBankSyncTransactionDetailResult() interface{} {
	return api.NewBankSyncTransactionDetailResult()
}

func dashboardDataHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankDashboardDataArgs)
	realResult := result.(*api.BankDashboardDataResult)
	success, err := handler.(api.Bank).DashboardData(ctx, realArg.OrganizationId)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBankDashboardDataArgs() interface{} {
	return api.NewBankDashboardDataArgs()
}

func newBankDashboardDataResult() interface{} {
	return api.NewBankDashboardDataResult()
}

func getCashFlowMonthChartDataHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankGetCashFlowMonthChartDataArgs)
	realResult := result.(*api.BankGetCashFlowMonthChartDataResult)
	success, err := handler.(api.Bank).GetCashFlowMonthChartData(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBankGetCashFlowMonthChartDataArgs() interface{} {
	return api.NewBankGetCashFlowMonthChartDataArgs()
}

func newBankGetCashFlowMonthChartDataResult() interface{} {
	return api.NewBankGetCashFlowMonthChartDataResult()
}

func getBalanceMonthChartDataHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankGetBalanceMonthChartDataArgs)
	realResult := result.(*api.BankGetBalanceMonthChartDataResult)
	success, err := handler.(api.Bank).GetBalanceMonthChartData(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBankGetBalanceMonthChartDataArgs() interface{} {
	return api.NewBankGetBalanceMonthChartDataArgs()
}

func newBankGetBalanceMonthChartDataResult() interface{} {
	return api.NewBankGetBalanceMonthChartDataResult()
}

func queryAccountBalanceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankQueryAccountBalanceArgs)
	realResult := result.(*api.BankQueryAccountBalanceResult)
	success, err := handler.(api.Bank).QueryAccountBalance(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBankQueryAccountBalanceArgs() interface{} {
	return api.NewBankQueryAccountBalanceArgs()
}

func newBankQueryAccountBalanceResult() interface{} {
	return api.NewBankQueryAccountBalanceResult()
}

func importBankBusinessPayrollDataHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankImportBankBusinessPayrollDataArgs)

	err := handler.(api.Bank).ImportBankBusinessPayrollData(ctx, realArg.TaskId, realArg.Param, realArg.OrganizationId)
	if err != nil {
		return err
	}

	return nil
}
func newBankImportBankBusinessPayrollDataArgs() interface{} {
	return api.NewBankImportBankBusinessPayrollDataArgs()
}

func newBankImportBankBusinessPayrollDataResult() interface{} {
	return api.NewBankImportBankBusinessPayrollDataResult()
}

func listBankBusinessPayrollHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankListBankBusinessPayrollArgs)
	realResult := result.(*api.BankListBankBusinessPayrollResult)
	success, err := handler.(api.Bank).ListBankBusinessPayroll(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBankListBankBusinessPayrollArgs() interface{} {
	return api.NewBankListBankBusinessPayrollArgs()
}

func newBankListBankBusinessPayrollResult() interface{} {
	return api.NewBankListBankBusinessPayrollResult()
}

func listBankBusinessPayrollDetailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankListBankBusinessPayrollDetailArgs)
	realResult := result.(*api.BankListBankBusinessPayrollDetailResult)
	success, err := handler.(api.Bank).ListBankBusinessPayrollDetail(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBankListBankBusinessPayrollDetailArgs() interface{} {
	return api.NewBankListBankBusinessPayrollDetailArgs()
}

func newBankListBankBusinessPayrollDetailResult() interface{} {
	return api.NewBankListBankBusinessPayrollDetailResult()
}

func syncBankBusinessPayrollDetailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankSyncBankBusinessPayrollDetailArgs)
	realResult := result.(*api.BankSyncBankBusinessPayrollDetailResult)
	success, err := handler.(api.Bank).SyncBankBusinessPayrollDetail(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBankSyncBankBusinessPayrollDetailArgs() interface{} {
	return api.NewBankSyncBankBusinessPayrollDetailArgs()
}

func newBankSyncBankBusinessPayrollDetailResult() interface{} {
	return api.NewBankSyncBankBusinessPayrollDetailResult()
}

func handleTransactionDetailReceiptHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankHandleTransactionDetailReceiptArgs)

	err := handler.(api.Bank).HandleTransactionDetailReceipt(ctx, realArg.BeginDate, realArg.EndDate, realArg.OrganizationId)
	if err != nil {
		return err
	}

	return nil
}
func newBankHandleTransactionDetailReceiptArgs() interface{} {
	return api.NewBankHandleTransactionDetailReceiptArgs()
}

func newBankHandleTransactionDetailReceiptResult() interface{} {
	return api.NewBankHandleTransactionDetailReceiptResult()
}

func createVirtualAccountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankCreateVirtualAccountArgs)
	realResult := result.(*api.BankCreateVirtualAccountResult)
	success, err := handler.(api.Bank).CreateVirtualAccount(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBankCreateVirtualAccountArgs() interface{} {
	return api.NewBankCreateVirtualAccountArgs()
}

func newBankCreateVirtualAccountResult() interface{} {
	return api.NewBankCreateVirtualAccountResult()
}

func syncVirtualAccountBalanceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {

	err := handler.(api.Bank).SyncVirtualAccountBalance(ctx)
	if err != nil {
		return err
	}

	return nil
}
func newBankSyncVirtualAccountBalanceArgs() interface{} {
	return api.NewBankSyncVirtualAccountBalanceArgs()
}

func newBankSyncVirtualAccountBalanceResult() interface{} {
	return api.NewBankSyncVirtualAccountBalanceResult()
}

func queryVirtualAccountBalanceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankQueryVirtualAccountBalanceArgs)
	realResult := result.(*api.BankQueryVirtualAccountBalanceResult)
	success, err := handler.(api.Bank).QueryVirtualAccountBalance(ctx, realArg.OrganizationId, realArg.BankType)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBankQueryVirtualAccountBalanceArgs() interface{} {
	return api.NewBankQueryVirtualAccountBalanceArgs()
}

func newBankQueryVirtualAccountBalanceResult() interface{} {
	return api.NewBankQueryVirtualAccountBalanceResult()
}

func spdBankVirtualAccountTranscationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankSpdBankVirtualAccountTranscationArgs)
	realResult := result.(*api.BankSpdBankVirtualAccountTranscationResult)
	success, err := handler.(api.Bank).SpdBankVirtualAccountTranscation(ctx, realArg.OrganizationId, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBankSpdBankVirtualAccountTranscationArgs() interface{} {
	return api.NewBankSpdBankVirtualAccountTranscationArgs()
}

func newBankSpdBankVirtualAccountTranscationResult() interface{} {
	return api.NewBankSpdBankVirtualAccountTranscationResult()
}

func pinganBankTransactionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankPinganBankTransactionArgs)
	realResult := result.(*api.BankPinganBankTransactionResult)
	success, err := handler.(api.Bank).PinganBankTransaction(ctx, realArg.OrganizationId, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBankPinganBankTransactionArgs() interface{} {
	return api.NewBankPinganBankTransactionArgs()
}

func newBankPinganBankTransactionResult() interface{} {
	return api.NewBankPinganBankTransactionResult()
}

func listPaymentReceiptHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankListPaymentReceiptArgs)
	realResult := result.(*api.BankListPaymentReceiptResult)
	success, err := handler.(api.Bank).ListPaymentReceipt(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBankListPaymentReceiptArgs() interface{} {
	return api.NewBankListPaymentReceiptArgs()
}

func newBankListPaymentReceiptResult() interface{} {
	return api.NewBankListPaymentReceiptResult()
}

func getPaymentReceiptHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankGetPaymentReceiptArgs)
	realResult := result.(*api.BankGetPaymentReceiptResult)
	success, err := handler.(api.Bank).GetPaymentReceipt(ctx, realArg.Id)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBankGetPaymentReceiptArgs() interface{} {
	return api.NewBankGetPaymentReceiptArgs()
}

func newBankGetPaymentReceiptResult() interface{} {
	return api.NewBankGetPaymentReceiptResult()
}

func simpleGetPaymentReceiptHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankSimpleGetPaymentReceiptArgs)
	realResult := result.(*api.BankSimpleGetPaymentReceiptResult)
	success, err := handler.(api.Bank).SimpleGetPaymentReceipt(ctx, realArg.Id)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBankSimpleGetPaymentReceiptArgs() interface{} {
	return api.NewBankSimpleGetPaymentReceiptArgs()
}

func newBankSimpleGetPaymentReceiptResult() interface{} {
	return api.NewBankSimpleGetPaymentReceiptResult()
}

func simpleGetPaymentReceiptByProcessInstanceIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankSimpleGetPaymentReceiptByProcessInstanceIdArgs)
	realResult := result.(*api.BankSimpleGetPaymentReceiptByProcessInstanceIdResult)
	success, err := handler.(api.Bank).SimpleGetPaymentReceiptByProcessInstanceId(ctx, realArg.Id)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBankSimpleGetPaymentReceiptByProcessInstanceIdArgs() interface{} {
	return api.NewBankSimpleGetPaymentReceiptByProcessInstanceIdArgs()
}

func newBankSimpleGetPaymentReceiptByProcessInstanceIdResult() interface{} {
	return api.NewBankSimpleGetPaymentReceiptByProcessInstanceIdResult()
}

func addPaymentReceiptHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankAddPaymentReceiptArgs)

	err := handler.(api.Bank).AddPaymentReceipt(ctx, realArg.Req)
	if err != nil {
		return err
	}

	return nil
}
func newBankAddPaymentReceiptArgs() interface{} {
	return api.NewBankAddPaymentReceiptArgs()
}

func newBankAddPaymentReceiptResult() interface{} {
	return api.NewBankAddPaymentReceiptResult()
}

func approvePaymentReceiptHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankApprovePaymentReceiptArgs)

	err := handler.(api.Bank).ApprovePaymentReceipt(ctx, realArg.Id, realArg.Req)
	if err != nil {
		return err
	}

	return nil
}
func newBankApprovePaymentReceiptArgs() interface{} {
	return api.NewBankApprovePaymentReceiptArgs()
}

func newBankApprovePaymentReceiptResult() interface{} {
	return api.NewBankApprovePaymentReceiptResult()
}

func refusePaymentReceiptHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankRefusePaymentReceiptArgs)

	err := handler.(api.Bank).RefusePaymentReceipt(ctx, realArg.Id, realArg.Req, realArg.Remark)
	if err != nil {
		return err
	}

	return nil
}
func newBankRefusePaymentReceiptArgs() interface{} {
	return api.NewBankRefusePaymentReceiptArgs()
}

func newBankRefusePaymentReceiptResult() interface{} {
	return api.NewBankRefusePaymentReceiptResult()
}

func paymentReceiptRunHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankPaymentReceiptRunArgs)

	err := handler.(api.Bank).PaymentReceiptRun(ctx, realArg.Id)
	if err != nil {
		return err
	}

	return nil
}
func newBankPaymentReceiptRunArgs() interface{} {
	return api.NewBankPaymentReceiptRunArgs()
}

func newBankPaymentReceiptRunResult() interface{} {
	return api.NewBankPaymentReceiptRunResult()
}

func transmitPaymentReceiptHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankTransmitPaymentReceiptArgs)

	err := handler.(api.Bank).TransmitPaymentReceipt(ctx, realArg.ProcessInstanceId, realArg.TransmitUserId)
	if err != nil {
		return err
	}

	return nil
}
func newBankTransmitPaymentReceiptArgs() interface{} {
	return api.NewBankTransmitPaymentReceiptArgs()
}

func newBankTransmitPaymentReceiptResult() interface{} {
	return api.NewBankTransmitPaymentReceiptResult()
}

func sendBackPaymentApplicationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankSendBackPaymentApplicationArgs)

	err := handler.(api.Bank).SendBackPaymentApplication(ctx, realArg.Id, realArg.Req, realArg.Remark)
	if err != nil {
		return err
	}

	return nil
}
func newBankSendBackPaymentApplicationArgs() interface{} {
	return api.NewBankSendBackPaymentApplicationArgs()
}

func newBankSendBackPaymentApplicationResult() interface{} {
	return api.NewBankSendBackPaymentApplicationResult()
}

func withDrawPaymentReceiptHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankWithDrawPaymentReceiptArgs)

	err := handler.(api.Bank).WithDrawPaymentReceipt(ctx, realArg.Id, realArg.Req)
	if err != nil {
		return err
	}

	return nil
}
func newBankWithDrawPaymentReceiptArgs() interface{} {
	return api.NewBankWithDrawPaymentReceiptArgs()
}

func newBankWithDrawPaymentReceiptResult() interface{} {
	return api.NewBankWithDrawPaymentReceiptResult()
}

func commentPaymentReceiptHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankCommentPaymentReceiptArgs)

	err := handler.(api.Bank).CommentPaymentReceipt(ctx, realArg.Req)
	if err != nil {
		return err
	}

	return nil
}
func newBankCommentPaymentReceiptArgs() interface{} {
	return api.NewBankCommentPaymentReceiptArgs()
}

func newBankCommentPaymentReceiptResult() interface{} {
	return api.NewBankCommentPaymentReceiptResult()
}

func addTagPaymentReceiptHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankAddTagPaymentReceiptArgs)

	err := handler.(api.Bank).AddTagPaymentReceipt(ctx, realArg.Req)
	if err != nil {
		return err
	}

	return nil
}
func newBankAddTagPaymentReceiptArgs() interface{} {
	return api.NewBankAddTagPaymentReceiptArgs()
}

func newBankAddTagPaymentReceiptResult() interface{} {
	return api.NewBankAddTagPaymentReceiptResult()
}

func handleSyncPaymentReceiptHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankHandleSyncPaymentReceiptArgs)

	err := handler.(api.Bank).HandleSyncPaymentReceipt(ctx, realArg.BeginDate, realArg.EndDate, realArg.OrganizationId)
	if err != nil {
		return err
	}

	return nil
}
func newBankHandleSyncPaymentReceiptArgs() interface{} {
	return api.NewBankHandleSyncPaymentReceiptArgs()
}

func newBankHandleSyncPaymentReceiptResult() interface{} {
	return api.NewBankHandleSyncPaymentReceiptResult()
}

func syncPaymentReceiptHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankSyncPaymentReceiptArgs)

	err := handler.(api.Bank).SyncPaymentReceipt(ctx, realArg.TaskId, realArg.Param, realArg.OrganizationId)
	if err != nil {
		return err
	}

	return nil
}
func newBankSyncPaymentReceiptArgs() interface{} {
	return api.NewBankSyncPaymentReceiptArgs()
}

func newBankSyncPaymentReceiptResult() interface{} {
	return api.NewBankSyncPaymentReceiptResult()
}

func pinganBankAccountSignatureApplyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankPinganBankAccountSignatureApplyArgs)
	realResult := result.(*api.BankPinganBankAccountSignatureApplyResult)
	success, err := handler.(api.Bank).PinganBankAccountSignatureApply(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBankPinganBankAccountSignatureApplyArgs() interface{} {
	return api.NewBankPinganBankAccountSignatureApplyArgs()
}

func newBankPinganBankAccountSignatureApplyResult() interface{} {
	return api.NewBankPinganBankAccountSignatureApplyResult()
}

func pinganBankAccountSignatureQueryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankPinganBankAccountSignatureQueryArgs)
	realResult := result.(*api.BankPinganBankAccountSignatureQueryResult)
	success, err := handler.(api.Bank).PinganBankAccountSignatureQuery(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBankPinganBankAccountSignatureQueryArgs() interface{} {
	return api.NewBankPinganBankAccountSignatureQueryArgs()
}

func newBankPinganBankAccountSignatureQueryResult() interface{} {
	return api.NewBankPinganBankAccountSignatureQueryResult()
}

func systemRefusePaymentReceiptHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankSystemRefusePaymentReceiptArgs)

	err := handler.(api.Bank).SystemRefusePaymentReceipt(ctx, realArg.Id)
	if err != nil {
		return err
	}

	return nil
}
func newBankSystemRefusePaymentReceiptArgs() interface{} {
	return api.NewBankSystemRefusePaymentReceiptArgs()
}

func newBankSystemRefusePaymentReceiptResult() interface{} {
	return api.NewBankSystemRefusePaymentReceiptResult()
}

func systemApprovePaymentReceiptHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankSystemApprovePaymentReceiptArgs)

	err := handler.(api.Bank).SystemApprovePaymentReceipt(ctx, realArg.Id)
	if err != nil {
		return err
	}

	return nil
}
func newBankSystemApprovePaymentReceiptArgs() interface{} {
	return api.NewBankSystemApprovePaymentReceiptArgs()
}

func newBankSystemApprovePaymentReceiptResult() interface{} {
	return api.NewBankSystemApprovePaymentReceiptResult()
}

func icbcBankAccountSignatureQueryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankIcbcBankAccountSignatureQueryArgs)
	realResult := result.(*api.BankIcbcBankAccountSignatureQueryResult)
	success, err := handler.(api.Bank).IcbcBankAccountSignatureQuery(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBankIcbcBankAccountSignatureQueryArgs() interface{} {
	return api.NewBankIcbcBankAccountSignatureQueryArgs()
}

func newBankIcbcBankAccountSignatureQueryResult() interface{} {
	return api.NewBankIcbcBankAccountSignatureQueryResult()
}

func minShengBankAccountSignatureApplyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankMinShengBankAccountSignatureApplyArgs)
	realResult := result.(*api.BankMinShengBankAccountSignatureApplyResult)
	success, err := handler.(api.Bank).MinShengBankAccountSignatureApply(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newBankMinShengBankAccountSignatureApplyArgs() interface{} {
	return api.NewBankMinShengBankAccountSignatureApplyArgs()
}

func newBankMinShengBankAccountSignatureApplyResult() interface{} {
	return api.NewBankMinShengBankAccountSignatureApplyResult()
}

func minShengBankAccountSignatureQueryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankMinShengBankAccountSignatureQueryArgs)
	realResult := result.(*api.BankMinShengBankAccountSignatureQueryResult)
	success, err := handler.(api.Bank).MinShengBankAccountSignatureQuery(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBankMinShengBankAccountSignatureQueryArgs() interface{} {
	return api.NewBankMinShengBankAccountSignatureQueryArgs()
}

func newBankMinShengBankAccountSignatureQueryResult() interface{} {
	return api.NewBankMinShengBankAccountSignatureQueryResult()
}

func icbcBankListTransactionDetailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankIcbcBankListTransactionDetailArgs)

	err := handler.(api.Bank).IcbcBankListTransactionDetail(ctx, realArg.BeginDate, realArg.EndDate, realArg.OrganizationId)
	if err != nil {
		return err
	}

	return nil
}
func newBankIcbcBankListTransactionDetailArgs() interface{} {
	return api.NewBankIcbcBankListTransactionDetailArgs()
}

func newBankIcbcBankListTransactionDetailResult() interface{} {
	return api.NewBankIcbcBankListTransactionDetailResult()
}

func syncBankTransactionReceiptHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankSyncBankTransactionReceiptArgs)

	err := handler.(api.Bank).SyncBankTransactionReceipt(ctx, realArg.BeginDate, realArg.EndDate, realArg.OrganizationId, realArg.BankType)
	if err != nil {
		return err
	}

	return nil
}
func newBankSyncBankTransactionReceiptArgs() interface{} {
	return api.NewBankSyncBankTransactionReceiptArgs()
}

func newBankSyncBankTransactionReceiptResult() interface{} {
	return api.NewBankSyncBankTransactionReceiptResult()
}

func getBankTransactionReceiptHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.BankGetBankTransactionReceiptArgs)

	err := handler.(api.Bank).GetBankTransactionReceipt(ctx, realArg.Id)
	if err != nil {
		return err
	}

	return nil
}
func newBankGetBankTransactionReceiptArgs() interface{} {
	return api.NewBankGetBankTransactionReceiptArgs()
}

func newBankGetBankTransactionReceiptResult() interface{} {
	return api.NewBankGetBankTransactionReceiptResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) ListBankTransferReceipt(ctx context.Context, req *api.ListBankTransferReceiptRequest) (r *api.ListBankTransferReceiptResponse, err error) {
	var _args api.BankListBankTransferReceiptArgs
	_args.Req = req
	var _result api.BankListBankTransferReceiptResult
	if err = p.c.Call(ctx, "listBankTransferReceipt", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetBankTransferReceipt(ctx context.Context, req *api.BankTransferReceiptData) (r *api.BankTransferReceiptData, err error) {
	var _args api.BankGetBankTransferReceiptArgs
	_args.Req = req
	var _result api.BankGetBankTransferReceiptResult
	if err = p.c.Call(ctx, "getBankTransferReceipt", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddBankTransferReceipt(ctx context.Context, req *api.BankTransferReceiptData) (r int64, err error) {
	var _args api.BankAddBankTransferReceiptArgs
	_args.Req = req
	var _result api.BankAddBankTransferReceiptResult
	if err = p.c.Call(ctx, "addBankTransferReceipt", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EditBankTransferReceipt(ctx context.Context, req *api.BankTransferReceiptData) (err error) {
	var _args api.BankEditBankTransferReceiptArgs
	_args.Req = req
	var _result api.BankEditBankTransferReceiptResult
	if err = p.c.Call(ctx, "editBankTransferReceipt", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) DeleteBankTransferReceipt(ctx context.Context, req int64) (err error) {
	var _args api.BankDeleteBankTransferReceiptArgs
	_args.Req = req
	var _result api.BankDeleteBankTransferReceiptResult
	if err = p.c.Call(ctx, "deleteBankTransferReceipt", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) CountBankTransferReceipt(ctx context.Context, req *api.BankTransferReceiptData) (r int64, err error) {
	var _args api.BankCountBankTransferReceiptArgs
	_args.Req = req
	var _result api.BankCountBankTransferReceiptResult
	if err = p.c.Call(ctx, "countBankTransferReceipt", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ConfirmTransaction(ctx context.Context, req *api.BankTransferReceiptData) (err error) {
	var _args api.BankConfirmTransactionArgs
	_args.Req = req
	var _result api.BankConfirmTransactionResult
	if err = p.c.Call(ctx, "confirmTransaction", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) HandleTransferReceiptResult_(ctx context.Context, id int64) (err error) {
	var _args api.BankHandleTransferReceiptResultArgs
	_args.Id = id
	var _result api.BankHandleTransferReceiptResultResult
	if err = p.c.Call(ctx, "handleTransferReceiptResult", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) ListBankTransactionDetail(ctx context.Context, req *api.ListBankTransactionDetailRequest) (r *api.ListBankTransactionDetailResponse, err error) {
	var _args api.BankListBankTransactionDetailArgs
	_args.Req = req
	var _result api.BankListBankTransactionDetailResult
	if err = p.c.Call(ctx, "listBankTransactionDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SimpleListBankTransactionDetail(ctx context.Context, req *api.ListBankTransactionDetailRequest) (r *api.ListBankTransactionDetailResponse, err error) {
	var _args api.BankSimpleListBankTransactionDetailArgs
	_args.Req = req
	var _result api.BankSimpleListBankTransactionDetailResult
	if err = p.c.Call(ctx, "simpleListBankTransactionDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetBankTransactionDetail(ctx context.Context, req *api.BankTransactionDetailData) (r *api.BankTransactionDetailData, err error) {
	var _args api.BankGetBankTransactionDetailArgs
	_args.Req = req
	var _result api.BankGetBankTransactionDetailResult
	if err = p.c.Call(ctx, "getBankTransactionDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SimpleGetBankTransactionDetail(ctx context.Context, req *api.BankTransactionDetailData) (r *api.BankTransactionDetailData, err error) {
	var _args api.BankSimpleGetBankTransactionDetailArgs
	_args.Req = req
	var _result api.BankSimpleGetBankTransactionDetailResult
	if err = p.c.Call(ctx, "simpleGetBankTransactionDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) HandleTransactionDetail(ctx context.Context, beginDate string, endDate string, organizationId int64) (err error) {
	var _args api.BankHandleTransactionDetailArgs
	_args.BeginDate = beginDate
	_args.EndDate = endDate
	_args.OrganizationId = organizationId
	var _result api.BankHandleTransactionDetailResult
	if err = p.c.Call(ctx, "handleTransactionDetail", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) CreateTransactionDetailProcessInstance(ctx context.Context, id int64) (err error) {
	var _args api.BankCreateTransactionDetailProcessInstanceArgs
	_args.Id = id
	var _result api.BankCreateTransactionDetailProcessInstanceResult
	if err = p.c.Call(ctx, "createTransactionDetailProcessInstance", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) EditBankTransactionDetailExtField(ctx context.Context, req *api.BankTransactionDetailData) (err error) {
	var _args api.BankEditBankTransactionDetailExtFieldArgs
	_args.Req = req
	var _result api.BankEditBankTransactionDetailExtFieldResult
	if err = p.c.Call(ctx, "EditBankTransactionDetailExtField", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) ListBankTransactionDetailProcessInstance(ctx context.Context, id int64) (r []*api.BankTransactionDetailProcessInstanceData, err error) {
	var _args api.BankListBankTransactionDetailProcessInstanceArgs
	_args.Id = id
	var _result api.BankListBankTransactionDetailProcessInstanceResult
	if err = p.c.Call(ctx, "listBankTransactionDetailProcessInstance", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetBankCodeInfo(ctx context.Context, code string) (r *api.BankCodeData, err error) {
	var _args api.BankGetBankCodeInfoArgs
	_args.Code = code
	var _result api.BankGetBankCodeInfoResult
	if err = p.c.Call(ctx, "GetBankCodeInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryBankCardInfo(ctx context.Context, cardNo string) (r *api.QueryBankCardInfoResponse, err error) {
	var _args api.BankQueryBankCardInfoArgs
	_args.CardNo = cardNo
	var _result api.BankQueryBankCardInfoResult
	if err = p.c.Call(ctx, "QueryBankCardInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListBankCode(ctx context.Context, req *api.ListBankCodeRequest) (r *api.ListBankCodeResponse, err error) {
	var _args api.BankListBankCodeArgs
	_args.Req = req
	var _result api.BankListBankCodeResult
	if err = p.c.Call(ctx, "ListBankCode", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetBankCode(ctx context.Context, req *api.BankCodeData) (r *api.BankCodeData, err error) {
	var _args api.BankGetBankCodeArgs
	_args.Req = req
	var _result api.BankGetBankCodeResult
	if err = p.c.Call(ctx, "GetBankCode", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddBankCode(ctx context.Context, req *api.AddBankCodeRequest) (err error) {
	var _args api.BankAddBankCodeArgs
	_args.Req = req
	var _result api.BankAddBankCodeResult
	if err = p.c.Call(ctx, "AddBankCode", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) EditBankCode(ctx context.Context, req *api.BankCodeData) (err error) {
	var _args api.BankEditBankCodeArgs
	_args.Req = req
	var _result api.BankEditBankCodeResult
	if err = p.c.Call(ctx, "EditBankCode", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) DeleteBankCode(ctx context.Context, id int64) (err error) {
	var _args api.BankDeleteBankCodeArgs
	_args.Id = id
	var _result api.BankDeleteBankCodeResult
	if err = p.c.Call(ctx, "DeleteBankCode", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) HandleSyncTransferReceipt(ctx context.Context, beginDate string, endDate string, organizationId int64) (err error) {
	var _args api.BankHandleSyncTransferReceiptArgs
	_args.BeginDate = beginDate
	_args.EndDate = endDate
	_args.OrganizationId = organizationId
	var _result api.BankHandleSyncTransferReceiptResult
	if err = p.c.Call(ctx, "HandleSyncTransferReceipt", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) UpdateBankTransactionRecDetail(ctx context.Context, req *api.BankTransactionRecDetailData) (err error) {
	var _args api.BankUpdateBankTransactionRecDetailArgs
	_args.Req = req
	var _result api.BankUpdateBankTransactionRecDetailResult
	if err = p.c.Call(ctx, "UpdateBankTransactionRecDetail", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) SyncTransferReceipt(ctx context.Context, taskId int64, param []byte, organizationId int64) (err error) {
	var _args api.BankSyncTransferReceiptArgs
	_args.TaskId = taskId
	_args.Param = param
	_args.OrganizationId = organizationId
	var _result api.BankSyncTransferReceiptResult
	if err = p.c.Call(ctx, "syncTransferReceipt", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) SyncTransactionDetail(ctx context.Context, taskId int64, param []byte, organizationId int64) (err error) {
	var _args api.BankSyncTransactionDetailArgs
	_args.TaskId = taskId
	_args.Param = param
	_args.OrganizationId = organizationId
	var _result api.BankSyncTransactionDetailResult
	if err = p.c.Call(ctx, "syncTransactionDetail", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) DashboardData(ctx context.Context, organizationId int64) (r *api.DashboardData, err error) {
	var _args api.BankDashboardDataArgs
	_args.OrganizationId = organizationId
	var _result api.BankDashboardDataResult
	if err = p.c.Call(ctx, "dashboardData", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCashFlowMonthChartData(ctx context.Context, req *api.MonthChartDataRequest) (r *api.ChartData, err error) {
	var _args api.BankGetCashFlowMonthChartDataArgs
	_args.Req = req
	var _result api.BankGetCashFlowMonthChartDataResult
	if err = p.c.Call(ctx, "getCashFlowMonthChartData", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetBalanceMonthChartData(ctx context.Context, req *api.MonthChartDataRequest) (r *api.ChartData, err error) {
	var _args api.BankGetBalanceMonthChartDataArgs
	_args.Req = req
	var _result api.BankGetBalanceMonthChartDataResult
	if err = p.c.Call(ctx, "getBalanceMonthChartData", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryAccountBalance(ctx context.Context, req *api.QueryAccountBalanceRequest) (r *api.QueryAccountBalanceResponse, err error) {
	var _args api.BankQueryAccountBalanceArgs
	_args.Req = req
	var _result api.BankQueryAccountBalanceResult
	if err = p.c.Call(ctx, "QueryAccountBalance", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ImportBankBusinessPayrollData(ctx context.Context, taskId int64, param []byte, organizationId int64) (err error) {
	var _args api.BankImportBankBusinessPayrollDataArgs
	_args.TaskId = taskId
	_args.Param = param
	_args.OrganizationId = organizationId
	var _result api.BankImportBankBusinessPayrollDataResult
	if err = p.c.Call(ctx, "ImportBankBusinessPayrollData", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) ListBankBusinessPayroll(ctx context.Context, req *api.ListBusinessPayrollRequest) (r *api.ListBusinessPayrollResponse, err error) {
	var _args api.BankListBankBusinessPayrollArgs
	_args.Req = req
	var _result api.BankListBankBusinessPayrollResult
	if err = p.c.Call(ctx, "ListBankBusinessPayroll", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListBankBusinessPayrollDetail(ctx context.Context, req *api.ListBusinessPayrollDetailRequest) (r *api.ListBusinessPayrollDetailResponse, err error) {
	var _args api.BankListBankBusinessPayrollDetailArgs
	_args.Req = req
	var _result api.BankListBankBusinessPayrollDetailResult
	if err = p.c.Call(ctx, "ListBankBusinessPayrollDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SyncBankBusinessPayrollDetail(ctx context.Context, req *api.SyncBusinessPayrollResultRequest) (r *api.SyncBusinessPayrollResultResponse, err error) {
	var _args api.BankSyncBankBusinessPayrollDetailArgs
	_args.Req = req
	var _result api.BankSyncBankBusinessPayrollDetailResult
	if err = p.c.Call(ctx, "SyncBankBusinessPayrollDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) HandleTransactionDetailReceipt(ctx context.Context, beginDate string, endDate string, organizationId int64) (err error) {
	var _args api.BankHandleTransactionDetailReceiptArgs
	_args.BeginDate = beginDate
	_args.EndDate = endDate
	_args.OrganizationId = organizationId
	var _result api.BankHandleTransactionDetailReceiptResult
	if err = p.c.Call(ctx, "HandleTransactionDetailReceipt", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) CreateVirtualAccount(ctx context.Context, req *api.CreateVirtualAccountRequest) (r *api.CreateVirtualAccountResponse, err error) {
	var _args api.BankCreateVirtualAccountArgs
	_args.Req = req
	var _result api.BankCreateVirtualAccountResult
	if err = p.c.Call(ctx, "createVirtualAccount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SyncVirtualAccountBalance(ctx context.Context) (err error) {
	var _args api.BankSyncVirtualAccountBalanceArgs
	var _result api.BankSyncVirtualAccountBalanceResult
	if err = p.c.Call(ctx, "SyncVirtualAccountBalance", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) QueryVirtualAccountBalance(ctx context.Context, organizationId int64, bankType string) (r *api.VirtualAccountBalanceData, err error) {
	var _args api.BankQueryVirtualAccountBalanceArgs
	_args.OrganizationId = organizationId
	_args.BankType = bankType
	var _result api.BankQueryVirtualAccountBalanceResult
	if err = p.c.Call(ctx, "QueryVirtualAccountBalance", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SpdBankVirtualAccountTranscation(ctx context.Context, organizationId int64, req *api.BankTransferReceiptData) (r *api.BankVirtualAccountTranscationResponse, err error) {
	var _args api.BankSpdBankVirtualAccountTranscationArgs
	_args.OrganizationId = organizationId
	_args.Req = req
	var _result api.BankSpdBankVirtualAccountTranscationResult
	if err = p.c.Call(ctx, "spdBankVirtualAccountTranscation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PinganBankTransaction(ctx context.Context, organizationId int64, req *api.BankTransferReceiptData) (r *api.BankAccountTranscationResponse, err error) {
	var _args api.BankPinganBankTransactionArgs
	_args.OrganizationId = organizationId
	_args.Req = req
	var _result api.BankPinganBankTransactionResult
	if err = p.c.Call(ctx, "PinganBankTransaction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListPaymentReceipt(ctx context.Context, req *api.ListPaymentReceiptRequest) (r *api.ListPaymentReceiptResponse, err error) {
	var _args api.BankListPaymentReceiptArgs
	_args.Req = req
	var _result api.BankListPaymentReceiptResult
	if err = p.c.Call(ctx, "listPaymentReceipt", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPaymentReceipt(ctx context.Context, id int64) (r *api.PaymentReceiptData, err error) {
	var _args api.BankGetPaymentReceiptArgs
	_args.Id = id
	var _result api.BankGetPaymentReceiptResult
	if err = p.c.Call(ctx, "getPaymentReceipt", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SimpleGetPaymentReceipt(ctx context.Context, id int64) (r *api.PaymentReceiptData, err error) {
	var _args api.BankSimpleGetPaymentReceiptArgs
	_args.Id = id
	var _result api.BankSimpleGetPaymentReceiptResult
	if err = p.c.Call(ctx, "simpleGetPaymentReceipt", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SimpleGetPaymentReceiptByProcessInstanceId(ctx context.Context, id int64) (r *api.PaymentReceiptData, err error) {
	var _args api.BankSimpleGetPaymentReceiptByProcessInstanceIdArgs
	_args.Id = id
	var _result api.BankSimpleGetPaymentReceiptByProcessInstanceIdResult
	if err = p.c.Call(ctx, "simpleGetPaymentReceiptByProcessInstanceId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddPaymentReceipt(ctx context.Context, req *api.PaymentReceiptData) (err error) {
	var _args api.BankAddPaymentReceiptArgs
	_args.Req = req
	var _result api.BankAddPaymentReceiptResult
	if err = p.c.Call(ctx, "addPaymentReceipt", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) ApprovePaymentReceipt(ctx context.Context, id int64, req *api.PaymentReceiptData) (err error) {
	var _args api.BankApprovePaymentReceiptArgs
	_args.Id = id
	_args.Req = req
	var _result api.BankApprovePaymentReceiptResult
	if err = p.c.Call(ctx, "approvePaymentReceipt", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) RefusePaymentReceipt(ctx context.Context, id int64, req *api.PaymentReceiptData, remark string) (err error) {
	var _args api.BankRefusePaymentReceiptArgs
	_args.Id = id
	_args.Req = req
	_args.Remark = remark
	var _result api.BankRefusePaymentReceiptResult
	if err = p.c.Call(ctx, "refusePaymentReceipt", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) PaymentReceiptRun(ctx context.Context, id int64) (err error) {
	var _args api.BankPaymentReceiptRunArgs
	_args.Id = id
	var _result api.BankPaymentReceiptRunResult
	if err = p.c.Call(ctx, "paymentReceiptRun", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) TransmitPaymentReceipt(ctx context.Context, processInstanceId int64, transmitUserId int64) (err error) {
	var _args api.BankTransmitPaymentReceiptArgs
	_args.ProcessInstanceId = processInstanceId
	_args.TransmitUserId = transmitUserId
	var _result api.BankTransmitPaymentReceiptResult
	if err = p.c.Call(ctx, "transmitPaymentReceipt", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) SendBackPaymentApplication(ctx context.Context, id int64, req *api.PaymentReceiptData, remark string) (err error) {
	var _args api.BankSendBackPaymentApplicationArgs
	_args.Id = id
	_args.Req = req
	_args.Remark = remark
	var _result api.BankSendBackPaymentApplicationResult
	if err = p.c.Call(ctx, "sendBackPaymentApplication", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) WithDrawPaymentReceipt(ctx context.Context, id int64, req *api.PaymentReceiptData) (err error) {
	var _args api.BankWithDrawPaymentReceiptArgs
	_args.Id = id
	_args.Req = req
	var _result api.BankWithDrawPaymentReceiptResult
	if err = p.c.Call(ctx, "withDrawPaymentReceipt", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) CommentPaymentReceipt(ctx context.Context, req *api.PaymentReceiptData) (err error) {
	var _args api.BankCommentPaymentReceiptArgs
	_args.Req = req
	var _result api.BankCommentPaymentReceiptResult
	if err = p.c.Call(ctx, "commentPaymentReceipt", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) AddTagPaymentReceipt(ctx context.Context, req *api.PaymentReceiptData) (err error) {
	var _args api.BankAddTagPaymentReceiptArgs
	_args.Req = req
	var _result api.BankAddTagPaymentReceiptResult
	if err = p.c.Call(ctx, "addTagPaymentReceipt", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) HandleSyncPaymentReceipt(ctx context.Context, beginDate string, endDate string, organizationId int64) (err error) {
	var _args api.BankHandleSyncPaymentReceiptArgs
	_args.BeginDate = beginDate
	_args.EndDate = endDate
	_args.OrganizationId = organizationId
	var _result api.BankHandleSyncPaymentReceiptResult
	if err = p.c.Call(ctx, "handleSyncPaymentReceipt", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) SyncPaymentReceipt(ctx context.Context, taskId int64, param []byte, organizationId int64) (err error) {
	var _args api.BankSyncPaymentReceiptArgs
	_args.TaskId = taskId
	_args.Param = param
	_args.OrganizationId = organizationId
	var _result api.BankSyncPaymentReceiptResult
	if err = p.c.Call(ctx, "syncPaymentReceipt", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) PinganBankAccountSignatureApply(ctx context.Context, req *api.PinganBankAccountSignatureApplyRequest) (r *api.PinganUserAcctSignatureApplyResponse, err error) {
	var _args api.BankPinganBankAccountSignatureApplyArgs
	_args.Req = req
	var _result api.BankPinganBankAccountSignatureApplyResult
	if err = p.c.Call(ctx, "pinganBankAccountSignatureApply", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PinganBankAccountSignatureQuery(ctx context.Context, req *api.PinganBankAccountSignatureApplyRequest) (r *api.PinganUserAcctSignatureApplyResponse, err error) {
	var _args api.BankPinganBankAccountSignatureQueryArgs
	_args.Req = req
	var _result api.BankPinganBankAccountSignatureQueryResult
	if err = p.c.Call(ctx, "pinganBankAccountSignatureQuery", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SystemRefusePaymentReceipt(ctx context.Context, id int64) (err error) {
	var _args api.BankSystemRefusePaymentReceiptArgs
	_args.Id = id
	var _result api.BankSystemRefusePaymentReceiptResult
	if err = p.c.Call(ctx, "systemRefusePaymentReceipt", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) SystemApprovePaymentReceipt(ctx context.Context, id int64) (err error) {
	var _args api.BankSystemApprovePaymentReceiptArgs
	_args.Id = id
	var _result api.BankSystemApprovePaymentReceiptResult
	if err = p.c.Call(ctx, "systemApprovePaymentReceipt", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) IcbcBankAccountSignatureQuery(ctx context.Context, req *api.IcbcBankAccountSignatureRequest) (r *api.IcbcBankAccountSignatureQueryResponse, err error) {
	var _args api.BankIcbcBankAccountSignatureQueryArgs
	_args.Req = req
	var _result api.BankIcbcBankAccountSignatureQueryResult
	if err = p.c.Call(ctx, "icbcBankAccountSignatureQuery", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MinShengBankAccountSignatureApply(ctx context.Context, req *api.MinShengBankAccountSignatureRequest) (r string, err error) {
	var _args api.BankMinShengBankAccountSignatureApplyArgs
	_args.Req = req
	var _result api.BankMinShengBankAccountSignatureApplyResult
	if err = p.c.Call(ctx, "MinShengBankAccountSignatureApply", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MinShengBankAccountSignatureQuery(ctx context.Context, req *api.MinShengBankAccountSignatureRequest) (r *api.MinShengBankAccountSignatureQueryResponse, err error) {
	var _args api.BankMinShengBankAccountSignatureQueryArgs
	_args.Req = req
	var _result api.BankMinShengBankAccountSignatureQueryResult
	if err = p.c.Call(ctx, "MinShengBankAccountSignatureQuery", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) IcbcBankListTransactionDetail(ctx context.Context, beginDate string, endDate string, organizationId int64) (err error) {
	var _args api.BankIcbcBankListTransactionDetailArgs
	_args.BeginDate = beginDate
	_args.EndDate = endDate
	_args.OrganizationId = organizationId
	var _result api.BankIcbcBankListTransactionDetailResult
	if err = p.c.Call(ctx, "icbcBankListTransactionDetail", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) SyncBankTransactionReceipt(ctx context.Context, beginDate string, endDate string, organizationId int64, bankType string) (err error) {
	var _args api.BankSyncBankTransactionReceiptArgs
	_args.BeginDate = beginDate
	_args.EndDate = endDate
	_args.OrganizationId = organizationId
	_args.BankType = bankType
	var _result api.BankSyncBankTransactionReceiptResult
	if err = p.c.Call(ctx, "syncBankTransactionReceipt", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) GetBankTransactionReceipt(ctx context.Context, id int64) (err error) {
	var _args api.BankGetBankTransactionReceiptArgs
	_args.Id = id
	var _result api.BankGetBankTransactionReceiptResult
	if err = p.c.Call(ctx, "getBankTransactionReceipt", &_args, &_result); err != nil {
		return
	}
	return nil
}
