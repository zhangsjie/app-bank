// Code generated by thriftgo (0.3.1). DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type BankTransferReceiptData struct {
	Id                        int64   `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	CreatedAt                 []byte  `thrift:"createdAt,2" frugal:"2,default,binary" json:"createdAt"`
	UpdatedAt                 []byte  `thrift:"updatedAt,3" frugal:"3,default,binary" json:"updatedAt"`
	OrganizationId            int64   `thrift:"organizationId,4" frugal:"4,default,i64" json:"organizationId"`
	ProcessInstanceId         int64   `thrift:"processInstanceId,5" frugal:"5,default,i64" json:"processInstanceId"`
	OriginatorUserName        string  `thrift:"originatorUserName,6" frugal:"6,default,string" json:"originatorUserName"`
	SerialNo                  string  `thrift:"serialNo,7" frugal:"7,default,string" json:"serialNo"`
	PayAccount                string  `thrift:"payAccount,8" frugal:"8,default,string" json:"payAccount"`
	PayAccountName            string  `thrift:"payAccountName,9" frugal:"9,default,string" json:"payAccountName"`
	RecAccount                string  `thrift:"recAccount,10" frugal:"10,default,string" json:"recAccount"`
	RecAccountName            string  `thrift:"recAccountName,11" frugal:"11,default,string" json:"recAccountName"`
	PayAmount                 float64 `thrift:"payAmount,12" frugal:"12,default,double" json:"payAmount"`
	CurrencyType              string  `thrift:"currencyType,13" frugal:"13,default,string" json:"currencyType"`
	PayRem                    string  `thrift:"payRem,14" frugal:"14,default,string" json:"payRem"`
	PubPriFlag                string  `thrift:"pubPriFlag,15" frugal:"15,default,string" json:"pubPriFlag"`
	RecBankType               string  `thrift:"recBankType,16" frugal:"16,default,string" json:"recBankType"`
	RecAccountOpenBank        string  `thrift:"recAccountOpenBank,17" frugal:"17,default,string" json:"recAccountOpenBank"`
	UnionBankNo               string  `thrift:"unionBankNo,18" frugal:"18,default,string" json:"unionBankNo"`
	ClearBankNo               string  `thrift:"clearBankNo,19" frugal:"19,default,string" json:"clearBankNo"`
	RmtType                   string  `thrift:"rmtType,20" frugal:"20,default,string" json:"rmtType"`
	TransferFlag              string  `thrift:"transferFlag,21" frugal:"21,default,string" json:"transferFlag"`
	ChargeFee                 float64 `thrift:"chargeFee,22" frugal:"22,default,double" json:"chargeFee"`
	OrderState                string  `thrift:"orderState,23" frugal:"23,default,string" json:"orderState"`
	RetCode                   string  `thrift:"retCode,24" frugal:"24,default,string" json:"retCode"`
	RetMessage                string  `thrift:"retMessage,25" frugal:"25,default,string" json:"retMessage"`
	OrderFlowNo               string  `thrift:"orderFlowNo,26" frugal:"26,default,string" json:"orderFlowNo"`
	ProcessBusinessId         string  `thrift:"processBusinessId,27" frugal:"27,default,string" json:"processBusinessId"`
	ProcessComment            string  `thrift:"processComment,28" frugal:"28,default,string" json:"processComment"`
	DetailHostFlowNo          string  `thrift:"DetailHostFlowNo,29" frugal:"29,default,string" json:"DetailHostFlowNo"`
	CommentUserId             int64   `thrift:"CommentUserId,30" frugal:"30,default,i64" json:"CommentUserId"`
	CommentUserName           string  `thrift:"commentUserName,31" frugal:"31,default,string" json:"commentUserName"`
	ProcessStatus             string  `thrift:"processStatus,32" frugal:"32,default,string" json:"processStatus"`
	RecAccountOpenBankFilling string  `thrift:"recAccountOpenBankFilling,33" frugal:"33,default,string" json:"recAccountOpenBankFilling"`
	PayAccountOpenBankFilling string  `thrift:"payAccountOpenBankFilling,34" frugal:"34,default,string" json:"payAccountOpenBankFilling"`
	PayAccountOpenBank        string  `thrift:"payAccountOpenBank,35" frugal:"35,default,string" json:"payAccountOpenBank"`
	Title                     string  `thrift:"title,36" frugal:"36,default,string" json:"title"`
	PayAccountType            string  `thrift:"payAccountType,37" frugal:"37,default,string" json:"payAccountType"`
	ElectronicReceiptFile     string  `thrift:"ElectronicReceiptFile,38" frugal:"38,default,string" json:"ElectronicReceiptFile"`
}

func NewBankTransferReceiptData() *BankTransferReceiptData {
	return &BankTransferReceiptData{}
}

func (p *BankTransferReceiptData) InitDefault() {
	*p = BankTransferReceiptData{}
}

func (p *BankTransferReceiptData) GetId() (v int64) {
	return p.Id
}

func (p *BankTransferReceiptData) GetCreatedAt() (v []byte) {
	return p.CreatedAt
}

func (p *BankTransferReceiptData) GetUpdatedAt() (v []byte) {
	return p.UpdatedAt
}

func (p *BankTransferReceiptData) GetOrganizationId() (v int64) {
	return p.OrganizationId
}

func (p *BankTransferReceiptData) GetProcessInstanceId() (v int64) {
	return p.ProcessInstanceId
}

func (p *BankTransferReceiptData) GetOriginatorUserName() (v string) {
	return p.OriginatorUserName
}

func (p *BankTransferReceiptData) GetSerialNo() (v string) {
	return p.SerialNo
}

func (p *BankTransferReceiptData) GetPayAccount() (v string) {
	return p.PayAccount
}

func (p *BankTransferReceiptData) GetPayAccountName() (v string) {
	return p.PayAccountName
}

func (p *BankTransferReceiptData) GetRecAccount() (v string) {
	return p.RecAccount
}

func (p *BankTransferReceiptData) GetRecAccountName() (v string) {
	return p.RecAccountName
}

func (p *BankTransferReceiptData) GetPayAmount() (v float64) {
	return p.PayAmount
}

func (p *BankTransferReceiptData) GetCurrencyType() (v string) {
	return p.CurrencyType
}

func (p *BankTransferReceiptData) GetPayRem() (v string) {
	return p.PayRem
}

func (p *BankTransferReceiptData) GetPubPriFlag() (v string) {
	return p.PubPriFlag
}

func (p *BankTransferReceiptData) GetRecBankType() (v string) {
	return p.RecBankType
}

func (p *BankTransferReceiptData) GetRecAccountOpenBank() (v string) {
	return p.RecAccountOpenBank
}

func (p *BankTransferReceiptData) GetUnionBankNo() (v string) {
	return p.UnionBankNo
}

func (p *BankTransferReceiptData) GetClearBankNo() (v string) {
	return p.ClearBankNo
}

func (p *BankTransferReceiptData) GetRmtType() (v string) {
	return p.RmtType
}

func (p *BankTransferReceiptData) GetTransferFlag() (v string) {
	return p.TransferFlag
}

func (p *BankTransferReceiptData) GetChargeFee() (v float64) {
	return p.ChargeFee
}

func (p *BankTransferReceiptData) GetOrderState() (v string) {
	return p.OrderState
}

func (p *BankTransferReceiptData) GetRetCode() (v string) {
	return p.RetCode
}

func (p *BankTransferReceiptData) GetRetMessage() (v string) {
	return p.RetMessage
}

func (p *BankTransferReceiptData) GetOrderFlowNo() (v string) {
	return p.OrderFlowNo
}

func (p *BankTransferReceiptData) GetProcessBusinessId() (v string) {
	return p.ProcessBusinessId
}

func (p *BankTransferReceiptData) GetProcessComment() (v string) {
	return p.ProcessComment
}

func (p *BankTransferReceiptData) GetDetailHostFlowNo() (v string) {
	return p.DetailHostFlowNo
}

func (p *BankTransferReceiptData) GetCommentUserId() (v int64) {
	return p.CommentUserId
}

func (p *BankTransferReceiptData) GetCommentUserName() (v string) {
	return p.CommentUserName
}

func (p *BankTransferReceiptData) GetProcessStatus() (v string) {
	return p.ProcessStatus
}

func (p *BankTransferReceiptData) GetRecAccountOpenBankFilling() (v string) {
	return p.RecAccountOpenBankFilling
}

func (p *BankTransferReceiptData) GetPayAccountOpenBankFilling() (v string) {
	return p.PayAccountOpenBankFilling
}

func (p *BankTransferReceiptData) GetPayAccountOpenBank() (v string) {
	return p.PayAccountOpenBank
}

func (p *BankTransferReceiptData) GetTitle() (v string) {
	return p.Title
}

func (p *BankTransferReceiptData) GetPayAccountType() (v string) {
	return p.PayAccountType
}

func (p *BankTransferReceiptData) GetElectronicReceiptFile() (v string) {
	return p.ElectronicReceiptFile
}
func (p *BankTransferReceiptData) SetId(val int64) {
	p.Id = val
}
func (p *BankTransferReceiptData) SetCreatedAt(val []byte) {
	p.CreatedAt = val
}
func (p *BankTransferReceiptData) SetUpdatedAt(val []byte) {
	p.UpdatedAt = val
}
func (p *BankTransferReceiptData) SetOrganizationId(val int64) {
	p.OrganizationId = val
}
func (p *BankTransferReceiptData) SetProcessInstanceId(val int64) {
	p.ProcessInstanceId = val
}
func (p *BankTransferReceiptData) SetOriginatorUserName(val string) {
	p.OriginatorUserName = val
}
func (p *BankTransferReceiptData) SetSerialNo(val string) {
	p.SerialNo = val
}
func (p *BankTransferReceiptData) SetPayAccount(val string) {
	p.PayAccount = val
}
func (p *BankTransferReceiptData) SetPayAccountName(val string) {
	p.PayAccountName = val
}
func (p *BankTransferReceiptData) SetRecAccount(val string) {
	p.RecAccount = val
}
func (p *BankTransferReceiptData) SetRecAccountName(val string) {
	p.RecAccountName = val
}
func (p *BankTransferReceiptData) SetPayAmount(val float64) {
	p.PayAmount = val
}
func (p *BankTransferReceiptData) SetCurrencyType(val string) {
	p.CurrencyType = val
}
func (p *BankTransferReceiptData) SetPayRem(val string) {
	p.PayRem = val
}
func (p *BankTransferReceiptData) SetPubPriFlag(val string) {
	p.PubPriFlag = val
}
func (p *BankTransferReceiptData) SetRecBankType(val string) {
	p.RecBankType = val
}
func (p *BankTransferReceiptData) SetRecAccountOpenBank(val string) {
	p.RecAccountOpenBank = val
}
func (p *BankTransferReceiptData) SetUnionBankNo(val string) {
	p.UnionBankNo = val
}
func (p *BankTransferReceiptData) SetClearBankNo(val string) {
	p.ClearBankNo = val
}
func (p *BankTransferReceiptData) SetRmtType(val string) {
	p.RmtType = val
}
func (p *BankTransferReceiptData) SetTransferFlag(val string) {
	p.TransferFlag = val
}
func (p *BankTransferReceiptData) SetChargeFee(val float64) {
	p.ChargeFee = val
}
func (p *BankTransferReceiptData) SetOrderState(val string) {
	p.OrderState = val
}
func (p *BankTransferReceiptData) SetRetCode(val string) {
	p.RetCode = val
}
func (p *BankTransferReceiptData) SetRetMessage(val string) {
	p.RetMessage = val
}
func (p *BankTransferReceiptData) SetOrderFlowNo(val string) {
	p.OrderFlowNo = val
}
func (p *BankTransferReceiptData) SetProcessBusinessId(val string) {
	p.ProcessBusinessId = val
}
func (p *BankTransferReceiptData) SetProcessComment(val string) {
	p.ProcessComment = val
}
func (p *BankTransferReceiptData) SetDetailHostFlowNo(val string) {
	p.DetailHostFlowNo = val
}
func (p *BankTransferReceiptData) SetCommentUserId(val int64) {
	p.CommentUserId = val
}
func (p *BankTransferReceiptData) SetCommentUserName(val string) {
	p.CommentUserName = val
}
func (p *BankTransferReceiptData) SetProcessStatus(val string) {
	p.ProcessStatus = val
}
func (p *BankTransferReceiptData) SetRecAccountOpenBankFilling(val string) {
	p.RecAccountOpenBankFilling = val
}
func (p *BankTransferReceiptData) SetPayAccountOpenBankFilling(val string) {
	p.PayAccountOpenBankFilling = val
}
func (p *BankTransferReceiptData) SetPayAccountOpenBank(val string) {
	p.PayAccountOpenBank = val
}
func (p *BankTransferReceiptData) SetTitle(val string) {
	p.Title = val
}
func (p *BankTransferReceiptData) SetPayAccountType(val string) {
	p.PayAccountType = val
}
func (p *BankTransferReceiptData) SetElectronicReceiptFile(val string) {
	p.ElectronicReceiptFile = val
}

var fieldIDToName_BankTransferReceiptData = map[int16]string{
	1:  "id",
	2:  "createdAt",
	3:  "updatedAt",
	4:  "organizationId",
	5:  "processInstanceId",
	6:  "originatorUserName",
	7:  "serialNo",
	8:  "payAccount",
	9:  "payAccountName",
	10: "recAccount",
	11: "recAccountName",
	12: "payAmount",
	13: "currencyType",
	14: "payRem",
	15: "pubPriFlag",
	16: "recBankType",
	17: "recAccountOpenBank",
	18: "unionBankNo",
	19: "clearBankNo",
	20: "rmtType",
	21: "transferFlag",
	22: "chargeFee",
	23: "orderState",
	24: "retCode",
	25: "retMessage",
	26: "orderFlowNo",
	27: "processBusinessId",
	28: "processComment",
	29: "DetailHostFlowNo",
	30: "CommentUserId",
	31: "commentUserName",
	32: "processStatus",
	33: "recAccountOpenBankFilling",
	34: "payAccountOpenBankFilling",
	35: "payAccountOpenBank",
	36: "title",
	37: "payAccountType",
	38: "ElectronicReceiptFile",
}

func (p *BankTransferReceiptData) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 17:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 18:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 19:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 20:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 21:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 22:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 23:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField23(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 24:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField24(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 25:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField25(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 26:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField26(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 27:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField27(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 28:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField28(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 29:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField29(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 30:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField30(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 31:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField31(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 32:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField32(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 33:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField33(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 34:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField34(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 35:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField35(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 36:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField36(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 37:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField37(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 38:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField38(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankTransferReceiptData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankTransferReceiptData) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *BankTransferReceiptData) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		p.CreatedAt = []byte(v)
	}
	return nil
}

func (p *BankTransferReceiptData) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		p.UpdatedAt = []byte(v)
	}
	return nil
}

func (p *BankTransferReceiptData) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.OrganizationId = v
	}
	return nil
}

func (p *BankTransferReceiptData) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ProcessInstanceId = v
	}
	return nil
}

func (p *BankTransferReceiptData) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.OriginatorUserName = v
	}
	return nil
}

func (p *BankTransferReceiptData) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.SerialNo = v
	}
	return nil
}

func (p *BankTransferReceiptData) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PayAccount = v
	}
	return nil
}

func (p *BankTransferReceiptData) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PayAccountName = v
	}
	return nil
}

func (p *BankTransferReceiptData) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.RecAccount = v
	}
	return nil
}

func (p *BankTransferReceiptData) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.RecAccountName = v
	}
	return nil
}

func (p *BankTransferReceiptData) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		p.PayAmount = v
	}
	return nil
}

func (p *BankTransferReceiptData) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CurrencyType = v
	}
	return nil
}

func (p *BankTransferReceiptData) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PayRem = v
	}
	return nil
}

func (p *BankTransferReceiptData) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PubPriFlag = v
	}
	return nil
}

func (p *BankTransferReceiptData) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.RecBankType = v
	}
	return nil
}

func (p *BankTransferReceiptData) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.RecAccountOpenBank = v
	}
	return nil
}

func (p *BankTransferReceiptData) ReadField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UnionBankNo = v
	}
	return nil
}

func (p *BankTransferReceiptData) ReadField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClearBankNo = v
	}
	return nil
}

func (p *BankTransferReceiptData) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.RmtType = v
	}
	return nil
}

func (p *BankTransferReceiptData) ReadField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.TransferFlag = v
	}
	return nil
}

func (p *BankTransferReceiptData) ReadField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		p.ChargeFee = v
	}
	return nil
}

func (p *BankTransferReceiptData) ReadField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.OrderState = v
	}
	return nil
}

func (p *BankTransferReceiptData) ReadField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.RetCode = v
	}
	return nil
}

func (p *BankTransferReceiptData) ReadField25(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.RetMessage = v
	}
	return nil
}

func (p *BankTransferReceiptData) ReadField26(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.OrderFlowNo = v
	}
	return nil
}

func (p *BankTransferReceiptData) ReadField27(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ProcessBusinessId = v
	}
	return nil
}

func (p *BankTransferReceiptData) ReadField28(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ProcessComment = v
	}
	return nil
}

func (p *BankTransferReceiptData) ReadField29(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.DetailHostFlowNo = v
	}
	return nil
}

func (p *BankTransferReceiptData) ReadField30(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.CommentUserId = v
	}
	return nil
}

func (p *BankTransferReceiptData) ReadField31(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CommentUserName = v
	}
	return nil
}

func (p *BankTransferReceiptData) ReadField32(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ProcessStatus = v
	}
	return nil
}

func (p *BankTransferReceiptData) ReadField33(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.RecAccountOpenBankFilling = v
	}
	return nil
}

func (p *BankTransferReceiptData) ReadField34(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PayAccountOpenBankFilling = v
	}
	return nil
}

func (p *BankTransferReceiptData) ReadField35(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PayAccountOpenBank = v
	}
	return nil
}

func (p *BankTransferReceiptData) ReadField36(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Title = v
	}
	return nil
}

func (p *BankTransferReceiptData) ReadField37(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PayAccountType = v
	}
	return nil
}

func (p *BankTransferReceiptData) ReadField38(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ElectronicReceiptFile = v
	}
	return nil
}

func (p *BankTransferReceiptData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BankTransferReceiptData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField23(oprot); err != nil {
			fieldId = 23
			goto WriteFieldError
		}
		if err = p.writeField24(oprot); err != nil {
			fieldId = 24
			goto WriteFieldError
		}
		if err = p.writeField25(oprot); err != nil {
			fieldId = 25
			goto WriteFieldError
		}
		if err = p.writeField26(oprot); err != nil {
			fieldId = 26
			goto WriteFieldError
		}
		if err = p.writeField27(oprot); err != nil {
			fieldId = 27
			goto WriteFieldError
		}
		if err = p.writeField28(oprot); err != nil {
			fieldId = 28
			goto WriteFieldError
		}
		if err = p.writeField29(oprot); err != nil {
			fieldId = 29
			goto WriteFieldError
		}
		if err = p.writeField30(oprot); err != nil {
			fieldId = 30
			goto WriteFieldError
		}
		if err = p.writeField31(oprot); err != nil {
			fieldId = 31
			goto WriteFieldError
		}
		if err = p.writeField32(oprot); err != nil {
			fieldId = 32
			goto WriteFieldError
		}
		if err = p.writeField33(oprot); err != nil {
			fieldId = 33
			goto WriteFieldError
		}
		if err = p.writeField34(oprot); err != nil {
			fieldId = 34
			goto WriteFieldError
		}
		if err = p.writeField35(oprot); err != nil {
			fieldId = 35
			goto WriteFieldError
		}
		if err = p.writeField36(oprot); err != nil {
			fieldId = 36
			goto WriteFieldError
		}
		if err = p.writeField37(oprot); err != nil {
			fieldId = 37
			goto WriteFieldError
		}
		if err = p.writeField38(oprot); err != nil {
			fieldId = 38
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankTransferReceiptData) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankTransferReceiptData) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("createdAt", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.CreatedAt)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BankTransferReceiptData) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updatedAt", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.UpdatedAt)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *BankTransferReceiptData) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("organizationId", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.OrganizationId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *BankTransferReceiptData) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("processInstanceId", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ProcessInstanceId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *BankTransferReceiptData) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("originatorUserName", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OriginatorUserName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *BankTransferReceiptData) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("serialNo", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.SerialNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *BankTransferReceiptData) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("payAccount", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PayAccount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *BankTransferReceiptData) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("payAccountName", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PayAccountName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *BankTransferReceiptData) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("recAccount", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.RecAccount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *BankTransferReceiptData) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("recAccountName", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.RecAccountName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *BankTransferReceiptData) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("payAmount", thrift.DOUBLE, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.PayAmount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *BankTransferReceiptData) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("currencyType", thrift.STRING, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CurrencyType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *BankTransferReceiptData) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("payRem", thrift.STRING, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PayRem); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *BankTransferReceiptData) writeField15(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pubPriFlag", thrift.STRING, 15); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PubPriFlag); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *BankTransferReceiptData) writeField16(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("recBankType", thrift.STRING, 16); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.RecBankType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *BankTransferReceiptData) writeField17(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("recAccountOpenBank", thrift.STRING, 17); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.RecAccountOpenBank); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *BankTransferReceiptData) writeField18(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("unionBankNo", thrift.STRING, 18); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UnionBankNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *BankTransferReceiptData) writeField19(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("clearBankNo", thrift.STRING, 19); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClearBankNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *BankTransferReceiptData) writeField20(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("rmtType", thrift.STRING, 20); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.RmtType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *BankTransferReceiptData) writeField21(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("transferFlag", thrift.STRING, 21); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TransferFlag); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *BankTransferReceiptData) writeField22(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("chargeFee", thrift.DOUBLE, 22); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.ChargeFee); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *BankTransferReceiptData) writeField23(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("orderState", thrift.STRING, 23); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OrderState); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 end error: ", p), err)
}

func (p *BankTransferReceiptData) writeField24(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("retCode", thrift.STRING, 24); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.RetCode); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 end error: ", p), err)
}

func (p *BankTransferReceiptData) writeField25(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("retMessage", thrift.STRING, 25); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.RetMessage); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 end error: ", p), err)
}

func (p *BankTransferReceiptData) writeField26(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("orderFlowNo", thrift.STRING, 26); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OrderFlowNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 end error: ", p), err)
}

func (p *BankTransferReceiptData) writeField27(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("processBusinessId", thrift.STRING, 27); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ProcessBusinessId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 end error: ", p), err)
}

func (p *BankTransferReceiptData) writeField28(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("processComment", thrift.STRING, 28); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ProcessComment); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 end error: ", p), err)
}

func (p *BankTransferReceiptData) writeField29(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("DetailHostFlowNo", thrift.STRING, 29); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.DetailHostFlowNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 29 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 29 end error: ", p), err)
}

func (p *BankTransferReceiptData) writeField30(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CommentUserId", thrift.I64, 30); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.CommentUserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 30 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 30 end error: ", p), err)
}

func (p *BankTransferReceiptData) writeField31(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("commentUserName", thrift.STRING, 31); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CommentUserName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 end error: ", p), err)
}

func (p *BankTransferReceiptData) writeField32(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("processStatus", thrift.STRING, 32); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ProcessStatus); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 32 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 32 end error: ", p), err)
}

func (p *BankTransferReceiptData) writeField33(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("recAccountOpenBankFilling", thrift.STRING, 33); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.RecAccountOpenBankFilling); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 33 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 33 end error: ", p), err)
}

func (p *BankTransferReceiptData) writeField34(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("payAccountOpenBankFilling", thrift.STRING, 34); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PayAccountOpenBankFilling); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 34 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 34 end error: ", p), err)
}

func (p *BankTransferReceiptData) writeField35(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("payAccountOpenBank", thrift.STRING, 35); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PayAccountOpenBank); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 35 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 35 end error: ", p), err)
}

func (p *BankTransferReceiptData) writeField36(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("title", thrift.STRING, 36); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Title); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 36 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 36 end error: ", p), err)
}

func (p *BankTransferReceiptData) writeField37(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("payAccountType", thrift.STRING, 37); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PayAccountType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 37 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 37 end error: ", p), err)
}

func (p *BankTransferReceiptData) writeField38(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ElectronicReceiptFile", thrift.STRING, 38); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ElectronicReceiptFile); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 38 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 38 end error: ", p), err)
}

func (p *BankTransferReceiptData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankTransferReceiptData(%+v)", *p)
}

func (p *BankTransferReceiptData) DeepEqual(ano *BankTransferReceiptData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field3DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field4DeepEqual(ano.OrganizationId) {
		return false
	}
	if !p.Field5DeepEqual(ano.ProcessInstanceId) {
		return false
	}
	if !p.Field6DeepEqual(ano.OriginatorUserName) {
		return false
	}
	if !p.Field7DeepEqual(ano.SerialNo) {
		return false
	}
	if !p.Field8DeepEqual(ano.PayAccount) {
		return false
	}
	if !p.Field9DeepEqual(ano.PayAccountName) {
		return false
	}
	if !p.Field10DeepEqual(ano.RecAccount) {
		return false
	}
	if !p.Field11DeepEqual(ano.RecAccountName) {
		return false
	}
	if !p.Field12DeepEqual(ano.PayAmount) {
		return false
	}
	if !p.Field13DeepEqual(ano.CurrencyType) {
		return false
	}
	if !p.Field14DeepEqual(ano.PayRem) {
		return false
	}
	if !p.Field15DeepEqual(ano.PubPriFlag) {
		return false
	}
	if !p.Field16DeepEqual(ano.RecBankType) {
		return false
	}
	if !p.Field17DeepEqual(ano.RecAccountOpenBank) {
		return false
	}
	if !p.Field18DeepEqual(ano.UnionBankNo) {
		return false
	}
	if !p.Field19DeepEqual(ano.ClearBankNo) {
		return false
	}
	if !p.Field20DeepEqual(ano.RmtType) {
		return false
	}
	if !p.Field21DeepEqual(ano.TransferFlag) {
		return false
	}
	if !p.Field22DeepEqual(ano.ChargeFee) {
		return false
	}
	if !p.Field23DeepEqual(ano.OrderState) {
		return false
	}
	if !p.Field24DeepEqual(ano.RetCode) {
		return false
	}
	if !p.Field25DeepEqual(ano.RetMessage) {
		return false
	}
	if !p.Field26DeepEqual(ano.OrderFlowNo) {
		return false
	}
	if !p.Field27DeepEqual(ano.ProcessBusinessId) {
		return false
	}
	if !p.Field28DeepEqual(ano.ProcessComment) {
		return false
	}
	if !p.Field29DeepEqual(ano.DetailHostFlowNo) {
		return false
	}
	if !p.Field30DeepEqual(ano.CommentUserId) {
		return false
	}
	if !p.Field31DeepEqual(ano.CommentUserName) {
		return false
	}
	if !p.Field32DeepEqual(ano.ProcessStatus) {
		return false
	}
	if !p.Field33DeepEqual(ano.RecAccountOpenBankFilling) {
		return false
	}
	if !p.Field34DeepEqual(ano.PayAccountOpenBankFilling) {
		return false
	}
	if !p.Field35DeepEqual(ano.PayAccountOpenBank) {
		return false
	}
	if !p.Field36DeepEqual(ano.Title) {
		return false
	}
	if !p.Field37DeepEqual(ano.PayAccountType) {
		return false
	}
	if !p.Field38DeepEqual(ano.ElectronicReceiptFile) {
		return false
	}
	return true
}

func (p *BankTransferReceiptData) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *BankTransferReceiptData) Field2DeepEqual(src []byte) bool {

	if bytes.Compare(p.CreatedAt, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransferReceiptData) Field3DeepEqual(src []byte) bool {

	if bytes.Compare(p.UpdatedAt, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransferReceiptData) Field4DeepEqual(src int64) bool {

	if p.OrganizationId != src {
		return false
	}
	return true
}
func (p *BankTransferReceiptData) Field5DeepEqual(src int64) bool {

	if p.ProcessInstanceId != src {
		return false
	}
	return true
}
func (p *BankTransferReceiptData) Field6DeepEqual(src string) bool {

	if strings.Compare(p.OriginatorUserName, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransferReceiptData) Field7DeepEqual(src string) bool {

	if strings.Compare(p.SerialNo, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransferReceiptData) Field8DeepEqual(src string) bool {

	if strings.Compare(p.PayAccount, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransferReceiptData) Field9DeepEqual(src string) bool {

	if strings.Compare(p.PayAccountName, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransferReceiptData) Field10DeepEqual(src string) bool {

	if strings.Compare(p.RecAccount, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransferReceiptData) Field11DeepEqual(src string) bool {

	if strings.Compare(p.RecAccountName, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransferReceiptData) Field12DeepEqual(src float64) bool {

	if p.PayAmount != src {
		return false
	}
	return true
}
func (p *BankTransferReceiptData) Field13DeepEqual(src string) bool {

	if strings.Compare(p.CurrencyType, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransferReceiptData) Field14DeepEqual(src string) bool {

	if strings.Compare(p.PayRem, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransferReceiptData) Field15DeepEqual(src string) bool {

	if strings.Compare(p.PubPriFlag, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransferReceiptData) Field16DeepEqual(src string) bool {

	if strings.Compare(p.RecBankType, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransferReceiptData) Field17DeepEqual(src string) bool {

	if strings.Compare(p.RecAccountOpenBank, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransferReceiptData) Field18DeepEqual(src string) bool {

	if strings.Compare(p.UnionBankNo, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransferReceiptData) Field19DeepEqual(src string) bool {

	if strings.Compare(p.ClearBankNo, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransferReceiptData) Field20DeepEqual(src string) bool {

	if strings.Compare(p.RmtType, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransferReceiptData) Field21DeepEqual(src string) bool {

	if strings.Compare(p.TransferFlag, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransferReceiptData) Field22DeepEqual(src float64) bool {

	if p.ChargeFee != src {
		return false
	}
	return true
}
func (p *BankTransferReceiptData) Field23DeepEqual(src string) bool {

	if strings.Compare(p.OrderState, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransferReceiptData) Field24DeepEqual(src string) bool {

	if strings.Compare(p.RetCode, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransferReceiptData) Field25DeepEqual(src string) bool {

	if strings.Compare(p.RetMessage, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransferReceiptData) Field26DeepEqual(src string) bool {

	if strings.Compare(p.OrderFlowNo, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransferReceiptData) Field27DeepEqual(src string) bool {

	if strings.Compare(p.ProcessBusinessId, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransferReceiptData) Field28DeepEqual(src string) bool {

	if strings.Compare(p.ProcessComment, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransferReceiptData) Field29DeepEqual(src string) bool {

	if strings.Compare(p.DetailHostFlowNo, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransferReceiptData) Field30DeepEqual(src int64) bool {

	if p.CommentUserId != src {
		return false
	}
	return true
}
func (p *BankTransferReceiptData) Field31DeepEqual(src string) bool {

	if strings.Compare(p.CommentUserName, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransferReceiptData) Field32DeepEqual(src string) bool {

	if strings.Compare(p.ProcessStatus, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransferReceiptData) Field33DeepEqual(src string) bool {

	if strings.Compare(p.RecAccountOpenBankFilling, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransferReceiptData) Field34DeepEqual(src string) bool {

	if strings.Compare(p.PayAccountOpenBankFilling, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransferReceiptData) Field35DeepEqual(src string) bool {

	if strings.Compare(p.PayAccountOpenBank, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransferReceiptData) Field36DeepEqual(src string) bool {

	if strings.Compare(p.Title, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransferReceiptData) Field37DeepEqual(src string) bool {

	if strings.Compare(p.PayAccountType, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransferReceiptData) Field38DeepEqual(src string) bool {

	if strings.Compare(p.ElectronicReceiptFile, src) != 0 {
		return false
	}
	return true
}

type ListBankTransferReceiptRequest struct {
	PageNum            int32     `thrift:"pageNum,1,required" frugal:"1,required,i32" json:"pageNum"`
	PageSize           int32     `thrift:"pageSize,2,required" frugal:"2,required,i32" json:"pageSize"`
	Sort               string    `thrift:"sort,3" frugal:"3,default,string" json:"sort"`
	ProcessInstanceIds []int64   `thrift:"processInstanceIds,4" frugal:"4,default,list<i64>" json:"processInstanceIds"`
	BusinessId         string    `thrift:"businessId,5" frugal:"5,default,string" json:"businessId"`
	SerialNo           string    `thrift:"serialNo,6" frugal:"6,default,string" json:"serialNo"`
	PayAccount         string    `thrift:"payAccount,7" frugal:"7,default,string" json:"payAccount"`
	RecAccount         string    `thrift:"recAccount,8" frugal:"8,default,string" json:"recAccount"`
	OriginatorUser     string    `thrift:"originatorUser,9" frugal:"9,default,string" json:"originatorUser"`
	PayAmount          []float64 `thrift:"payAmount,10" frugal:"10,default,list<double>" json:"payAmount"`
	CreateTimeArray    []string  `thrift:"createTimeArray,11" frugal:"11,default,list<string>" json:"createTimeArray"`
	CommentUser        string    `thrift:"commentUser,13" frugal:"13,default,string" json:"commentUser"`
	TotalStatus        string    `thrift:"totalStatus,14" frugal:"14,default,string" json:"totalStatus"`
	OrderState         string    `thrift:"orderState,15" frugal:"15,default,string" json:"orderState"`
	PayAmountMin       float64   `thrift:"payAmountMin,16" frugal:"16,default,double" json:"payAmountMin"`
	PayAmountMax       float64   `thrift:"payAmountMax,17" frugal:"17,default,double" json:"payAmountMax"`
	Title              string    `thrift:"title,18" frugal:"18,default,string" json:"title"`
}

func NewListBankTransferReceiptRequest() *ListBankTransferReceiptRequest {
	return &ListBankTransferReceiptRequest{}
}

func (p *ListBankTransferReceiptRequest) InitDefault() {
	*p = ListBankTransferReceiptRequest{}
}

func (p *ListBankTransferReceiptRequest) GetPageNum() (v int32) {
	return p.PageNum
}

func (p *ListBankTransferReceiptRequest) GetPageSize() (v int32) {
	return p.PageSize
}

func (p *ListBankTransferReceiptRequest) GetSort() (v string) {
	return p.Sort
}

func (p *ListBankTransferReceiptRequest) GetProcessInstanceIds() (v []int64) {
	return p.ProcessInstanceIds
}

func (p *ListBankTransferReceiptRequest) GetBusinessId() (v string) {
	return p.BusinessId
}

func (p *ListBankTransferReceiptRequest) GetSerialNo() (v string) {
	return p.SerialNo
}

func (p *ListBankTransferReceiptRequest) GetPayAccount() (v string) {
	return p.PayAccount
}

func (p *ListBankTransferReceiptRequest) GetRecAccount() (v string) {
	return p.RecAccount
}

func (p *ListBankTransferReceiptRequest) GetOriginatorUser() (v string) {
	return p.OriginatorUser
}

func (p *ListBankTransferReceiptRequest) GetPayAmount() (v []float64) {
	return p.PayAmount
}

func (p *ListBankTransferReceiptRequest) GetCreateTimeArray() (v []string) {
	return p.CreateTimeArray
}

func (p *ListBankTransferReceiptRequest) GetCommentUser() (v string) {
	return p.CommentUser
}

func (p *ListBankTransferReceiptRequest) GetTotalStatus() (v string) {
	return p.TotalStatus
}

func (p *ListBankTransferReceiptRequest) GetOrderState() (v string) {
	return p.OrderState
}

func (p *ListBankTransferReceiptRequest) GetPayAmountMin() (v float64) {
	return p.PayAmountMin
}

func (p *ListBankTransferReceiptRequest) GetPayAmountMax() (v float64) {
	return p.PayAmountMax
}

func (p *ListBankTransferReceiptRequest) GetTitle() (v string) {
	return p.Title
}
func (p *ListBankTransferReceiptRequest) SetPageNum(val int32) {
	p.PageNum = val
}
func (p *ListBankTransferReceiptRequest) SetPageSize(val int32) {
	p.PageSize = val
}
func (p *ListBankTransferReceiptRequest) SetSort(val string) {
	p.Sort = val
}
func (p *ListBankTransferReceiptRequest) SetProcessInstanceIds(val []int64) {
	p.ProcessInstanceIds = val
}
func (p *ListBankTransferReceiptRequest) SetBusinessId(val string) {
	p.BusinessId = val
}
func (p *ListBankTransferReceiptRequest) SetSerialNo(val string) {
	p.SerialNo = val
}
func (p *ListBankTransferReceiptRequest) SetPayAccount(val string) {
	p.PayAccount = val
}
func (p *ListBankTransferReceiptRequest) SetRecAccount(val string) {
	p.RecAccount = val
}
func (p *ListBankTransferReceiptRequest) SetOriginatorUser(val string) {
	p.OriginatorUser = val
}
func (p *ListBankTransferReceiptRequest) SetPayAmount(val []float64) {
	p.PayAmount = val
}
func (p *ListBankTransferReceiptRequest) SetCreateTimeArray(val []string) {
	p.CreateTimeArray = val
}
func (p *ListBankTransferReceiptRequest) SetCommentUser(val string) {
	p.CommentUser = val
}
func (p *ListBankTransferReceiptRequest) SetTotalStatus(val string) {
	p.TotalStatus = val
}
func (p *ListBankTransferReceiptRequest) SetOrderState(val string) {
	p.OrderState = val
}
func (p *ListBankTransferReceiptRequest) SetPayAmountMin(val float64) {
	p.PayAmountMin = val
}
func (p *ListBankTransferReceiptRequest) SetPayAmountMax(val float64) {
	p.PayAmountMax = val
}
func (p *ListBankTransferReceiptRequest) SetTitle(val string) {
	p.Title = val
}

var fieldIDToName_ListBankTransferReceiptRequest = map[int16]string{
	1:  "pageNum",
	2:  "pageSize",
	3:  "sort",
	4:  "processInstanceIds",
	5:  "businessId",
	6:  "serialNo",
	7:  "payAccount",
	8:  "recAccount",
	9:  "originatorUser",
	10: "payAmount",
	11: "createTimeArray",
	13: "commentUser",
	14: "totalStatus",
	15: "orderState",
	16: "payAmountMin",
	17: "payAmountMax",
	18: "title",
}

func (p *ListBankTransferReceiptRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPageNum bool = false
	var issetPageSize bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPageNum = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetPageSize = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 16:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 17:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 18:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPageNum {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPageSize {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListBankTransferReceiptRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListBankTransferReceiptRequest[fieldId]))
}

func (p *ListBankTransferReceiptRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.PageNum = v
	}
	return nil
}

func (p *ListBankTransferReceiptRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.PageSize = v
	}
	return nil
}

func (p *ListBankTransferReceiptRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Sort = v
	}
	return nil
}

func (p *ListBankTransferReceiptRequest) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.ProcessInstanceIds = make([]int64, 0, size)
	for i := 0; i < size; i++ {
		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.ProcessInstanceIds = append(p.ProcessInstanceIds, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListBankTransferReceiptRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.BusinessId = v
	}
	return nil
}

func (p *ListBankTransferReceiptRequest) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.SerialNo = v
	}
	return nil
}

func (p *ListBankTransferReceiptRequest) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PayAccount = v
	}
	return nil
}

func (p *ListBankTransferReceiptRequest) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.RecAccount = v
	}
	return nil
}

func (p *ListBankTransferReceiptRequest) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.OriginatorUser = v
	}
	return nil
}

func (p *ListBankTransferReceiptRequest) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.PayAmount = make([]float64, 0, size)
	for i := 0; i < size; i++ {
		var _elem float64
		if v, err := iprot.ReadDouble(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.PayAmount = append(p.PayAmount, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListBankTransferReceiptRequest) ReadField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.CreateTimeArray = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.CreateTimeArray = append(p.CreateTimeArray, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListBankTransferReceiptRequest) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CommentUser = v
	}
	return nil
}

func (p *ListBankTransferReceiptRequest) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.TotalStatus = v
	}
	return nil
}

func (p *ListBankTransferReceiptRequest) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.OrderState = v
	}
	return nil
}

func (p *ListBankTransferReceiptRequest) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		p.PayAmountMin = v
	}
	return nil
}

func (p *ListBankTransferReceiptRequest) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		p.PayAmountMax = v
	}
	return nil
}

func (p *ListBankTransferReceiptRequest) ReadField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Title = v
	}
	return nil
}

func (p *ListBankTransferReceiptRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListBankTransferReceiptRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListBankTransferReceiptRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pageNum", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.PageNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListBankTransferReceiptRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pageSize", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.PageSize); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListBankTransferReceiptRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("sort", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Sort); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ListBankTransferReceiptRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("processInstanceIds", thrift.LIST, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.ProcessInstanceIds)); err != nil {
		return err
	}
	for _, v := range p.ProcessInstanceIds {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ListBankTransferReceiptRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("businessId", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.BusinessId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ListBankTransferReceiptRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("serialNo", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.SerialNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ListBankTransferReceiptRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("payAccount", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PayAccount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ListBankTransferReceiptRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("recAccount", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.RecAccount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ListBankTransferReceiptRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("originatorUser", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OriginatorUser); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ListBankTransferReceiptRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("payAmount", thrift.LIST, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.DOUBLE, len(p.PayAmount)); err != nil {
		return err
	}
	for _, v := range p.PayAmount {
		if err := oprot.WriteDouble(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ListBankTransferReceiptRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("createTimeArray", thrift.LIST, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.CreateTimeArray)); err != nil {
		return err
	}
	for _, v := range p.CreateTimeArray {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *ListBankTransferReceiptRequest) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("commentUser", thrift.STRING, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CommentUser); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *ListBankTransferReceiptRequest) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("totalStatus", thrift.STRING, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TotalStatus); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *ListBankTransferReceiptRequest) writeField15(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("orderState", thrift.STRING, 15); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OrderState); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *ListBankTransferReceiptRequest) writeField16(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("payAmountMin", thrift.DOUBLE, 16); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.PayAmountMin); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *ListBankTransferReceiptRequest) writeField17(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("payAmountMax", thrift.DOUBLE, 17); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.PayAmountMax); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *ListBankTransferReceiptRequest) writeField18(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("title", thrift.STRING, 18); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Title); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *ListBankTransferReceiptRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListBankTransferReceiptRequest(%+v)", *p)
}

func (p *ListBankTransferReceiptRequest) DeepEqual(ano *ListBankTransferReceiptRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PageNum) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field3DeepEqual(ano.Sort) {
		return false
	}
	if !p.Field4DeepEqual(ano.ProcessInstanceIds) {
		return false
	}
	if !p.Field5DeepEqual(ano.BusinessId) {
		return false
	}
	if !p.Field6DeepEqual(ano.SerialNo) {
		return false
	}
	if !p.Field7DeepEqual(ano.PayAccount) {
		return false
	}
	if !p.Field8DeepEqual(ano.RecAccount) {
		return false
	}
	if !p.Field9DeepEqual(ano.OriginatorUser) {
		return false
	}
	if !p.Field10DeepEqual(ano.PayAmount) {
		return false
	}
	if !p.Field11DeepEqual(ano.CreateTimeArray) {
		return false
	}
	if !p.Field13DeepEqual(ano.CommentUser) {
		return false
	}
	if !p.Field14DeepEqual(ano.TotalStatus) {
		return false
	}
	if !p.Field15DeepEqual(ano.OrderState) {
		return false
	}
	if !p.Field16DeepEqual(ano.PayAmountMin) {
		return false
	}
	if !p.Field17DeepEqual(ano.PayAmountMax) {
		return false
	}
	if !p.Field18DeepEqual(ano.Title) {
		return false
	}
	return true
}

func (p *ListBankTransferReceiptRequest) Field1DeepEqual(src int32) bool {

	if p.PageNum != src {
		return false
	}
	return true
}
func (p *ListBankTransferReceiptRequest) Field2DeepEqual(src int32) bool {

	if p.PageSize != src {
		return false
	}
	return true
}
func (p *ListBankTransferReceiptRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Sort, src) != 0 {
		return false
	}
	return true
}
func (p *ListBankTransferReceiptRequest) Field4DeepEqual(src []int64) bool {

	if len(p.ProcessInstanceIds) != len(src) {
		return false
	}
	for i, v := range p.ProcessInstanceIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *ListBankTransferReceiptRequest) Field5DeepEqual(src string) bool {

	if strings.Compare(p.BusinessId, src) != 0 {
		return false
	}
	return true
}
func (p *ListBankTransferReceiptRequest) Field6DeepEqual(src string) bool {

	if strings.Compare(p.SerialNo, src) != 0 {
		return false
	}
	return true
}
func (p *ListBankTransferReceiptRequest) Field7DeepEqual(src string) bool {

	if strings.Compare(p.PayAccount, src) != 0 {
		return false
	}
	return true
}
func (p *ListBankTransferReceiptRequest) Field8DeepEqual(src string) bool {

	if strings.Compare(p.RecAccount, src) != 0 {
		return false
	}
	return true
}
func (p *ListBankTransferReceiptRequest) Field9DeepEqual(src string) bool {

	if strings.Compare(p.OriginatorUser, src) != 0 {
		return false
	}
	return true
}
func (p *ListBankTransferReceiptRequest) Field10DeepEqual(src []float64) bool {

	if len(p.PayAmount) != len(src) {
		return false
	}
	for i, v := range p.PayAmount {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *ListBankTransferReceiptRequest) Field11DeepEqual(src []string) bool {

	if len(p.CreateTimeArray) != len(src) {
		return false
	}
	for i, v := range p.CreateTimeArray {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ListBankTransferReceiptRequest) Field13DeepEqual(src string) bool {

	if strings.Compare(p.CommentUser, src) != 0 {
		return false
	}
	return true
}
func (p *ListBankTransferReceiptRequest) Field14DeepEqual(src string) bool {

	if strings.Compare(p.TotalStatus, src) != 0 {
		return false
	}
	return true
}
func (p *ListBankTransferReceiptRequest) Field15DeepEqual(src string) bool {

	if strings.Compare(p.OrderState, src) != 0 {
		return false
	}
	return true
}
func (p *ListBankTransferReceiptRequest) Field16DeepEqual(src float64) bool {

	if p.PayAmountMin != src {
		return false
	}
	return true
}
func (p *ListBankTransferReceiptRequest) Field17DeepEqual(src float64) bool {

	if p.PayAmountMax != src {
		return false
	}
	return true
}
func (p *ListBankTransferReceiptRequest) Field18DeepEqual(src string) bool {

	if strings.Compare(p.Title, src) != 0 {
		return false
	}
	return true
}

type ListBankTransferReceiptResponse struct {
	Data  []*BankTransferReceiptData `thrift:"data,1" frugal:"1,default,list<BankTransferReceiptData>" json:"data"`
	Count int64                      `thrift:"count,2" frugal:"2,default,i64" json:"count"`
}

func NewListBankTransferReceiptResponse() *ListBankTransferReceiptResponse {
	return &ListBankTransferReceiptResponse{}
}

func (p *ListBankTransferReceiptResponse) InitDefault() {
	*p = ListBankTransferReceiptResponse{}
}

func (p *ListBankTransferReceiptResponse) GetData() (v []*BankTransferReceiptData) {
	return p.Data
}

func (p *ListBankTransferReceiptResponse) GetCount() (v int64) {
	return p.Count
}
func (p *ListBankTransferReceiptResponse) SetData(val []*BankTransferReceiptData) {
	p.Data = val
}
func (p *ListBankTransferReceiptResponse) SetCount(val int64) {
	p.Count = val
}

var fieldIDToName_ListBankTransferReceiptResponse = map[int16]string{
	1: "data",
	2: "count",
}

func (p *ListBankTransferReceiptResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListBankTransferReceiptResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListBankTransferReceiptResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Data = make([]*BankTransferReceiptData, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewBankTransferReceiptData()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Data = append(p.Data, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListBankTransferReceiptResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Count = v
	}
	return nil
}

func (p *ListBankTransferReceiptResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListBankTransferReceiptResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListBankTransferReceiptResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Data)); err != nil {
		return err
	}
	for _, v := range p.Data {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListBankTransferReceiptResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("count", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Count); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListBankTransferReceiptResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListBankTransferReceiptResponse(%+v)", *p)
}

func (p *ListBankTransferReceiptResponse) DeepEqual(ano *ListBankTransferReceiptResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Data) {
		return false
	}
	if !p.Field2DeepEqual(ano.Count) {
		return false
	}
	return true
}

func (p *ListBankTransferReceiptResponse) Field1DeepEqual(src []*BankTransferReceiptData) bool {

	if len(p.Data) != len(src) {
		return false
	}
	for i, v := range p.Data {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListBankTransferReceiptResponse) Field2DeepEqual(src int64) bool {

	if p.Count != src {
		return false
	}
	return true
}

type BankTransactionDetailData struct {
	Id                      int64   `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	CreatedAt               []byte  `thrift:"createdAt,2" frugal:"2,default,binary" json:"createdAt"`
	UpdatedAt               []byte  `thrift:"updatedAt,3" frugal:"3,default,binary" json:"updatedAt"`
	OrganizationId          int64   `thrift:"organizationId,4" frugal:"4,default,i64" json:"organizationId"`
	MerchantAccountId       int64   `thrift:"merchantAccountId,5" frugal:"5,default,i64" json:"merchantAccountId"`
	MerchantAccount         string  `thrift:"merchantAccount,6" frugal:"6,default,string" json:"merchantAccount"`
	MerchantAccountName     string  `thrift:"merchantAccountName,7" frugal:"7,default,string" json:"merchantAccountName"`
	Type                    string  `thrift:"type,8" frugal:"8,default,string" json:"type"`
	CashFlag                string  `thrift:"cashFlag,9" frugal:"9,default,string" json:"cashFlag"`
	PayAmount               float64 `thrift:"payAmount,10" frugal:"10,default,double" json:"payAmount"`
	RecAmount               float64 `thrift:"recAmount,11" frugal:"11,default,double" json:"recAmount"`
	BsnType                 string  `thrift:"bsnType,12" frugal:"12,default,string" json:"bsnType"`
	TransferDate            string  `thrift:"transferDate,13" frugal:"13,default,string" json:"transferDate"`
	TransferTime            string  `thrift:"transferTime,14" frugal:"14,default,string" json:"transferTime"`
	TranChannel             string  `thrift:"tranChannel,15" frugal:"15,default,string" json:"tranChannel"`
	CurrencyType            string  `thrift:"currencyType,16" frugal:"16,default,string" json:"currencyType"`
	Balance                 float64 `thrift:"balance,17" frugal:"17,default,double" json:"balance"`
	OrderFlowNo             string  `thrift:"orderFlowNo,18" frugal:"18,default,string" json:"orderFlowNo"`
	HostFlowNo              string  `thrift:"hostFlowNo,19" frugal:"19,default,string" json:"hostFlowNo"`
	VouchersType            string  `thrift:"vouchersType,20" frugal:"20,default,string" json:"vouchersType"`
	VouchersNo              string  `thrift:"vouchersNo,21" frugal:"21,default,string" json:"vouchersNo"`
	SummaryNo               string  `thrift:"summaryNo,22" frugal:"22,default,string" json:"summaryNo"`
	Summary                 string  `thrift:"summary,23" frugal:"23,default,string" json:"summary"`
	AcctNo                  string  `thrift:"acctNo,24" frugal:"24,default,string" json:"acctNo"`
	AccountName             string  `thrift:"accountName,25" frugal:"25,default,string" json:"accountName"`
	AccountOpenNode         string  `thrift:"accountOpenNode,26" frugal:"26,default,string" json:"accountOpenNode"`
	ElectronicReceiptFile   string  `thrift:"electronicReceiptFile,27" frugal:"27,default,string" json:"electronicReceiptFile"`
	ProcessBusinessId       string  `thrift:"processBusinessId,28" frugal:"28,default,string" json:"processBusinessId"`
	ProcessTotalStatus      string  `thrift:"processTotalStatus,29" frugal:"29,default,string" json:"processTotalStatus"`
	OriginatorUser          string  `thrift:"originatorUser,30" frugal:"30,default,string" json:"originatorUser"`
	OperationUser           string  `thrift:"operationUser,31" frugal:"31,default,string" json:"operationUser"`
	OperationComment        string  `thrift:"operationComment,32" frugal:"32,default,string" json:"operationComment"`
	ProcessInstanceId       int64   `thrift:"processInstanceId,33" frugal:"33,default,i64" json:"processInstanceId"`
	PayAccountType          string  `thrift:"payAccountType,34" frugal:"34,default,string" json:"payAccountType"`
	ExtField2               string  `thrift:"extField2,35" frugal:"35,default,string" json:"extField2"`
	ExtField3               string  `thrift:"extField3,36" frugal:"36,default,string" json:"extField3"`
	MerchantAccountOpenName string  `thrift:"merchantAccountOpenName,37" frugal:"37,default,string" json:"merchantAccountOpenName"`
}

func NewBankTransactionDetailData() *BankTransactionDetailData {
	return &BankTransactionDetailData{}
}

func (p *BankTransactionDetailData) InitDefault() {
	*p = BankTransactionDetailData{}
}

func (p *BankTransactionDetailData) GetId() (v int64) {
	return p.Id
}

func (p *BankTransactionDetailData) GetCreatedAt() (v []byte) {
	return p.CreatedAt
}

func (p *BankTransactionDetailData) GetUpdatedAt() (v []byte) {
	return p.UpdatedAt
}

func (p *BankTransactionDetailData) GetOrganizationId() (v int64) {
	return p.OrganizationId
}

func (p *BankTransactionDetailData) GetMerchantAccountId() (v int64) {
	return p.MerchantAccountId
}

func (p *BankTransactionDetailData) GetMerchantAccount() (v string) {
	return p.MerchantAccount
}

func (p *BankTransactionDetailData) GetMerchantAccountName() (v string) {
	return p.MerchantAccountName
}

func (p *BankTransactionDetailData) GetType() (v string) {
	return p.Type
}

func (p *BankTransactionDetailData) GetCashFlag() (v string) {
	return p.CashFlag
}

func (p *BankTransactionDetailData) GetPayAmount() (v float64) {
	return p.PayAmount
}

func (p *BankTransactionDetailData) GetRecAmount() (v float64) {
	return p.RecAmount
}

func (p *BankTransactionDetailData) GetBsnType() (v string) {
	return p.BsnType
}

func (p *BankTransactionDetailData) GetTransferDate() (v string) {
	return p.TransferDate
}

func (p *BankTransactionDetailData) GetTransferTime() (v string) {
	return p.TransferTime
}

func (p *BankTransactionDetailData) GetTranChannel() (v string) {
	return p.TranChannel
}

func (p *BankTransactionDetailData) GetCurrencyType() (v string) {
	return p.CurrencyType
}

func (p *BankTransactionDetailData) GetBalance() (v float64) {
	return p.Balance
}

func (p *BankTransactionDetailData) GetOrderFlowNo() (v string) {
	return p.OrderFlowNo
}

func (p *BankTransactionDetailData) GetHostFlowNo() (v string) {
	return p.HostFlowNo
}

func (p *BankTransactionDetailData) GetVouchersType() (v string) {
	return p.VouchersType
}

func (p *BankTransactionDetailData) GetVouchersNo() (v string) {
	return p.VouchersNo
}

func (p *BankTransactionDetailData) GetSummaryNo() (v string) {
	return p.SummaryNo
}

func (p *BankTransactionDetailData) GetSummary() (v string) {
	return p.Summary
}

func (p *BankTransactionDetailData) GetAcctNo() (v string) {
	return p.AcctNo
}

func (p *BankTransactionDetailData) GetAccountName() (v string) {
	return p.AccountName
}

func (p *BankTransactionDetailData) GetAccountOpenNode() (v string) {
	return p.AccountOpenNode
}

func (p *BankTransactionDetailData) GetElectronicReceiptFile() (v string) {
	return p.ElectronicReceiptFile
}

func (p *BankTransactionDetailData) GetProcessBusinessId() (v string) {
	return p.ProcessBusinessId
}

func (p *BankTransactionDetailData) GetProcessTotalStatus() (v string) {
	return p.ProcessTotalStatus
}

func (p *BankTransactionDetailData) GetOriginatorUser() (v string) {
	return p.OriginatorUser
}

func (p *BankTransactionDetailData) GetOperationUser() (v string) {
	return p.OperationUser
}

func (p *BankTransactionDetailData) GetOperationComment() (v string) {
	return p.OperationComment
}

func (p *BankTransactionDetailData) GetProcessInstanceId() (v int64) {
	return p.ProcessInstanceId
}

func (p *BankTransactionDetailData) GetPayAccountType() (v string) {
	return p.PayAccountType
}

func (p *BankTransactionDetailData) GetExtField2() (v string) {
	return p.ExtField2
}

func (p *BankTransactionDetailData) GetExtField3() (v string) {
	return p.ExtField3
}

func (p *BankTransactionDetailData) GetMerchantAccountOpenName() (v string) {
	return p.MerchantAccountOpenName
}
func (p *BankTransactionDetailData) SetId(val int64) {
	p.Id = val
}
func (p *BankTransactionDetailData) SetCreatedAt(val []byte) {
	p.CreatedAt = val
}
func (p *BankTransactionDetailData) SetUpdatedAt(val []byte) {
	p.UpdatedAt = val
}
func (p *BankTransactionDetailData) SetOrganizationId(val int64) {
	p.OrganizationId = val
}
func (p *BankTransactionDetailData) SetMerchantAccountId(val int64) {
	p.MerchantAccountId = val
}
func (p *BankTransactionDetailData) SetMerchantAccount(val string) {
	p.MerchantAccount = val
}
func (p *BankTransactionDetailData) SetMerchantAccountName(val string) {
	p.MerchantAccountName = val
}
func (p *BankTransactionDetailData) SetType(val string) {
	p.Type = val
}
func (p *BankTransactionDetailData) SetCashFlag(val string) {
	p.CashFlag = val
}
func (p *BankTransactionDetailData) SetPayAmount(val float64) {
	p.PayAmount = val
}
func (p *BankTransactionDetailData) SetRecAmount(val float64) {
	p.RecAmount = val
}
func (p *BankTransactionDetailData) SetBsnType(val string) {
	p.BsnType = val
}
func (p *BankTransactionDetailData) SetTransferDate(val string) {
	p.TransferDate = val
}
func (p *BankTransactionDetailData) SetTransferTime(val string) {
	p.TransferTime = val
}
func (p *BankTransactionDetailData) SetTranChannel(val string) {
	p.TranChannel = val
}
func (p *BankTransactionDetailData) SetCurrencyType(val string) {
	p.CurrencyType = val
}
func (p *BankTransactionDetailData) SetBalance(val float64) {
	p.Balance = val
}
func (p *BankTransactionDetailData) SetOrderFlowNo(val string) {
	p.OrderFlowNo = val
}
func (p *BankTransactionDetailData) SetHostFlowNo(val string) {
	p.HostFlowNo = val
}
func (p *BankTransactionDetailData) SetVouchersType(val string) {
	p.VouchersType = val
}
func (p *BankTransactionDetailData) SetVouchersNo(val string) {
	p.VouchersNo = val
}
func (p *BankTransactionDetailData) SetSummaryNo(val string) {
	p.SummaryNo = val
}
func (p *BankTransactionDetailData) SetSummary(val string) {
	p.Summary = val
}
func (p *BankTransactionDetailData) SetAcctNo(val string) {
	p.AcctNo = val
}
func (p *BankTransactionDetailData) SetAccountName(val string) {
	p.AccountName = val
}
func (p *BankTransactionDetailData) SetAccountOpenNode(val string) {
	p.AccountOpenNode = val
}
func (p *BankTransactionDetailData) SetElectronicReceiptFile(val string) {
	p.ElectronicReceiptFile = val
}
func (p *BankTransactionDetailData) SetProcessBusinessId(val string) {
	p.ProcessBusinessId = val
}
func (p *BankTransactionDetailData) SetProcessTotalStatus(val string) {
	p.ProcessTotalStatus = val
}
func (p *BankTransactionDetailData) SetOriginatorUser(val string) {
	p.OriginatorUser = val
}
func (p *BankTransactionDetailData) SetOperationUser(val string) {
	p.OperationUser = val
}
func (p *BankTransactionDetailData) SetOperationComment(val string) {
	p.OperationComment = val
}
func (p *BankTransactionDetailData) SetProcessInstanceId(val int64) {
	p.ProcessInstanceId = val
}
func (p *BankTransactionDetailData) SetPayAccountType(val string) {
	p.PayAccountType = val
}
func (p *BankTransactionDetailData) SetExtField2(val string) {
	p.ExtField2 = val
}
func (p *BankTransactionDetailData) SetExtField3(val string) {
	p.ExtField3 = val
}
func (p *BankTransactionDetailData) SetMerchantAccountOpenName(val string) {
	p.MerchantAccountOpenName = val
}

var fieldIDToName_BankTransactionDetailData = map[int16]string{
	1:  "id",
	2:  "createdAt",
	3:  "updatedAt",
	4:  "organizationId",
	5:  "merchantAccountId",
	6:  "merchantAccount",
	7:  "merchantAccountName",
	8:  "type",
	9:  "cashFlag",
	10: "payAmount",
	11: "recAmount",
	12: "bsnType",
	13: "transferDate",
	14: "transferTime",
	15: "tranChannel",
	16: "currencyType",
	17: "balance",
	18: "orderFlowNo",
	19: "hostFlowNo",
	20: "vouchersType",
	21: "vouchersNo",
	22: "summaryNo",
	23: "summary",
	24: "acctNo",
	25: "accountName",
	26: "accountOpenNode",
	27: "electronicReceiptFile",
	28: "processBusinessId",
	29: "processTotalStatus",
	30: "originatorUser",
	31: "operationUser",
	32: "operationComment",
	33: "processInstanceId",
	34: "payAccountType",
	35: "extField2",
	36: "extField3",
	37: "merchantAccountOpenName",
}

func (p *BankTransactionDetailData) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 17:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 18:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 19:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 20:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 21:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 22:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 23:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField23(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 24:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField24(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 25:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField25(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 26:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField26(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 27:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField27(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 28:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField28(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 29:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField29(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 30:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField30(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 31:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField31(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 32:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField32(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 33:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField33(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 34:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField34(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 35:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField35(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 36:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField36(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 37:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField37(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankTransactionDetailData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankTransactionDetailData) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *BankTransactionDetailData) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		p.CreatedAt = []byte(v)
	}
	return nil
}

func (p *BankTransactionDetailData) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		p.UpdatedAt = []byte(v)
	}
	return nil
}

func (p *BankTransactionDetailData) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.OrganizationId = v
	}
	return nil
}

func (p *BankTransactionDetailData) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.MerchantAccountId = v
	}
	return nil
}

func (p *BankTransactionDetailData) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MerchantAccount = v
	}
	return nil
}

func (p *BankTransactionDetailData) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MerchantAccountName = v
	}
	return nil
}

func (p *BankTransactionDetailData) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Type = v
	}
	return nil
}

func (p *BankTransactionDetailData) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CashFlag = v
	}
	return nil
}

func (p *BankTransactionDetailData) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		p.PayAmount = v
	}
	return nil
}

func (p *BankTransactionDetailData) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		p.RecAmount = v
	}
	return nil
}

func (p *BankTransactionDetailData) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.BsnType = v
	}
	return nil
}

func (p *BankTransactionDetailData) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.TransferDate = v
	}
	return nil
}

func (p *BankTransactionDetailData) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.TransferTime = v
	}
	return nil
}

func (p *BankTransactionDetailData) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.TranChannel = v
	}
	return nil
}

func (p *BankTransactionDetailData) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CurrencyType = v
	}
	return nil
}

func (p *BankTransactionDetailData) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		p.Balance = v
	}
	return nil
}

func (p *BankTransactionDetailData) ReadField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.OrderFlowNo = v
	}
	return nil
}

func (p *BankTransactionDetailData) ReadField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.HostFlowNo = v
	}
	return nil
}

func (p *BankTransactionDetailData) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.VouchersType = v
	}
	return nil
}

func (p *BankTransactionDetailData) ReadField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.VouchersNo = v
	}
	return nil
}

func (p *BankTransactionDetailData) ReadField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.SummaryNo = v
	}
	return nil
}

func (p *BankTransactionDetailData) ReadField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Summary = v
	}
	return nil
}

func (p *BankTransactionDetailData) ReadField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.AcctNo = v
	}
	return nil
}

func (p *BankTransactionDetailData) ReadField25(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.AccountName = v
	}
	return nil
}

func (p *BankTransactionDetailData) ReadField26(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.AccountOpenNode = v
	}
	return nil
}

func (p *BankTransactionDetailData) ReadField27(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ElectronicReceiptFile = v
	}
	return nil
}

func (p *BankTransactionDetailData) ReadField28(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ProcessBusinessId = v
	}
	return nil
}

func (p *BankTransactionDetailData) ReadField29(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ProcessTotalStatus = v
	}
	return nil
}

func (p *BankTransactionDetailData) ReadField30(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.OriginatorUser = v
	}
	return nil
}

func (p *BankTransactionDetailData) ReadField31(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.OperationUser = v
	}
	return nil
}

func (p *BankTransactionDetailData) ReadField32(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.OperationComment = v
	}
	return nil
}

func (p *BankTransactionDetailData) ReadField33(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ProcessInstanceId = v
	}
	return nil
}

func (p *BankTransactionDetailData) ReadField34(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PayAccountType = v
	}
	return nil
}

func (p *BankTransactionDetailData) ReadField35(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ExtField2 = v
	}
	return nil
}

func (p *BankTransactionDetailData) ReadField36(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ExtField3 = v
	}
	return nil
}

func (p *BankTransactionDetailData) ReadField37(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MerchantAccountOpenName = v
	}
	return nil
}

func (p *BankTransactionDetailData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BankTransactionDetailData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField23(oprot); err != nil {
			fieldId = 23
			goto WriteFieldError
		}
		if err = p.writeField24(oprot); err != nil {
			fieldId = 24
			goto WriteFieldError
		}
		if err = p.writeField25(oprot); err != nil {
			fieldId = 25
			goto WriteFieldError
		}
		if err = p.writeField26(oprot); err != nil {
			fieldId = 26
			goto WriteFieldError
		}
		if err = p.writeField27(oprot); err != nil {
			fieldId = 27
			goto WriteFieldError
		}
		if err = p.writeField28(oprot); err != nil {
			fieldId = 28
			goto WriteFieldError
		}
		if err = p.writeField29(oprot); err != nil {
			fieldId = 29
			goto WriteFieldError
		}
		if err = p.writeField30(oprot); err != nil {
			fieldId = 30
			goto WriteFieldError
		}
		if err = p.writeField31(oprot); err != nil {
			fieldId = 31
			goto WriteFieldError
		}
		if err = p.writeField32(oprot); err != nil {
			fieldId = 32
			goto WriteFieldError
		}
		if err = p.writeField33(oprot); err != nil {
			fieldId = 33
			goto WriteFieldError
		}
		if err = p.writeField34(oprot); err != nil {
			fieldId = 34
			goto WriteFieldError
		}
		if err = p.writeField35(oprot); err != nil {
			fieldId = 35
			goto WriteFieldError
		}
		if err = p.writeField36(oprot); err != nil {
			fieldId = 36
			goto WriteFieldError
		}
		if err = p.writeField37(oprot); err != nil {
			fieldId = 37
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankTransactionDetailData) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankTransactionDetailData) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("createdAt", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.CreatedAt)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BankTransactionDetailData) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updatedAt", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.UpdatedAt)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *BankTransactionDetailData) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("organizationId", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.OrganizationId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *BankTransactionDetailData) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("merchantAccountId", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.MerchantAccountId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *BankTransactionDetailData) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("merchantAccount", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MerchantAccount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *BankTransactionDetailData) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("merchantAccountName", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MerchantAccountName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *BankTransactionDetailData) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("type", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Type); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *BankTransactionDetailData) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("cashFlag", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CashFlag); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *BankTransactionDetailData) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("payAmount", thrift.DOUBLE, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.PayAmount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *BankTransactionDetailData) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("recAmount", thrift.DOUBLE, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.RecAmount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *BankTransactionDetailData) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("bsnType", thrift.STRING, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.BsnType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *BankTransactionDetailData) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("transferDate", thrift.STRING, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TransferDate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *BankTransactionDetailData) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("transferTime", thrift.STRING, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TransferTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *BankTransactionDetailData) writeField15(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tranChannel", thrift.STRING, 15); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TranChannel); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *BankTransactionDetailData) writeField16(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("currencyType", thrift.STRING, 16); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CurrencyType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *BankTransactionDetailData) writeField17(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("balance", thrift.DOUBLE, 17); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.Balance); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *BankTransactionDetailData) writeField18(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("orderFlowNo", thrift.STRING, 18); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OrderFlowNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *BankTransactionDetailData) writeField19(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("hostFlowNo", thrift.STRING, 19); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.HostFlowNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *BankTransactionDetailData) writeField20(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("vouchersType", thrift.STRING, 20); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.VouchersType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *BankTransactionDetailData) writeField21(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("vouchersNo", thrift.STRING, 21); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.VouchersNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *BankTransactionDetailData) writeField22(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("summaryNo", thrift.STRING, 22); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.SummaryNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *BankTransactionDetailData) writeField23(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("summary", thrift.STRING, 23); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Summary); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 end error: ", p), err)
}

func (p *BankTransactionDetailData) writeField24(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("acctNo", thrift.STRING, 24); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AcctNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 end error: ", p), err)
}

func (p *BankTransactionDetailData) writeField25(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("accountName", thrift.STRING, 25); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AccountName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 end error: ", p), err)
}

func (p *BankTransactionDetailData) writeField26(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("accountOpenNode", thrift.STRING, 26); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AccountOpenNode); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 end error: ", p), err)
}

func (p *BankTransactionDetailData) writeField27(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("electronicReceiptFile", thrift.STRING, 27); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ElectronicReceiptFile); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 end error: ", p), err)
}

func (p *BankTransactionDetailData) writeField28(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("processBusinessId", thrift.STRING, 28); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ProcessBusinessId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 end error: ", p), err)
}

func (p *BankTransactionDetailData) writeField29(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("processTotalStatus", thrift.STRING, 29); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ProcessTotalStatus); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 29 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 29 end error: ", p), err)
}

func (p *BankTransactionDetailData) writeField30(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("originatorUser", thrift.STRING, 30); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OriginatorUser); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 30 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 30 end error: ", p), err)
}

func (p *BankTransactionDetailData) writeField31(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("operationUser", thrift.STRING, 31); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OperationUser); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 end error: ", p), err)
}

func (p *BankTransactionDetailData) writeField32(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("operationComment", thrift.STRING, 32); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OperationComment); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 32 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 32 end error: ", p), err)
}

func (p *BankTransactionDetailData) writeField33(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("processInstanceId", thrift.I64, 33); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ProcessInstanceId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 33 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 33 end error: ", p), err)
}

func (p *BankTransactionDetailData) writeField34(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("payAccountType", thrift.STRING, 34); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PayAccountType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 34 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 34 end error: ", p), err)
}

func (p *BankTransactionDetailData) writeField35(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("extField2", thrift.STRING, 35); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ExtField2); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 35 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 35 end error: ", p), err)
}

func (p *BankTransactionDetailData) writeField36(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("extField3", thrift.STRING, 36); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ExtField3); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 36 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 36 end error: ", p), err)
}

func (p *BankTransactionDetailData) writeField37(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("merchantAccountOpenName", thrift.STRING, 37); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MerchantAccountOpenName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 37 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 37 end error: ", p), err)
}

func (p *BankTransactionDetailData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankTransactionDetailData(%+v)", *p)
}

func (p *BankTransactionDetailData) DeepEqual(ano *BankTransactionDetailData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field3DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field4DeepEqual(ano.OrganizationId) {
		return false
	}
	if !p.Field5DeepEqual(ano.MerchantAccountId) {
		return false
	}
	if !p.Field6DeepEqual(ano.MerchantAccount) {
		return false
	}
	if !p.Field7DeepEqual(ano.MerchantAccountName) {
		return false
	}
	if !p.Field8DeepEqual(ano.Type) {
		return false
	}
	if !p.Field9DeepEqual(ano.CashFlag) {
		return false
	}
	if !p.Field10DeepEqual(ano.PayAmount) {
		return false
	}
	if !p.Field11DeepEqual(ano.RecAmount) {
		return false
	}
	if !p.Field12DeepEqual(ano.BsnType) {
		return false
	}
	if !p.Field13DeepEqual(ano.TransferDate) {
		return false
	}
	if !p.Field14DeepEqual(ano.TransferTime) {
		return false
	}
	if !p.Field15DeepEqual(ano.TranChannel) {
		return false
	}
	if !p.Field16DeepEqual(ano.CurrencyType) {
		return false
	}
	if !p.Field17DeepEqual(ano.Balance) {
		return false
	}
	if !p.Field18DeepEqual(ano.OrderFlowNo) {
		return false
	}
	if !p.Field19DeepEqual(ano.HostFlowNo) {
		return false
	}
	if !p.Field20DeepEqual(ano.VouchersType) {
		return false
	}
	if !p.Field21DeepEqual(ano.VouchersNo) {
		return false
	}
	if !p.Field22DeepEqual(ano.SummaryNo) {
		return false
	}
	if !p.Field23DeepEqual(ano.Summary) {
		return false
	}
	if !p.Field24DeepEqual(ano.AcctNo) {
		return false
	}
	if !p.Field25DeepEqual(ano.AccountName) {
		return false
	}
	if !p.Field26DeepEqual(ano.AccountOpenNode) {
		return false
	}
	if !p.Field27DeepEqual(ano.ElectronicReceiptFile) {
		return false
	}
	if !p.Field28DeepEqual(ano.ProcessBusinessId) {
		return false
	}
	if !p.Field29DeepEqual(ano.ProcessTotalStatus) {
		return false
	}
	if !p.Field30DeepEqual(ano.OriginatorUser) {
		return false
	}
	if !p.Field31DeepEqual(ano.OperationUser) {
		return false
	}
	if !p.Field32DeepEqual(ano.OperationComment) {
		return false
	}
	if !p.Field33DeepEqual(ano.ProcessInstanceId) {
		return false
	}
	if !p.Field34DeepEqual(ano.PayAccountType) {
		return false
	}
	if !p.Field35DeepEqual(ano.ExtField2) {
		return false
	}
	if !p.Field36DeepEqual(ano.ExtField3) {
		return false
	}
	if !p.Field37DeepEqual(ano.MerchantAccountOpenName) {
		return false
	}
	return true
}

func (p *BankTransactionDetailData) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *BankTransactionDetailData) Field2DeepEqual(src []byte) bool {

	if bytes.Compare(p.CreatedAt, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransactionDetailData) Field3DeepEqual(src []byte) bool {

	if bytes.Compare(p.UpdatedAt, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransactionDetailData) Field4DeepEqual(src int64) bool {

	if p.OrganizationId != src {
		return false
	}
	return true
}
func (p *BankTransactionDetailData) Field5DeepEqual(src int64) bool {

	if p.MerchantAccountId != src {
		return false
	}
	return true
}
func (p *BankTransactionDetailData) Field6DeepEqual(src string) bool {

	if strings.Compare(p.MerchantAccount, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransactionDetailData) Field7DeepEqual(src string) bool {

	if strings.Compare(p.MerchantAccountName, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransactionDetailData) Field8DeepEqual(src string) bool {

	if strings.Compare(p.Type, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransactionDetailData) Field9DeepEqual(src string) bool {

	if strings.Compare(p.CashFlag, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransactionDetailData) Field10DeepEqual(src float64) bool {

	if p.PayAmount != src {
		return false
	}
	return true
}
func (p *BankTransactionDetailData) Field11DeepEqual(src float64) bool {

	if p.RecAmount != src {
		return false
	}
	return true
}
func (p *BankTransactionDetailData) Field12DeepEqual(src string) bool {

	if strings.Compare(p.BsnType, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransactionDetailData) Field13DeepEqual(src string) bool {

	if strings.Compare(p.TransferDate, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransactionDetailData) Field14DeepEqual(src string) bool {

	if strings.Compare(p.TransferTime, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransactionDetailData) Field15DeepEqual(src string) bool {

	if strings.Compare(p.TranChannel, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransactionDetailData) Field16DeepEqual(src string) bool {

	if strings.Compare(p.CurrencyType, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransactionDetailData) Field17DeepEqual(src float64) bool {

	if p.Balance != src {
		return false
	}
	return true
}
func (p *BankTransactionDetailData) Field18DeepEqual(src string) bool {

	if strings.Compare(p.OrderFlowNo, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransactionDetailData) Field19DeepEqual(src string) bool {

	if strings.Compare(p.HostFlowNo, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransactionDetailData) Field20DeepEqual(src string) bool {

	if strings.Compare(p.VouchersType, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransactionDetailData) Field21DeepEqual(src string) bool {

	if strings.Compare(p.VouchersNo, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransactionDetailData) Field22DeepEqual(src string) bool {

	if strings.Compare(p.SummaryNo, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransactionDetailData) Field23DeepEqual(src string) bool {

	if strings.Compare(p.Summary, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransactionDetailData) Field24DeepEqual(src string) bool {

	if strings.Compare(p.AcctNo, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransactionDetailData) Field25DeepEqual(src string) bool {

	if strings.Compare(p.AccountName, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransactionDetailData) Field26DeepEqual(src string) bool {

	if strings.Compare(p.AccountOpenNode, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransactionDetailData) Field27DeepEqual(src string) bool {

	if strings.Compare(p.ElectronicReceiptFile, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransactionDetailData) Field28DeepEqual(src string) bool {

	if strings.Compare(p.ProcessBusinessId, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransactionDetailData) Field29DeepEqual(src string) bool {

	if strings.Compare(p.ProcessTotalStatus, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransactionDetailData) Field30DeepEqual(src string) bool {

	if strings.Compare(p.OriginatorUser, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransactionDetailData) Field31DeepEqual(src string) bool {

	if strings.Compare(p.OperationUser, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransactionDetailData) Field32DeepEqual(src string) bool {

	if strings.Compare(p.OperationComment, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransactionDetailData) Field33DeepEqual(src int64) bool {

	if p.ProcessInstanceId != src {
		return false
	}
	return true
}
func (p *BankTransactionDetailData) Field34DeepEqual(src string) bool {

	if strings.Compare(p.PayAccountType, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransactionDetailData) Field35DeepEqual(src string) bool {

	if strings.Compare(p.ExtField2, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransactionDetailData) Field36DeepEqual(src string) bool {

	if strings.Compare(p.ExtField3, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransactionDetailData) Field37DeepEqual(src string) bool {

	if strings.Compare(p.MerchantAccountOpenName, src) != 0 {
		return false
	}
	return true
}

type ListBankTransactionDetailRequest struct {
	PageNum             int32     `thrift:"pageNum,1,required" frugal:"1,required,i32" json:"pageNum"`
	PageSize            int32     `thrift:"pageSize,2,required" frugal:"2,required,i32" json:"pageSize"`
	Sort                string    `thrift:"sort,3" frugal:"3,default,string" json:"sort"`
	Type                string    `thrift:"type,4" frugal:"4,default,string" json:"type"`
	BusinessId          string    `thrift:"businessId,5" frugal:"5,default,string" json:"businessId"`
	SerialNo            string    `thrift:"serialNo,6" frugal:"6,default,string" json:"serialNo"`
	MerchantAccountName string    `thrift:"merchantAccountName,7" frugal:"7,default,string" json:"merchantAccountName"`
	AccountName         string    `thrift:"accountName,8" frugal:"8,default,string" json:"accountName"`
	OriginatorUser      string    `thrift:"originatorUser,9" frugal:"9,default,string" json:"originatorUser"`
	OperationUser       string    `thrift:"operationUser,10" frugal:"10,default,string" json:"operationUser"`
	PayAmount           []float64 `thrift:"payAmount,11" frugal:"11,default,list<double>" json:"payAmount"`
	CreateTimeArray     []string  `thrift:"createTimeArray,12" frugal:"12,default,list<string>" json:"createTimeArray"`
	TotalStatus         string    `thrift:"totalStatus,13" frugal:"13,default,string" json:"totalStatus"`
	BusinessType        string    `thrift:"businessType,14" frugal:"14,default,string" json:"businessType"`
	PayAmountMin        float64   `thrift:"payAmountMin,15" frugal:"15,default,double" json:"payAmountMin"`
	PayAmountMax        float64   `thrift:"payAmountMax,16" frugal:"16,default,double" json:"payAmountMax"`
	RecAmountMin        float64   `thrift:"recAmountMin,17" frugal:"17,default,double" json:"recAmountMin"`
	RecAmountMax        float64   `thrift:"recAmountMax,18" frugal:"18,default,double" json:"recAmountMax"`
	TransferTimeArray   []string  `thrift:"transferTimeArray,19" frugal:"19,default,list<string>" json:"transferTimeArray"`
	PayAccountType      string    `thrift:"payAccountType,20" frugal:"20,default,string" json:"payAccountType"`
	ExtField2           string    `thrift:"extField2,21" frugal:"21,default,string" json:"extField2"`
	ExtField3           string    `thrift:"extField3,22" frugal:"22,default,string" json:"extField3"`
	MerchantAccountId   int64     `thrift:"merchantAccountId,23" frugal:"23,default,i64" json:"merchantAccountId"`
	OrganizationId      int64     `thrift:"organizationId,24" frugal:"24,default,i64" json:"organizationId"`
}

func NewListBankTransactionDetailRequest() *ListBankTransactionDetailRequest {
	return &ListBankTransactionDetailRequest{}
}

func (p *ListBankTransactionDetailRequest) InitDefault() {
	*p = ListBankTransactionDetailRequest{}
}

func (p *ListBankTransactionDetailRequest) GetPageNum() (v int32) {
	return p.PageNum
}

func (p *ListBankTransactionDetailRequest) GetPageSize() (v int32) {
	return p.PageSize
}

func (p *ListBankTransactionDetailRequest) GetSort() (v string) {
	return p.Sort
}

func (p *ListBankTransactionDetailRequest) GetType() (v string) {
	return p.Type
}

func (p *ListBankTransactionDetailRequest) GetBusinessId() (v string) {
	return p.BusinessId
}

func (p *ListBankTransactionDetailRequest) GetSerialNo() (v string) {
	return p.SerialNo
}

func (p *ListBankTransactionDetailRequest) GetMerchantAccountName() (v string) {
	return p.MerchantAccountName
}

func (p *ListBankTransactionDetailRequest) GetAccountName() (v string) {
	return p.AccountName
}

func (p *ListBankTransactionDetailRequest) GetOriginatorUser() (v string) {
	return p.OriginatorUser
}

func (p *ListBankTransactionDetailRequest) GetOperationUser() (v string) {
	return p.OperationUser
}

func (p *ListBankTransactionDetailRequest) GetPayAmount() (v []float64) {
	return p.PayAmount
}

func (p *ListBankTransactionDetailRequest) GetCreateTimeArray() (v []string) {
	return p.CreateTimeArray
}

func (p *ListBankTransactionDetailRequest) GetTotalStatus() (v string) {
	return p.TotalStatus
}

func (p *ListBankTransactionDetailRequest) GetBusinessType() (v string) {
	return p.BusinessType
}

func (p *ListBankTransactionDetailRequest) GetPayAmountMin() (v float64) {
	return p.PayAmountMin
}

func (p *ListBankTransactionDetailRequest) GetPayAmountMax() (v float64) {
	return p.PayAmountMax
}

func (p *ListBankTransactionDetailRequest) GetRecAmountMin() (v float64) {
	return p.RecAmountMin
}

func (p *ListBankTransactionDetailRequest) GetRecAmountMax() (v float64) {
	return p.RecAmountMax
}

func (p *ListBankTransactionDetailRequest) GetTransferTimeArray() (v []string) {
	return p.TransferTimeArray
}

func (p *ListBankTransactionDetailRequest) GetPayAccountType() (v string) {
	return p.PayAccountType
}

func (p *ListBankTransactionDetailRequest) GetExtField2() (v string) {
	return p.ExtField2
}

func (p *ListBankTransactionDetailRequest) GetExtField3() (v string) {
	return p.ExtField3
}

func (p *ListBankTransactionDetailRequest) GetMerchantAccountId() (v int64) {
	return p.MerchantAccountId
}

func (p *ListBankTransactionDetailRequest) GetOrganizationId() (v int64) {
	return p.OrganizationId
}
func (p *ListBankTransactionDetailRequest) SetPageNum(val int32) {
	p.PageNum = val
}
func (p *ListBankTransactionDetailRequest) SetPageSize(val int32) {
	p.PageSize = val
}
func (p *ListBankTransactionDetailRequest) SetSort(val string) {
	p.Sort = val
}
func (p *ListBankTransactionDetailRequest) SetType(val string) {
	p.Type = val
}
func (p *ListBankTransactionDetailRequest) SetBusinessId(val string) {
	p.BusinessId = val
}
func (p *ListBankTransactionDetailRequest) SetSerialNo(val string) {
	p.SerialNo = val
}
func (p *ListBankTransactionDetailRequest) SetMerchantAccountName(val string) {
	p.MerchantAccountName = val
}
func (p *ListBankTransactionDetailRequest) SetAccountName(val string) {
	p.AccountName = val
}
func (p *ListBankTransactionDetailRequest) SetOriginatorUser(val string) {
	p.OriginatorUser = val
}
func (p *ListBankTransactionDetailRequest) SetOperationUser(val string) {
	p.OperationUser = val
}
func (p *ListBankTransactionDetailRequest) SetPayAmount(val []float64) {
	p.PayAmount = val
}
func (p *ListBankTransactionDetailRequest) SetCreateTimeArray(val []string) {
	p.CreateTimeArray = val
}
func (p *ListBankTransactionDetailRequest) SetTotalStatus(val string) {
	p.TotalStatus = val
}
func (p *ListBankTransactionDetailRequest) SetBusinessType(val string) {
	p.BusinessType = val
}
func (p *ListBankTransactionDetailRequest) SetPayAmountMin(val float64) {
	p.PayAmountMin = val
}
func (p *ListBankTransactionDetailRequest) SetPayAmountMax(val float64) {
	p.PayAmountMax = val
}
func (p *ListBankTransactionDetailRequest) SetRecAmountMin(val float64) {
	p.RecAmountMin = val
}
func (p *ListBankTransactionDetailRequest) SetRecAmountMax(val float64) {
	p.RecAmountMax = val
}
func (p *ListBankTransactionDetailRequest) SetTransferTimeArray(val []string) {
	p.TransferTimeArray = val
}
func (p *ListBankTransactionDetailRequest) SetPayAccountType(val string) {
	p.PayAccountType = val
}
func (p *ListBankTransactionDetailRequest) SetExtField2(val string) {
	p.ExtField2 = val
}
func (p *ListBankTransactionDetailRequest) SetExtField3(val string) {
	p.ExtField3 = val
}
func (p *ListBankTransactionDetailRequest) SetMerchantAccountId(val int64) {
	p.MerchantAccountId = val
}
func (p *ListBankTransactionDetailRequest) SetOrganizationId(val int64) {
	p.OrganizationId = val
}

var fieldIDToName_ListBankTransactionDetailRequest = map[int16]string{
	1:  "pageNum",
	2:  "pageSize",
	3:  "sort",
	4:  "type",
	5:  "businessId",
	6:  "serialNo",
	7:  "merchantAccountName",
	8:  "accountName",
	9:  "originatorUser",
	10: "operationUser",
	11: "payAmount",
	12: "createTimeArray",
	13: "totalStatus",
	14: "businessType",
	15: "payAmountMin",
	16: "payAmountMax",
	17: "recAmountMin",
	18: "recAmountMax",
	19: "transferTimeArray",
	20: "payAccountType",
	21: "extField2",
	22: "extField3",
	23: "merchantAccountId",
	24: "organizationId",
}

func (p *ListBankTransactionDetailRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPageNum bool = false
	var issetPageSize bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPageNum = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetPageSize = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 15:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 16:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 17:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 18:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 19:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 20:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 21:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 22:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 23:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField23(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 24:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField24(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPageNum {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPageSize {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListBankTransactionDetailRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListBankTransactionDetailRequest[fieldId]))
}

func (p *ListBankTransactionDetailRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.PageNum = v
	}
	return nil
}

func (p *ListBankTransactionDetailRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.PageSize = v
	}
	return nil
}

func (p *ListBankTransactionDetailRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Sort = v
	}
	return nil
}

func (p *ListBankTransactionDetailRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Type = v
	}
	return nil
}

func (p *ListBankTransactionDetailRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.BusinessId = v
	}
	return nil
}

func (p *ListBankTransactionDetailRequest) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.SerialNo = v
	}
	return nil
}

func (p *ListBankTransactionDetailRequest) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MerchantAccountName = v
	}
	return nil
}

func (p *ListBankTransactionDetailRequest) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.AccountName = v
	}
	return nil
}

func (p *ListBankTransactionDetailRequest) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.OriginatorUser = v
	}
	return nil
}

func (p *ListBankTransactionDetailRequest) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.OperationUser = v
	}
	return nil
}

func (p *ListBankTransactionDetailRequest) ReadField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.PayAmount = make([]float64, 0, size)
	for i := 0; i < size; i++ {
		var _elem float64
		if v, err := iprot.ReadDouble(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.PayAmount = append(p.PayAmount, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListBankTransactionDetailRequest) ReadField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.CreateTimeArray = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.CreateTimeArray = append(p.CreateTimeArray, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListBankTransactionDetailRequest) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.TotalStatus = v
	}
	return nil
}

func (p *ListBankTransactionDetailRequest) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.BusinessType = v
	}
	return nil
}

func (p *ListBankTransactionDetailRequest) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		p.PayAmountMin = v
	}
	return nil
}

func (p *ListBankTransactionDetailRequest) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		p.PayAmountMax = v
	}
	return nil
}

func (p *ListBankTransactionDetailRequest) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		p.RecAmountMin = v
	}
	return nil
}

func (p *ListBankTransactionDetailRequest) ReadField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		p.RecAmountMax = v
	}
	return nil
}

func (p *ListBankTransactionDetailRequest) ReadField19(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.TransferTimeArray = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.TransferTimeArray = append(p.TransferTimeArray, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListBankTransactionDetailRequest) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PayAccountType = v
	}
	return nil
}

func (p *ListBankTransactionDetailRequest) ReadField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ExtField2 = v
	}
	return nil
}

func (p *ListBankTransactionDetailRequest) ReadField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ExtField3 = v
	}
	return nil
}

func (p *ListBankTransactionDetailRequest) ReadField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.MerchantAccountId = v
	}
	return nil
}

func (p *ListBankTransactionDetailRequest) ReadField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.OrganizationId = v
	}
	return nil
}

func (p *ListBankTransactionDetailRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListBankTransactionDetailRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField23(oprot); err != nil {
			fieldId = 23
			goto WriteFieldError
		}
		if err = p.writeField24(oprot); err != nil {
			fieldId = 24
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListBankTransactionDetailRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pageNum", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.PageNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListBankTransactionDetailRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pageSize", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.PageSize); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListBankTransactionDetailRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("sort", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Sort); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ListBankTransactionDetailRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("type", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Type); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ListBankTransactionDetailRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("businessId", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.BusinessId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ListBankTransactionDetailRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("serialNo", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.SerialNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ListBankTransactionDetailRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("merchantAccountName", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MerchantAccountName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ListBankTransactionDetailRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("accountName", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AccountName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ListBankTransactionDetailRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("originatorUser", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OriginatorUser); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ListBankTransactionDetailRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("operationUser", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OperationUser); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ListBankTransactionDetailRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("payAmount", thrift.LIST, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.DOUBLE, len(p.PayAmount)); err != nil {
		return err
	}
	for _, v := range p.PayAmount {
		if err := oprot.WriteDouble(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *ListBankTransactionDetailRequest) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("createTimeArray", thrift.LIST, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.CreateTimeArray)); err != nil {
		return err
	}
	for _, v := range p.CreateTimeArray {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *ListBankTransactionDetailRequest) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("totalStatus", thrift.STRING, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TotalStatus); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *ListBankTransactionDetailRequest) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("businessType", thrift.STRING, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.BusinessType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *ListBankTransactionDetailRequest) writeField15(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("payAmountMin", thrift.DOUBLE, 15); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.PayAmountMin); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *ListBankTransactionDetailRequest) writeField16(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("payAmountMax", thrift.DOUBLE, 16); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.PayAmountMax); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *ListBankTransactionDetailRequest) writeField17(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("recAmountMin", thrift.DOUBLE, 17); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.RecAmountMin); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *ListBankTransactionDetailRequest) writeField18(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("recAmountMax", thrift.DOUBLE, 18); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.RecAmountMax); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *ListBankTransactionDetailRequest) writeField19(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("transferTimeArray", thrift.LIST, 19); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.TransferTimeArray)); err != nil {
		return err
	}
	for _, v := range p.TransferTimeArray {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *ListBankTransactionDetailRequest) writeField20(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("payAccountType", thrift.STRING, 20); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PayAccountType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *ListBankTransactionDetailRequest) writeField21(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("extField2", thrift.STRING, 21); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ExtField2); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *ListBankTransactionDetailRequest) writeField22(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("extField3", thrift.STRING, 22); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ExtField3); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *ListBankTransactionDetailRequest) writeField23(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("merchantAccountId", thrift.I64, 23); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.MerchantAccountId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 end error: ", p), err)
}

func (p *ListBankTransactionDetailRequest) writeField24(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("organizationId", thrift.I64, 24); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.OrganizationId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 end error: ", p), err)
}

func (p *ListBankTransactionDetailRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListBankTransactionDetailRequest(%+v)", *p)
}

func (p *ListBankTransactionDetailRequest) DeepEqual(ano *ListBankTransactionDetailRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PageNum) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field3DeepEqual(ano.Sort) {
		return false
	}
	if !p.Field4DeepEqual(ano.Type) {
		return false
	}
	if !p.Field5DeepEqual(ano.BusinessId) {
		return false
	}
	if !p.Field6DeepEqual(ano.SerialNo) {
		return false
	}
	if !p.Field7DeepEqual(ano.MerchantAccountName) {
		return false
	}
	if !p.Field8DeepEqual(ano.AccountName) {
		return false
	}
	if !p.Field9DeepEqual(ano.OriginatorUser) {
		return false
	}
	if !p.Field10DeepEqual(ano.OperationUser) {
		return false
	}
	if !p.Field11DeepEqual(ano.PayAmount) {
		return false
	}
	if !p.Field12DeepEqual(ano.CreateTimeArray) {
		return false
	}
	if !p.Field13DeepEqual(ano.TotalStatus) {
		return false
	}
	if !p.Field14DeepEqual(ano.BusinessType) {
		return false
	}
	if !p.Field15DeepEqual(ano.PayAmountMin) {
		return false
	}
	if !p.Field16DeepEqual(ano.PayAmountMax) {
		return false
	}
	if !p.Field17DeepEqual(ano.RecAmountMin) {
		return false
	}
	if !p.Field18DeepEqual(ano.RecAmountMax) {
		return false
	}
	if !p.Field19DeepEqual(ano.TransferTimeArray) {
		return false
	}
	if !p.Field20DeepEqual(ano.PayAccountType) {
		return false
	}
	if !p.Field21DeepEqual(ano.ExtField2) {
		return false
	}
	if !p.Field22DeepEqual(ano.ExtField3) {
		return false
	}
	if !p.Field23DeepEqual(ano.MerchantAccountId) {
		return false
	}
	if !p.Field24DeepEqual(ano.OrganizationId) {
		return false
	}
	return true
}

func (p *ListBankTransactionDetailRequest) Field1DeepEqual(src int32) bool {

	if p.PageNum != src {
		return false
	}
	return true
}
func (p *ListBankTransactionDetailRequest) Field2DeepEqual(src int32) bool {

	if p.PageSize != src {
		return false
	}
	return true
}
func (p *ListBankTransactionDetailRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Sort, src) != 0 {
		return false
	}
	return true
}
func (p *ListBankTransactionDetailRequest) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Type, src) != 0 {
		return false
	}
	return true
}
func (p *ListBankTransactionDetailRequest) Field5DeepEqual(src string) bool {

	if strings.Compare(p.BusinessId, src) != 0 {
		return false
	}
	return true
}
func (p *ListBankTransactionDetailRequest) Field6DeepEqual(src string) bool {

	if strings.Compare(p.SerialNo, src) != 0 {
		return false
	}
	return true
}
func (p *ListBankTransactionDetailRequest) Field7DeepEqual(src string) bool {

	if strings.Compare(p.MerchantAccountName, src) != 0 {
		return false
	}
	return true
}
func (p *ListBankTransactionDetailRequest) Field8DeepEqual(src string) bool {

	if strings.Compare(p.AccountName, src) != 0 {
		return false
	}
	return true
}
func (p *ListBankTransactionDetailRequest) Field9DeepEqual(src string) bool {

	if strings.Compare(p.OriginatorUser, src) != 0 {
		return false
	}
	return true
}
func (p *ListBankTransactionDetailRequest) Field10DeepEqual(src string) bool {

	if strings.Compare(p.OperationUser, src) != 0 {
		return false
	}
	return true
}
func (p *ListBankTransactionDetailRequest) Field11DeepEqual(src []float64) bool {

	if len(p.PayAmount) != len(src) {
		return false
	}
	for i, v := range p.PayAmount {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *ListBankTransactionDetailRequest) Field12DeepEqual(src []string) bool {

	if len(p.CreateTimeArray) != len(src) {
		return false
	}
	for i, v := range p.CreateTimeArray {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ListBankTransactionDetailRequest) Field13DeepEqual(src string) bool {

	if strings.Compare(p.TotalStatus, src) != 0 {
		return false
	}
	return true
}
func (p *ListBankTransactionDetailRequest) Field14DeepEqual(src string) bool {

	if strings.Compare(p.BusinessType, src) != 0 {
		return false
	}
	return true
}
func (p *ListBankTransactionDetailRequest) Field15DeepEqual(src float64) bool {

	if p.PayAmountMin != src {
		return false
	}
	return true
}
func (p *ListBankTransactionDetailRequest) Field16DeepEqual(src float64) bool {

	if p.PayAmountMax != src {
		return false
	}
	return true
}
func (p *ListBankTransactionDetailRequest) Field17DeepEqual(src float64) bool {

	if p.RecAmountMin != src {
		return false
	}
	return true
}
func (p *ListBankTransactionDetailRequest) Field18DeepEqual(src float64) bool {

	if p.RecAmountMax != src {
		return false
	}
	return true
}
func (p *ListBankTransactionDetailRequest) Field19DeepEqual(src []string) bool {

	if len(p.TransferTimeArray) != len(src) {
		return false
	}
	for i, v := range p.TransferTimeArray {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ListBankTransactionDetailRequest) Field20DeepEqual(src string) bool {

	if strings.Compare(p.PayAccountType, src) != 0 {
		return false
	}
	return true
}
func (p *ListBankTransactionDetailRequest) Field21DeepEqual(src string) bool {

	if strings.Compare(p.ExtField2, src) != 0 {
		return false
	}
	return true
}
func (p *ListBankTransactionDetailRequest) Field22DeepEqual(src string) bool {

	if strings.Compare(p.ExtField3, src) != 0 {
		return false
	}
	return true
}
func (p *ListBankTransactionDetailRequest) Field23DeepEqual(src int64) bool {

	if p.MerchantAccountId != src {
		return false
	}
	return true
}
func (p *ListBankTransactionDetailRequest) Field24DeepEqual(src int64) bool {

	if p.OrganizationId != src {
		return false
	}
	return true
}

type ListBankTransactionDetailResponse struct {
	Data  []*BankTransactionDetailData `thrift:"data,1" frugal:"1,default,list<BankTransactionDetailData>" json:"data"`
	Count int64                        `thrift:"count,2" frugal:"2,default,i64" json:"count"`
}

func NewListBankTransactionDetailResponse() *ListBankTransactionDetailResponse {
	return &ListBankTransactionDetailResponse{}
}

func (p *ListBankTransactionDetailResponse) InitDefault() {
	*p = ListBankTransactionDetailResponse{}
}

func (p *ListBankTransactionDetailResponse) GetData() (v []*BankTransactionDetailData) {
	return p.Data
}

func (p *ListBankTransactionDetailResponse) GetCount() (v int64) {
	return p.Count
}
func (p *ListBankTransactionDetailResponse) SetData(val []*BankTransactionDetailData) {
	p.Data = val
}
func (p *ListBankTransactionDetailResponse) SetCount(val int64) {
	p.Count = val
}

var fieldIDToName_ListBankTransactionDetailResponse = map[int16]string{
	1: "data",
	2: "count",
}

func (p *ListBankTransactionDetailResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListBankTransactionDetailResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListBankTransactionDetailResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Data = make([]*BankTransactionDetailData, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewBankTransactionDetailData()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Data = append(p.Data, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListBankTransactionDetailResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Count = v
	}
	return nil
}

func (p *ListBankTransactionDetailResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListBankTransactionDetailResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListBankTransactionDetailResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Data)); err != nil {
		return err
	}
	for _, v := range p.Data {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListBankTransactionDetailResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("count", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Count); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListBankTransactionDetailResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListBankTransactionDetailResponse(%+v)", *p)
}

func (p *ListBankTransactionDetailResponse) DeepEqual(ano *ListBankTransactionDetailResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Data) {
		return false
	}
	if !p.Field2DeepEqual(ano.Count) {
		return false
	}
	return true
}

func (p *ListBankTransactionDetailResponse) Field1DeepEqual(src []*BankTransactionDetailData) bool {

	if len(p.Data) != len(src) {
		return false
	}
	for i, v := range p.Data {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListBankTransactionDetailResponse) Field2DeepEqual(src int64) bool {

	if p.Count != src {
		return false
	}
	return true
}

type BankTransactionRecDetailData struct {
	Id                 int64  `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	OrganizationId     int64  `thrift:"organizationId,2" frugal:"2,default,i64" json:"organizationId"`
	ExternalId         string `thrift:"externalId,3" frugal:"3,default,string" json:"externalId"`
	ProcessBusinessId  string `thrift:"processBusinessId,4" frugal:"4,default,string" json:"processBusinessId"`
	OperationUserId    string `thrift:"operationUserId,5" frugal:"5,default,string" json:"operationUserId"`
	OperationUserName  string `thrift:"operationUserName,6" frugal:"6,default,string" json:"operationUserName"`
	OperationComment   string `thrift:"operationComment,7" frugal:"7,default,string" json:"operationComment"`
	ProcessTotalStatus string `thrift:"processTotalStatus,8" frugal:"8,default,string" json:"processTotalStatus"`
	ProcessInstanceId  int64  `thrift:"ProcessInstanceId,9" frugal:"9,default,i64" json:"ProcessInstanceId"`
}

func NewBankTransactionRecDetailData() *BankTransactionRecDetailData {
	return &BankTransactionRecDetailData{}
}

func (p *BankTransactionRecDetailData) InitDefault() {
	*p = BankTransactionRecDetailData{}
}

func (p *BankTransactionRecDetailData) GetId() (v int64) {
	return p.Id
}

func (p *BankTransactionRecDetailData) GetOrganizationId() (v int64) {
	return p.OrganizationId
}

func (p *BankTransactionRecDetailData) GetExternalId() (v string) {
	return p.ExternalId
}

func (p *BankTransactionRecDetailData) GetProcessBusinessId() (v string) {
	return p.ProcessBusinessId
}

func (p *BankTransactionRecDetailData) GetOperationUserId() (v string) {
	return p.OperationUserId
}

func (p *BankTransactionRecDetailData) GetOperationUserName() (v string) {
	return p.OperationUserName
}

func (p *BankTransactionRecDetailData) GetOperationComment() (v string) {
	return p.OperationComment
}

func (p *BankTransactionRecDetailData) GetProcessTotalStatus() (v string) {
	return p.ProcessTotalStatus
}

func (p *BankTransactionRecDetailData) GetProcessInstanceId() (v int64) {
	return p.ProcessInstanceId
}
func (p *BankTransactionRecDetailData) SetId(val int64) {
	p.Id = val
}
func (p *BankTransactionRecDetailData) SetOrganizationId(val int64) {
	p.OrganizationId = val
}
func (p *BankTransactionRecDetailData) SetExternalId(val string) {
	p.ExternalId = val
}
func (p *BankTransactionRecDetailData) SetProcessBusinessId(val string) {
	p.ProcessBusinessId = val
}
func (p *BankTransactionRecDetailData) SetOperationUserId(val string) {
	p.OperationUserId = val
}
func (p *BankTransactionRecDetailData) SetOperationUserName(val string) {
	p.OperationUserName = val
}
func (p *BankTransactionRecDetailData) SetOperationComment(val string) {
	p.OperationComment = val
}
func (p *BankTransactionRecDetailData) SetProcessTotalStatus(val string) {
	p.ProcessTotalStatus = val
}
func (p *BankTransactionRecDetailData) SetProcessInstanceId(val int64) {
	p.ProcessInstanceId = val
}

var fieldIDToName_BankTransactionRecDetailData = map[int16]string{
	1: "id",
	2: "organizationId",
	3: "externalId",
	4: "processBusinessId",
	5: "operationUserId",
	6: "operationUserName",
	7: "operationComment",
	8: "processTotalStatus",
	9: "ProcessInstanceId",
}

func (p *BankTransactionRecDetailData) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankTransactionRecDetailData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankTransactionRecDetailData) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *BankTransactionRecDetailData) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.OrganizationId = v
	}
	return nil
}

func (p *BankTransactionRecDetailData) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ExternalId = v
	}
	return nil
}

func (p *BankTransactionRecDetailData) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ProcessBusinessId = v
	}
	return nil
}

func (p *BankTransactionRecDetailData) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.OperationUserId = v
	}
	return nil
}

func (p *BankTransactionRecDetailData) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.OperationUserName = v
	}
	return nil
}

func (p *BankTransactionRecDetailData) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.OperationComment = v
	}
	return nil
}

func (p *BankTransactionRecDetailData) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ProcessTotalStatus = v
	}
	return nil
}

func (p *BankTransactionRecDetailData) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ProcessInstanceId = v
	}
	return nil
}

func (p *BankTransactionRecDetailData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BankTransactionRecDetailData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankTransactionRecDetailData) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankTransactionRecDetailData) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("organizationId", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.OrganizationId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BankTransactionRecDetailData) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("externalId", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ExternalId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *BankTransactionRecDetailData) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("processBusinessId", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ProcessBusinessId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *BankTransactionRecDetailData) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("operationUserId", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OperationUserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *BankTransactionRecDetailData) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("operationUserName", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OperationUserName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *BankTransactionRecDetailData) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("operationComment", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OperationComment); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *BankTransactionRecDetailData) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("processTotalStatus", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ProcessTotalStatus); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *BankTransactionRecDetailData) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ProcessInstanceId", thrift.I64, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ProcessInstanceId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *BankTransactionRecDetailData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankTransactionRecDetailData(%+v)", *p)
}

func (p *BankTransactionRecDetailData) DeepEqual(ano *BankTransactionRecDetailData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.OrganizationId) {
		return false
	}
	if !p.Field3DeepEqual(ano.ExternalId) {
		return false
	}
	if !p.Field4DeepEqual(ano.ProcessBusinessId) {
		return false
	}
	if !p.Field5DeepEqual(ano.OperationUserId) {
		return false
	}
	if !p.Field6DeepEqual(ano.OperationUserName) {
		return false
	}
	if !p.Field7DeepEqual(ano.OperationComment) {
		return false
	}
	if !p.Field8DeepEqual(ano.ProcessTotalStatus) {
		return false
	}
	if !p.Field9DeepEqual(ano.ProcessInstanceId) {
		return false
	}
	return true
}

func (p *BankTransactionRecDetailData) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *BankTransactionRecDetailData) Field2DeepEqual(src int64) bool {

	if p.OrganizationId != src {
		return false
	}
	return true
}
func (p *BankTransactionRecDetailData) Field3DeepEqual(src string) bool {

	if strings.Compare(p.ExternalId, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransactionRecDetailData) Field4DeepEqual(src string) bool {

	if strings.Compare(p.ProcessBusinessId, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransactionRecDetailData) Field5DeepEqual(src string) bool {

	if strings.Compare(p.OperationUserId, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransactionRecDetailData) Field6DeepEqual(src string) bool {

	if strings.Compare(p.OperationUserName, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransactionRecDetailData) Field7DeepEqual(src string) bool {

	if strings.Compare(p.OperationComment, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransactionRecDetailData) Field8DeepEqual(src string) bool {

	if strings.Compare(p.ProcessTotalStatus, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransactionRecDetailData) Field9DeepEqual(src int64) bool {

	if p.ProcessInstanceId != src {
		return false
	}
	return true
}

type BankTransactionDetailProcessInstanceData struct {
	BankTransactionDetailId int64  `thrift:"bankTransactionDetailId,1" frugal:"1,default,i64" json:"bankTransactionDetailId"`
	ExternalId              string `thrift:"externalId,2" frugal:"2,default,string" json:"externalId"`
	OrganizationId          int64  `thrift:"organizationId,3" frugal:"3,default,i64" json:"organizationId"`
}

func NewBankTransactionDetailProcessInstanceData() *BankTransactionDetailProcessInstanceData {
	return &BankTransactionDetailProcessInstanceData{}
}

func (p *BankTransactionDetailProcessInstanceData) InitDefault() {
	*p = BankTransactionDetailProcessInstanceData{}
}

func (p *BankTransactionDetailProcessInstanceData) GetBankTransactionDetailId() (v int64) {
	return p.BankTransactionDetailId
}

func (p *BankTransactionDetailProcessInstanceData) GetExternalId() (v string) {
	return p.ExternalId
}

func (p *BankTransactionDetailProcessInstanceData) GetOrganizationId() (v int64) {
	return p.OrganizationId
}
func (p *BankTransactionDetailProcessInstanceData) SetBankTransactionDetailId(val int64) {
	p.BankTransactionDetailId = val
}
func (p *BankTransactionDetailProcessInstanceData) SetExternalId(val string) {
	p.ExternalId = val
}
func (p *BankTransactionDetailProcessInstanceData) SetOrganizationId(val int64) {
	p.OrganizationId = val
}

var fieldIDToName_BankTransactionDetailProcessInstanceData = map[int16]string{
	1: "bankTransactionDetailId",
	2: "externalId",
	3: "organizationId",
}

func (p *BankTransactionDetailProcessInstanceData) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankTransactionDetailProcessInstanceData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankTransactionDetailProcessInstanceData) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.BankTransactionDetailId = v
	}
	return nil
}

func (p *BankTransactionDetailProcessInstanceData) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ExternalId = v
	}
	return nil
}

func (p *BankTransactionDetailProcessInstanceData) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.OrganizationId = v
	}
	return nil
}

func (p *BankTransactionDetailProcessInstanceData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BankTransactionDetailProcessInstanceData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankTransactionDetailProcessInstanceData) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("bankTransactionDetailId", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.BankTransactionDetailId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankTransactionDetailProcessInstanceData) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("externalId", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ExternalId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BankTransactionDetailProcessInstanceData) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("organizationId", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.OrganizationId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *BankTransactionDetailProcessInstanceData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankTransactionDetailProcessInstanceData(%+v)", *p)
}

func (p *BankTransactionDetailProcessInstanceData) DeepEqual(ano *BankTransactionDetailProcessInstanceData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BankTransactionDetailId) {
		return false
	}
	if !p.Field2DeepEqual(ano.ExternalId) {
		return false
	}
	if !p.Field3DeepEqual(ano.OrganizationId) {
		return false
	}
	return true
}

func (p *BankTransactionDetailProcessInstanceData) Field1DeepEqual(src int64) bool {

	if p.BankTransactionDetailId != src {
		return false
	}
	return true
}
func (p *BankTransactionDetailProcessInstanceData) Field2DeepEqual(src string) bool {

	if strings.Compare(p.ExternalId, src) != 0 {
		return false
	}
	return true
}
func (p *BankTransactionDetailProcessInstanceData) Field3DeepEqual(src int64) bool {

	if p.OrganizationId != src {
		return false
	}
	return true
}

type BankCodeData struct {
	Id            int64  `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	BankName      string `thrift:"bankName,2" frugal:"2,default,string" json:"bankName"`
	BankAliasName string `thrift:"bankAliasName,3" frugal:"3,default,string" json:"bankAliasName"`
	BankCode      string `thrift:"bankCode,4" frugal:"4,default,string" json:"bankCode"`
	UnionBankNo   string `thrift:"unionBankNo,5" frugal:"5,default,string" json:"unionBankNo"`
	ClearBankNo   string `thrift:"clearBankNo,6" frugal:"6,default,string" json:"clearBankNo"`
}

func NewBankCodeData() *BankCodeData {
	return &BankCodeData{}
}

func (p *BankCodeData) InitDefault() {
	*p = BankCodeData{}
}

func (p *BankCodeData) GetId() (v int64) {
	return p.Id
}

func (p *BankCodeData) GetBankName() (v string) {
	return p.BankName
}

func (p *BankCodeData) GetBankAliasName() (v string) {
	return p.BankAliasName
}

func (p *BankCodeData) GetBankCode() (v string) {
	return p.BankCode
}

func (p *BankCodeData) GetUnionBankNo() (v string) {
	return p.UnionBankNo
}

func (p *BankCodeData) GetClearBankNo() (v string) {
	return p.ClearBankNo
}
func (p *BankCodeData) SetId(val int64) {
	p.Id = val
}
func (p *BankCodeData) SetBankName(val string) {
	p.BankName = val
}
func (p *BankCodeData) SetBankAliasName(val string) {
	p.BankAliasName = val
}
func (p *BankCodeData) SetBankCode(val string) {
	p.BankCode = val
}
func (p *BankCodeData) SetUnionBankNo(val string) {
	p.UnionBankNo = val
}
func (p *BankCodeData) SetClearBankNo(val string) {
	p.ClearBankNo = val
}

var fieldIDToName_BankCodeData = map[int16]string{
	1: "id",
	2: "bankName",
	3: "bankAliasName",
	4: "bankCode",
	5: "unionBankNo",
	6: "clearBankNo",
}

func (p *BankCodeData) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankCodeData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankCodeData) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *BankCodeData) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.BankName = v
	}
	return nil
}

func (p *BankCodeData) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.BankAliasName = v
	}
	return nil
}

func (p *BankCodeData) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.BankCode = v
	}
	return nil
}

func (p *BankCodeData) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UnionBankNo = v
	}
	return nil
}

func (p *BankCodeData) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClearBankNo = v
	}
	return nil
}

func (p *BankCodeData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BankCodeData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankCodeData) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankCodeData) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("bankName", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.BankName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BankCodeData) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("bankAliasName", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.BankAliasName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *BankCodeData) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("bankCode", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.BankCode); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *BankCodeData) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("unionBankNo", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UnionBankNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *BankCodeData) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("clearBankNo", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClearBankNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *BankCodeData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankCodeData(%+v)", *p)
}

func (p *BankCodeData) DeepEqual(ano *BankCodeData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.BankName) {
		return false
	}
	if !p.Field3DeepEqual(ano.BankAliasName) {
		return false
	}
	if !p.Field4DeepEqual(ano.BankCode) {
		return false
	}
	if !p.Field5DeepEqual(ano.UnionBankNo) {
		return false
	}
	if !p.Field6DeepEqual(ano.ClearBankNo) {
		return false
	}
	return true
}

func (p *BankCodeData) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *BankCodeData) Field2DeepEqual(src string) bool {

	if strings.Compare(p.BankName, src) != 0 {
		return false
	}
	return true
}
func (p *BankCodeData) Field3DeepEqual(src string) bool {

	if strings.Compare(p.BankAliasName, src) != 0 {
		return false
	}
	return true
}
func (p *BankCodeData) Field4DeepEqual(src string) bool {

	if strings.Compare(p.BankCode, src) != 0 {
		return false
	}
	return true
}
func (p *BankCodeData) Field5DeepEqual(src string) bool {

	if strings.Compare(p.UnionBankNo, src) != 0 {
		return false
	}
	return true
}
func (p *BankCodeData) Field6DeepEqual(src string) bool {

	if strings.Compare(p.ClearBankNo, src) != 0 {
		return false
	}
	return true
}

type QueryBankCardInfoResponse struct {
	CardType  string `thrift:"cardType,1" frugal:"1,default,string" json:"cardType"`
	Bank      string `thrift:"bank,2" frugal:"2,default,string" json:"bank"`
	Key       string `thrift:"key,3" frugal:"3,default,string" json:"key"`
	Messages  string `thrift:"messages,4" frugal:"4,default,string" json:"messages"`
	Validated bool   `thrift:"validated,5" frugal:"5,default,bool" json:"validated"`
	Stat      string `thrift:"stat,6" frugal:"6,default,string" json:"stat"`
}

func NewQueryBankCardInfoResponse() *QueryBankCardInfoResponse {
	return &QueryBankCardInfoResponse{}
}

func (p *QueryBankCardInfoResponse) InitDefault() {
	*p = QueryBankCardInfoResponse{}
}

func (p *QueryBankCardInfoResponse) GetCardType() (v string) {
	return p.CardType
}

func (p *QueryBankCardInfoResponse) GetBank() (v string) {
	return p.Bank
}

func (p *QueryBankCardInfoResponse) GetKey() (v string) {
	return p.Key
}

func (p *QueryBankCardInfoResponse) GetMessages() (v string) {
	return p.Messages
}

func (p *QueryBankCardInfoResponse) GetValidated() (v bool) {
	return p.Validated
}

func (p *QueryBankCardInfoResponse) GetStat() (v string) {
	return p.Stat
}
func (p *QueryBankCardInfoResponse) SetCardType(val string) {
	p.CardType = val
}
func (p *QueryBankCardInfoResponse) SetBank(val string) {
	p.Bank = val
}
func (p *QueryBankCardInfoResponse) SetKey(val string) {
	p.Key = val
}
func (p *QueryBankCardInfoResponse) SetMessages(val string) {
	p.Messages = val
}
func (p *QueryBankCardInfoResponse) SetValidated(val bool) {
	p.Validated = val
}
func (p *QueryBankCardInfoResponse) SetStat(val string) {
	p.Stat = val
}

var fieldIDToName_QueryBankCardInfoResponse = map[int16]string{
	1: "cardType",
	2: "bank",
	3: "key",
	4: "messages",
	5: "validated",
	6: "stat",
}

func (p *QueryBankCardInfoResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QueryBankCardInfoResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *QueryBankCardInfoResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CardType = v
	}
	return nil
}

func (p *QueryBankCardInfoResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Bank = v
	}
	return nil
}

func (p *QueryBankCardInfoResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Key = v
	}
	return nil
}

func (p *QueryBankCardInfoResponse) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Messages = v
	}
	return nil
}

func (p *QueryBankCardInfoResponse) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.Validated = v
	}
	return nil
}

func (p *QueryBankCardInfoResponse) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Stat = v
	}
	return nil
}

func (p *QueryBankCardInfoResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryBankCardInfoResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QueryBankCardInfoResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("cardType", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CardType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QueryBankCardInfoResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("bank", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Bank); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *QueryBankCardInfoResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("key", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Key); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *QueryBankCardInfoResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("messages", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Messages); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *QueryBankCardInfoResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("validated", thrift.BOOL, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Validated); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *QueryBankCardInfoResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("stat", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Stat); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *QueryBankCardInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryBankCardInfoResponse(%+v)", *p)
}

func (p *QueryBankCardInfoResponse) DeepEqual(ano *QueryBankCardInfoResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CardType) {
		return false
	}
	if !p.Field2DeepEqual(ano.Bank) {
		return false
	}
	if !p.Field3DeepEqual(ano.Key) {
		return false
	}
	if !p.Field4DeepEqual(ano.Messages) {
		return false
	}
	if !p.Field5DeepEqual(ano.Validated) {
		return false
	}
	if !p.Field6DeepEqual(ano.Stat) {
		return false
	}
	return true
}

func (p *QueryBankCardInfoResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.CardType, src) != 0 {
		return false
	}
	return true
}
func (p *QueryBankCardInfoResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Bank, src) != 0 {
		return false
	}
	return true
}
func (p *QueryBankCardInfoResponse) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Key, src) != 0 {
		return false
	}
	return true
}
func (p *QueryBankCardInfoResponse) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Messages, src) != 0 {
		return false
	}
	return true
}
func (p *QueryBankCardInfoResponse) Field5DeepEqual(src bool) bool {

	if p.Validated != src {
		return false
	}
	return true
}
func (p *QueryBankCardInfoResponse) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Stat, src) != 0 {
		return false
	}
	return true
}

type ListBankCodeRequest struct {
	PageNum       int32  `thrift:"pageNum,1,required" frugal:"1,required,i32" json:"pageNum"`
	PageSize      int32  `thrift:"pageSize,2,required" frugal:"2,required,i32" json:"pageSize"`
	Sort          string `thrift:"sort,3" frugal:"3,default,string" json:"sort"`
	BankName      string `thrift:"bankName,4" frugal:"4,default,string" json:"bankName"`
	BankAliasName string `thrift:"bankAliasName,5" frugal:"5,default,string" json:"bankAliasName"`
}

func NewListBankCodeRequest() *ListBankCodeRequest {
	return &ListBankCodeRequest{}
}

func (p *ListBankCodeRequest) InitDefault() {
	*p = ListBankCodeRequest{}
}

func (p *ListBankCodeRequest) GetPageNum() (v int32) {
	return p.PageNum
}

func (p *ListBankCodeRequest) GetPageSize() (v int32) {
	return p.PageSize
}

func (p *ListBankCodeRequest) GetSort() (v string) {
	return p.Sort
}

func (p *ListBankCodeRequest) GetBankName() (v string) {
	return p.BankName
}

func (p *ListBankCodeRequest) GetBankAliasName() (v string) {
	return p.BankAliasName
}
func (p *ListBankCodeRequest) SetPageNum(val int32) {
	p.PageNum = val
}
func (p *ListBankCodeRequest) SetPageSize(val int32) {
	p.PageSize = val
}
func (p *ListBankCodeRequest) SetSort(val string) {
	p.Sort = val
}
func (p *ListBankCodeRequest) SetBankName(val string) {
	p.BankName = val
}
func (p *ListBankCodeRequest) SetBankAliasName(val string) {
	p.BankAliasName = val
}

var fieldIDToName_ListBankCodeRequest = map[int16]string{
	1: "pageNum",
	2: "pageSize",
	3: "sort",
	4: "bankName",
	5: "bankAliasName",
}

func (p *ListBankCodeRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPageNum bool = false
	var issetPageSize bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPageNum = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetPageSize = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPageNum {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPageSize {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListBankCodeRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListBankCodeRequest[fieldId]))
}

func (p *ListBankCodeRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.PageNum = v
	}
	return nil
}

func (p *ListBankCodeRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.PageSize = v
	}
	return nil
}

func (p *ListBankCodeRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Sort = v
	}
	return nil
}

func (p *ListBankCodeRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.BankName = v
	}
	return nil
}

func (p *ListBankCodeRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.BankAliasName = v
	}
	return nil
}

func (p *ListBankCodeRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListBankCodeRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListBankCodeRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pageNum", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.PageNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListBankCodeRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pageSize", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.PageSize); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListBankCodeRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("sort", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Sort); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ListBankCodeRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("bankName", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.BankName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ListBankCodeRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("bankAliasName", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.BankAliasName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ListBankCodeRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListBankCodeRequest(%+v)", *p)
}

func (p *ListBankCodeRequest) DeepEqual(ano *ListBankCodeRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PageNum) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field3DeepEqual(ano.Sort) {
		return false
	}
	if !p.Field4DeepEqual(ano.BankName) {
		return false
	}
	if !p.Field5DeepEqual(ano.BankAliasName) {
		return false
	}
	return true
}

func (p *ListBankCodeRequest) Field1DeepEqual(src int32) bool {

	if p.PageNum != src {
		return false
	}
	return true
}
func (p *ListBankCodeRequest) Field2DeepEqual(src int32) bool {

	if p.PageSize != src {
		return false
	}
	return true
}
func (p *ListBankCodeRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Sort, src) != 0 {
		return false
	}
	return true
}
func (p *ListBankCodeRequest) Field4DeepEqual(src string) bool {

	if strings.Compare(p.BankName, src) != 0 {
		return false
	}
	return true
}
func (p *ListBankCodeRequest) Field5DeepEqual(src string) bool {

	if strings.Compare(p.BankAliasName, src) != 0 {
		return false
	}
	return true
}

type ListBankCodeResponse struct {
	Data  []*BankCodeData `thrift:"data,1" frugal:"1,default,list<BankCodeData>" json:"data"`
	Count int64           `thrift:"count,2" frugal:"2,default,i64" json:"count"`
}

func NewListBankCodeResponse() *ListBankCodeResponse {
	return &ListBankCodeResponse{}
}

func (p *ListBankCodeResponse) InitDefault() {
	*p = ListBankCodeResponse{}
}

func (p *ListBankCodeResponse) GetData() (v []*BankCodeData) {
	return p.Data
}

func (p *ListBankCodeResponse) GetCount() (v int64) {
	return p.Count
}
func (p *ListBankCodeResponse) SetData(val []*BankCodeData) {
	p.Data = val
}
func (p *ListBankCodeResponse) SetCount(val int64) {
	p.Count = val
}

var fieldIDToName_ListBankCodeResponse = map[int16]string{
	1: "data",
	2: "count",
}

func (p *ListBankCodeResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListBankCodeResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListBankCodeResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Data = make([]*BankCodeData, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewBankCodeData()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Data = append(p.Data, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListBankCodeResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Count = v
	}
	return nil
}

func (p *ListBankCodeResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListBankCodeResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListBankCodeResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Data)); err != nil {
		return err
	}
	for _, v := range p.Data {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListBankCodeResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("count", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Count); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListBankCodeResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListBankCodeResponse(%+v)", *p)
}

func (p *ListBankCodeResponse) DeepEqual(ano *ListBankCodeResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Data) {
		return false
	}
	if !p.Field2DeepEqual(ano.Count) {
		return false
	}
	return true
}

func (p *ListBankCodeResponse) Field1DeepEqual(src []*BankCodeData) bool {

	if len(p.Data) != len(src) {
		return false
	}
	for i, v := range p.Data {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListBankCodeResponse) Field2DeepEqual(src int64) bool {

	if p.Count != src {
		return false
	}
	return true
}

type AddBankCodeRequest struct {
	BankName      string `thrift:"bankName,1" frugal:"1,default,string" json:"bankName"`
	BankAliasName string `thrift:"bankAliasName,2" frugal:"2,default,string" json:"bankAliasName"`
	UnionBankNo   string `thrift:"unionBankNo,3" frugal:"3,default,string" json:"unionBankNo"`
	ClearBankNo   string `thrift:"clearBankNo,4" frugal:"4,default,string" json:"clearBankNo"`
}

func NewAddBankCodeRequest() *AddBankCodeRequest {
	return &AddBankCodeRequest{}
}

func (p *AddBankCodeRequest) InitDefault() {
	*p = AddBankCodeRequest{}
}

func (p *AddBankCodeRequest) GetBankName() (v string) {
	return p.BankName
}

func (p *AddBankCodeRequest) GetBankAliasName() (v string) {
	return p.BankAliasName
}

func (p *AddBankCodeRequest) GetUnionBankNo() (v string) {
	return p.UnionBankNo
}

func (p *AddBankCodeRequest) GetClearBankNo() (v string) {
	return p.ClearBankNo
}
func (p *AddBankCodeRequest) SetBankName(val string) {
	p.BankName = val
}
func (p *AddBankCodeRequest) SetBankAliasName(val string) {
	p.BankAliasName = val
}
func (p *AddBankCodeRequest) SetUnionBankNo(val string) {
	p.UnionBankNo = val
}
func (p *AddBankCodeRequest) SetClearBankNo(val string) {
	p.ClearBankNo = val
}

var fieldIDToName_AddBankCodeRequest = map[int16]string{
	1: "bankName",
	2: "bankAliasName",
	3: "unionBankNo",
	4: "clearBankNo",
}

func (p *AddBankCodeRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AddBankCodeRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AddBankCodeRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.BankName = v
	}
	return nil
}

func (p *AddBankCodeRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.BankAliasName = v
	}
	return nil
}

func (p *AddBankCodeRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UnionBankNo = v
	}
	return nil
}

func (p *AddBankCodeRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClearBankNo = v
	}
	return nil
}

func (p *AddBankCodeRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddBankCodeRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AddBankCodeRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("bankName", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.BankName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AddBankCodeRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("bankAliasName", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.BankAliasName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *AddBankCodeRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("unionBankNo", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UnionBankNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *AddBankCodeRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("clearBankNo", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClearBankNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *AddBankCodeRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddBankCodeRequest(%+v)", *p)
}

func (p *AddBankCodeRequest) DeepEqual(ano *AddBankCodeRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BankName) {
		return false
	}
	if !p.Field2DeepEqual(ano.BankAliasName) {
		return false
	}
	if !p.Field3DeepEqual(ano.UnionBankNo) {
		return false
	}
	if !p.Field4DeepEqual(ano.ClearBankNo) {
		return false
	}
	return true
}

func (p *AddBankCodeRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.BankName, src) != 0 {
		return false
	}
	return true
}
func (p *AddBankCodeRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.BankAliasName, src) != 0 {
		return false
	}
	return true
}
func (p *AddBankCodeRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.UnionBankNo, src) != 0 {
		return false
	}
	return true
}
func (p *AddBankCodeRequest) Field4DeepEqual(src string) bool {

	if strings.Compare(p.ClearBankNo, src) != 0 {
		return false
	}
	return true
}

type DashboardData struct {
	DayFlowData      *ChartData `thrift:"dayFlowData,1" frugal:"1,default,ChartData" json:"dayFlowData"`
	WeekFlowData     *ChartData `thrift:"weekFlowData,2" frugal:"2,default,ChartData" json:"weekFlowData"`
	MonthFlowData    *ChartData `thrift:"monthFlowData,3" frugal:"3,default,ChartData" json:"monthFlowData"`
	WeekBalanceData  *ChartData `thrift:"weekBalanceData,4" frugal:"4,default,ChartData" json:"weekBalanceData"`
	MonthBalanceData *ChartData `thrift:"monthBalanceData,5" frugal:"5,default,ChartData" json:"monthBalanceData"`
}

func NewDashboardData() *DashboardData {
	return &DashboardData{}
}

func (p *DashboardData) InitDefault() {
	*p = DashboardData{}
}

var DashboardData_DayFlowData_DEFAULT *ChartData

func (p *DashboardData) GetDayFlowData() (v *ChartData) {
	if !p.IsSetDayFlowData() {
		return DashboardData_DayFlowData_DEFAULT
	}
	return p.DayFlowData
}

var DashboardData_WeekFlowData_DEFAULT *ChartData

func (p *DashboardData) GetWeekFlowData() (v *ChartData) {
	if !p.IsSetWeekFlowData() {
		return DashboardData_WeekFlowData_DEFAULT
	}
	return p.WeekFlowData
}

var DashboardData_MonthFlowData_DEFAULT *ChartData

func (p *DashboardData) GetMonthFlowData() (v *ChartData) {
	if !p.IsSetMonthFlowData() {
		return DashboardData_MonthFlowData_DEFAULT
	}
	return p.MonthFlowData
}

var DashboardData_WeekBalanceData_DEFAULT *ChartData

func (p *DashboardData) GetWeekBalanceData() (v *ChartData) {
	if !p.IsSetWeekBalanceData() {
		return DashboardData_WeekBalanceData_DEFAULT
	}
	return p.WeekBalanceData
}

var DashboardData_MonthBalanceData_DEFAULT *ChartData

func (p *DashboardData) GetMonthBalanceData() (v *ChartData) {
	if !p.IsSetMonthBalanceData() {
		return DashboardData_MonthBalanceData_DEFAULT
	}
	return p.MonthBalanceData
}
func (p *DashboardData) SetDayFlowData(val *ChartData) {
	p.DayFlowData = val
}
func (p *DashboardData) SetWeekFlowData(val *ChartData) {
	p.WeekFlowData = val
}
func (p *DashboardData) SetMonthFlowData(val *ChartData) {
	p.MonthFlowData = val
}
func (p *DashboardData) SetWeekBalanceData(val *ChartData) {
	p.WeekBalanceData = val
}
func (p *DashboardData) SetMonthBalanceData(val *ChartData) {
	p.MonthBalanceData = val
}

var fieldIDToName_DashboardData = map[int16]string{
	1: "dayFlowData",
	2: "weekFlowData",
	3: "monthFlowData",
	4: "weekBalanceData",
	5: "monthBalanceData",
}

func (p *DashboardData) IsSetDayFlowData() bool {
	return p.DayFlowData != nil
}

func (p *DashboardData) IsSetWeekFlowData() bool {
	return p.WeekFlowData != nil
}

func (p *DashboardData) IsSetMonthFlowData() bool {
	return p.MonthFlowData != nil
}

func (p *DashboardData) IsSetWeekBalanceData() bool {
	return p.WeekBalanceData != nil
}

func (p *DashboardData) IsSetMonthBalanceData() bool {
	return p.MonthBalanceData != nil
}

func (p *DashboardData) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DashboardData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DashboardData) ReadField1(iprot thrift.TProtocol) error {
	p.DayFlowData = NewChartData()
	if err := p.DayFlowData.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DashboardData) ReadField2(iprot thrift.TProtocol) error {
	p.WeekFlowData = NewChartData()
	if err := p.WeekFlowData.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DashboardData) ReadField3(iprot thrift.TProtocol) error {
	p.MonthFlowData = NewChartData()
	if err := p.MonthFlowData.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DashboardData) ReadField4(iprot thrift.TProtocol) error {
	p.WeekBalanceData = NewChartData()
	if err := p.WeekBalanceData.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DashboardData) ReadField5(iprot thrift.TProtocol) error {
	p.MonthBalanceData = NewChartData()
	if err := p.MonthBalanceData.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DashboardData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DashboardData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DashboardData) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("dayFlowData", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.DayFlowData.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DashboardData) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("weekFlowData", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.WeekFlowData.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DashboardData) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("monthFlowData", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.MonthFlowData.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *DashboardData) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("weekBalanceData", thrift.STRUCT, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.WeekBalanceData.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *DashboardData) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("monthBalanceData", thrift.STRUCT, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.MonthBalanceData.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *DashboardData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DashboardData(%+v)", *p)
}

func (p *DashboardData) DeepEqual(ano *DashboardData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.DayFlowData) {
		return false
	}
	if !p.Field2DeepEqual(ano.WeekFlowData) {
		return false
	}
	if !p.Field3DeepEqual(ano.MonthFlowData) {
		return false
	}
	if !p.Field4DeepEqual(ano.WeekBalanceData) {
		return false
	}
	if !p.Field5DeepEqual(ano.MonthBalanceData) {
		return false
	}
	return true
}

func (p *DashboardData) Field1DeepEqual(src *ChartData) bool {

	if !p.DayFlowData.DeepEqual(src) {
		return false
	}
	return true
}
func (p *DashboardData) Field2DeepEqual(src *ChartData) bool {

	if !p.WeekFlowData.DeepEqual(src) {
		return false
	}
	return true
}
func (p *DashboardData) Field3DeepEqual(src *ChartData) bool {

	if !p.MonthFlowData.DeepEqual(src) {
		return false
	}
	return true
}
func (p *DashboardData) Field4DeepEqual(src *ChartData) bool {

	if !p.WeekBalanceData.DeepEqual(src) {
		return false
	}
	return true
}
func (p *DashboardData) Field5DeepEqual(src *ChartData) bool {

	if !p.MonthBalanceData.DeepEqual(src) {
		return false
	}
	return true
}

type ChartData struct {
	Labels   []string        `thrift:"labels,1" frugal:"1,default,list<string>" json:"labels"`
	Datasets []*ChartDataSet `thrift:"datasets,2" frugal:"2,default,list<ChartDataSet>" json:"datasets"`
}

func NewChartData() *ChartData {
	return &ChartData{}
}

func (p *ChartData) InitDefault() {
	*p = ChartData{}
}

func (p *ChartData) GetLabels() (v []string) {
	return p.Labels
}

func (p *ChartData) GetDatasets() (v []*ChartDataSet) {
	return p.Datasets
}
func (p *ChartData) SetLabels(val []string) {
	p.Labels = val
}
func (p *ChartData) SetDatasets(val []*ChartDataSet) {
	p.Datasets = val
}

var fieldIDToName_ChartData = map[int16]string{
	1: "labels",
	2: "datasets",
}

func (p *ChartData) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ChartData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ChartData) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Labels = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Labels = append(p.Labels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ChartData) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Datasets = make([]*ChartDataSet, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewChartDataSet()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Datasets = append(p.Datasets, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ChartData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ChartData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ChartData) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("labels", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Labels)); err != nil {
		return err
	}
	for _, v := range p.Labels {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ChartData) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("datasets", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Datasets)); err != nil {
		return err
	}
	for _, v := range p.Datasets {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ChartData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChartData(%+v)", *p)
}

func (p *ChartData) DeepEqual(ano *ChartData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Labels) {
		return false
	}
	if !p.Field2DeepEqual(ano.Datasets) {
		return false
	}
	return true
}

func (p *ChartData) Field1DeepEqual(src []string) bool {

	if len(p.Labels) != len(src) {
		return false
	}
	for i, v := range p.Labels {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ChartData) Field2DeepEqual(src []*ChartDataSet) bool {

	if len(p.Datasets) != len(src) {
		return false
	}
	for i, v := range p.Datasets {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type ChartDataSet struct {
	Label                string    `thrift:"label,1" frugal:"1,default,string" json:"label"`
	Data                 []float64 `thrift:"data,2" frugal:"2,default,list<double>" json:"data"`
	BorderColor          string    `thrift:"borderColor,3" frugal:"3,default,string" json:"borderColor"`
	BackgroundColor      []string  `thrift:"backgroundColor,4" frugal:"4,default,list<string>" json:"backgroundColor"`
	HoverBackgroundColor []string  `thrift:"hoverBackgroundColor,5" frugal:"5,default,list<string>" json:"hoverBackgroundColor"`
}

func NewChartDataSet() *ChartDataSet {
	return &ChartDataSet{}
}

func (p *ChartDataSet) InitDefault() {
	*p = ChartDataSet{}
}

func (p *ChartDataSet) GetLabel() (v string) {
	return p.Label
}

func (p *ChartDataSet) GetData() (v []float64) {
	return p.Data
}

func (p *ChartDataSet) GetBorderColor() (v string) {
	return p.BorderColor
}

func (p *ChartDataSet) GetBackgroundColor() (v []string) {
	return p.BackgroundColor
}

func (p *ChartDataSet) GetHoverBackgroundColor() (v []string) {
	return p.HoverBackgroundColor
}
func (p *ChartDataSet) SetLabel(val string) {
	p.Label = val
}
func (p *ChartDataSet) SetData(val []float64) {
	p.Data = val
}
func (p *ChartDataSet) SetBorderColor(val string) {
	p.BorderColor = val
}
func (p *ChartDataSet) SetBackgroundColor(val []string) {
	p.BackgroundColor = val
}
func (p *ChartDataSet) SetHoverBackgroundColor(val []string) {
	p.HoverBackgroundColor = val
}

var fieldIDToName_ChartDataSet = map[int16]string{
	1: "label",
	2: "data",
	3: "borderColor",
	4: "backgroundColor",
	5: "hoverBackgroundColor",
}

func (p *ChartDataSet) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ChartDataSet[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ChartDataSet) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Label = v
	}
	return nil
}

func (p *ChartDataSet) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Data = make([]float64, 0, size)
	for i := 0; i < size; i++ {
		var _elem float64
		if v, err := iprot.ReadDouble(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Data = append(p.Data, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ChartDataSet) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.BorderColor = v
	}
	return nil
}

func (p *ChartDataSet) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.BackgroundColor = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.BackgroundColor = append(p.BackgroundColor, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ChartDataSet) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.HoverBackgroundColor = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.HoverBackgroundColor = append(p.HoverBackgroundColor, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ChartDataSet) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ChartDataSet"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ChartDataSet) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("label", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Label); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ChartDataSet) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.DOUBLE, len(p.Data)); err != nil {
		return err
	}
	for _, v := range p.Data {
		if err := oprot.WriteDouble(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ChartDataSet) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("borderColor", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.BorderColor); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ChartDataSet) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("backgroundColor", thrift.LIST, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.BackgroundColor)); err != nil {
		return err
	}
	for _, v := range p.BackgroundColor {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ChartDataSet) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("hoverBackgroundColor", thrift.LIST, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.HoverBackgroundColor)); err != nil {
		return err
	}
	for _, v := range p.HoverBackgroundColor {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ChartDataSet) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChartDataSet(%+v)", *p)
}

func (p *ChartDataSet) DeepEqual(ano *ChartDataSet) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Label) {
		return false
	}
	if !p.Field2DeepEqual(ano.Data) {
		return false
	}
	if !p.Field3DeepEqual(ano.BorderColor) {
		return false
	}
	if !p.Field4DeepEqual(ano.BackgroundColor) {
		return false
	}
	if !p.Field5DeepEqual(ano.HoverBackgroundColor) {
		return false
	}
	return true
}

func (p *ChartDataSet) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Label, src) != 0 {
		return false
	}
	return true
}
func (p *ChartDataSet) Field2DeepEqual(src []float64) bool {

	if len(p.Data) != len(src) {
		return false
	}
	for i, v := range p.Data {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *ChartDataSet) Field3DeepEqual(src string) bool {

	if strings.Compare(p.BorderColor, src) != 0 {
		return false
	}
	return true
}
func (p *ChartDataSet) Field4DeepEqual(src []string) bool {

	if len(p.BackgroundColor) != len(src) {
		return false
	}
	for i, v := range p.BackgroundColor {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ChartDataSet) Field5DeepEqual(src []string) bool {

	if len(p.HoverBackgroundColor) != len(src) {
		return false
	}
	for i, v := range p.HoverBackgroundColor {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type MonthChartDataRequest struct {
	Year           string `thrift:"year,1" frugal:"1,default,string" json:"year"`
	Month          string `thrift:"month,2" frugal:"2,default,string" json:"month"`
	OrganizationId int64  `thrift:"organizationId,3" frugal:"3,default,i64" json:"organizationId"`
}

func NewMonthChartDataRequest() *MonthChartDataRequest {
	return &MonthChartDataRequest{}
}

func (p *MonthChartDataRequest) InitDefault() {
	*p = MonthChartDataRequest{}
}

func (p *MonthChartDataRequest) GetYear() (v string) {
	return p.Year
}

func (p *MonthChartDataRequest) GetMonth() (v string) {
	return p.Month
}

func (p *MonthChartDataRequest) GetOrganizationId() (v int64) {
	return p.OrganizationId
}
func (p *MonthChartDataRequest) SetYear(val string) {
	p.Year = val
}
func (p *MonthChartDataRequest) SetMonth(val string) {
	p.Month = val
}
func (p *MonthChartDataRequest) SetOrganizationId(val int64) {
	p.OrganizationId = val
}

var fieldIDToName_MonthChartDataRequest = map[int16]string{
	1: "year",
	2: "month",
	3: "organizationId",
}

func (p *MonthChartDataRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MonthChartDataRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MonthChartDataRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Year = v
	}
	return nil
}

func (p *MonthChartDataRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Month = v
	}
	return nil
}

func (p *MonthChartDataRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.OrganizationId = v
	}
	return nil
}

func (p *MonthChartDataRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MonthChartDataRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MonthChartDataRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("year", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Year); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MonthChartDataRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("month", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Month); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MonthChartDataRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("organizationId", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.OrganizationId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *MonthChartDataRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MonthChartDataRequest(%+v)", *p)
}

func (p *MonthChartDataRequest) DeepEqual(ano *MonthChartDataRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Year) {
		return false
	}
	if !p.Field2DeepEqual(ano.Month) {
		return false
	}
	if !p.Field3DeepEqual(ano.OrganizationId) {
		return false
	}
	return true
}

func (p *MonthChartDataRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Year, src) != 0 {
		return false
	}
	return true
}
func (p *MonthChartDataRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Month, src) != 0 {
		return false
	}
	return true
}
func (p *MonthChartDataRequest) Field3DeepEqual(src int64) bool {

	if p.OrganizationId != src {
		return false
	}
	return true
}

type ListBusinessPayrollRequest struct {
	PageNum        int32    `thrift:"pageNum,1,required" frugal:"1,required,i32" json:"pageNum"`
	PageSize       int32    `thrift:"pageSize,2,required" frugal:"2,required,i32" json:"pageSize"`
	Sort           string   `thrift:"sort,3" frugal:"3,default,string" json:"sort"`
	PayAccountNo   string   `thrift:"pay_account_no,4" frugal:"4,default,string" json:"pay_account_no"`
	PayAccountName string   `thrift:"pay_account_name,5" frugal:"5,default,string" json:"pay_account_name"`
	Month          string   `thrift:"month,6" frugal:"6,default,string" json:"month"`
	Status         int64    `thrift:"status,7" frugal:"7,default,i64" json:"status"`
	CreateUser     int64    `thrift:"createUser,8" frugal:"8,default,i64" json:"createUser"`
	CreatedTime    []string `thrift:"createdTime,9" frugal:"9,default,list<string>" json:"createdTime"`
}

func NewListBusinessPayrollRequest() *ListBusinessPayrollRequest {
	return &ListBusinessPayrollRequest{}
}

func (p *ListBusinessPayrollRequest) InitDefault() {
	*p = ListBusinessPayrollRequest{}
}

func (p *ListBusinessPayrollRequest) GetPageNum() (v int32) {
	return p.PageNum
}

func (p *ListBusinessPayrollRequest) GetPageSize() (v int32) {
	return p.PageSize
}

func (p *ListBusinessPayrollRequest) GetSort() (v string) {
	return p.Sort
}

func (p *ListBusinessPayrollRequest) GetPayAccountNo() (v string) {
	return p.PayAccountNo
}

func (p *ListBusinessPayrollRequest) GetPayAccountName() (v string) {
	return p.PayAccountName
}

func (p *ListBusinessPayrollRequest) GetMonth() (v string) {
	return p.Month
}

func (p *ListBusinessPayrollRequest) GetStatus() (v int64) {
	return p.Status
}

func (p *ListBusinessPayrollRequest) GetCreateUser() (v int64) {
	return p.CreateUser
}

func (p *ListBusinessPayrollRequest) GetCreatedTime() (v []string) {
	return p.CreatedTime
}
func (p *ListBusinessPayrollRequest) SetPageNum(val int32) {
	p.PageNum = val
}
func (p *ListBusinessPayrollRequest) SetPageSize(val int32) {
	p.PageSize = val
}
func (p *ListBusinessPayrollRequest) SetSort(val string) {
	p.Sort = val
}
func (p *ListBusinessPayrollRequest) SetPayAccountNo(val string) {
	p.PayAccountNo = val
}
func (p *ListBusinessPayrollRequest) SetPayAccountName(val string) {
	p.PayAccountName = val
}
func (p *ListBusinessPayrollRequest) SetMonth(val string) {
	p.Month = val
}
func (p *ListBusinessPayrollRequest) SetStatus(val int64) {
	p.Status = val
}
func (p *ListBusinessPayrollRequest) SetCreateUser(val int64) {
	p.CreateUser = val
}
func (p *ListBusinessPayrollRequest) SetCreatedTime(val []string) {
	p.CreatedTime = val
}

var fieldIDToName_ListBusinessPayrollRequest = map[int16]string{
	1: "pageNum",
	2: "pageSize",
	3: "sort",
	4: "pay_account_no",
	5: "pay_account_name",
	6: "month",
	7: "status",
	8: "createUser",
	9: "createdTime",
}

func (p *ListBusinessPayrollRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPageNum bool = false
	var issetPageSize bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPageNum = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetPageSize = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPageNum {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPageSize {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListBusinessPayrollRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListBusinessPayrollRequest[fieldId]))
}

func (p *ListBusinessPayrollRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.PageNum = v
	}
	return nil
}

func (p *ListBusinessPayrollRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.PageSize = v
	}
	return nil
}

func (p *ListBusinessPayrollRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Sort = v
	}
	return nil
}

func (p *ListBusinessPayrollRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PayAccountNo = v
	}
	return nil
}

func (p *ListBusinessPayrollRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PayAccountName = v
	}
	return nil
}

func (p *ListBusinessPayrollRequest) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Month = v
	}
	return nil
}

func (p *ListBusinessPayrollRequest) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Status = v
	}
	return nil
}

func (p *ListBusinessPayrollRequest) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.CreateUser = v
	}
	return nil
}

func (p *ListBusinessPayrollRequest) ReadField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.CreatedTime = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.CreatedTime = append(p.CreatedTime, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListBusinessPayrollRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListBusinessPayrollRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListBusinessPayrollRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pageNum", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.PageNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListBusinessPayrollRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pageSize", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.PageSize); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListBusinessPayrollRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("sort", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Sort); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ListBusinessPayrollRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pay_account_no", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PayAccountNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ListBusinessPayrollRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pay_account_name", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PayAccountName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ListBusinessPayrollRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("month", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Month); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ListBusinessPayrollRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.I64, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ListBusinessPayrollRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("createUser", thrift.I64, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.CreateUser); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ListBusinessPayrollRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("createdTime", thrift.LIST, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.CreatedTime)); err != nil {
		return err
	}
	for _, v := range p.CreatedTime {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ListBusinessPayrollRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListBusinessPayrollRequest(%+v)", *p)
}

func (p *ListBusinessPayrollRequest) DeepEqual(ano *ListBusinessPayrollRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PageNum) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field3DeepEqual(ano.Sort) {
		return false
	}
	if !p.Field4DeepEqual(ano.PayAccountNo) {
		return false
	}
	if !p.Field5DeepEqual(ano.PayAccountName) {
		return false
	}
	if !p.Field6DeepEqual(ano.Month) {
		return false
	}
	if !p.Field7DeepEqual(ano.Status) {
		return false
	}
	if !p.Field8DeepEqual(ano.CreateUser) {
		return false
	}
	if !p.Field9DeepEqual(ano.CreatedTime) {
		return false
	}
	return true
}

func (p *ListBusinessPayrollRequest) Field1DeepEqual(src int32) bool {

	if p.PageNum != src {
		return false
	}
	return true
}
func (p *ListBusinessPayrollRequest) Field2DeepEqual(src int32) bool {

	if p.PageSize != src {
		return false
	}
	return true
}
func (p *ListBusinessPayrollRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Sort, src) != 0 {
		return false
	}
	return true
}
func (p *ListBusinessPayrollRequest) Field4DeepEqual(src string) bool {

	if strings.Compare(p.PayAccountNo, src) != 0 {
		return false
	}
	return true
}
func (p *ListBusinessPayrollRequest) Field5DeepEqual(src string) bool {

	if strings.Compare(p.PayAccountName, src) != 0 {
		return false
	}
	return true
}
func (p *ListBusinessPayrollRequest) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Month, src) != 0 {
		return false
	}
	return true
}
func (p *ListBusinessPayrollRequest) Field7DeepEqual(src int64) bool {

	if p.Status != src {
		return false
	}
	return true
}
func (p *ListBusinessPayrollRequest) Field8DeepEqual(src int64) bool {

	if p.CreateUser != src {
		return false
	}
	return true
}
func (p *ListBusinessPayrollRequest) Field9DeepEqual(src []string) bool {

	if len(p.CreatedTime) != len(src) {
		return false
	}
	for i, v := range p.CreatedTime {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type ListBusinessPayrollResponse struct {
	Data  []*BusinessPayrollListVo `thrift:"data,1" frugal:"1,default,list<BusinessPayrollListVo>" json:"data"`
	Count int64                    `thrift:"count,2" frugal:"2,default,i64" json:"count"`
}

func NewListBusinessPayrollResponse() *ListBusinessPayrollResponse {
	return &ListBusinessPayrollResponse{}
}

func (p *ListBusinessPayrollResponse) InitDefault() {
	*p = ListBusinessPayrollResponse{}
}

func (p *ListBusinessPayrollResponse) GetData() (v []*BusinessPayrollListVo) {
	return p.Data
}

func (p *ListBusinessPayrollResponse) GetCount() (v int64) {
	return p.Count
}
func (p *ListBusinessPayrollResponse) SetData(val []*BusinessPayrollListVo) {
	p.Data = val
}
func (p *ListBusinessPayrollResponse) SetCount(val int64) {
	p.Count = val
}

var fieldIDToName_ListBusinessPayrollResponse = map[int16]string{
	1: "data",
	2: "count",
}

func (p *ListBusinessPayrollResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListBusinessPayrollResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListBusinessPayrollResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Data = make([]*BusinessPayrollListVo, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewBusinessPayrollListVo()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Data = append(p.Data, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListBusinessPayrollResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Count = v
	}
	return nil
}

func (p *ListBusinessPayrollResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListBusinessPayrollResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListBusinessPayrollResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Data)); err != nil {
		return err
	}
	for _, v := range p.Data {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListBusinessPayrollResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("count", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Count); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListBusinessPayrollResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListBusinessPayrollResponse(%+v)", *p)
}

func (p *ListBusinessPayrollResponse) DeepEqual(ano *ListBusinessPayrollResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Data) {
		return false
	}
	if !p.Field2DeepEqual(ano.Count) {
		return false
	}
	return true
}

func (p *ListBusinessPayrollResponse) Field1DeepEqual(src []*BusinessPayrollListVo) bool {

	if len(p.Data) != len(src) {
		return false
	}
	for i, v := range p.Data {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListBusinessPayrollResponse) Field2DeepEqual(src int64) bool {

	if p.Count != src {
		return false
	}
	return true
}

type BusinessPayrollListVo struct {
	Id             int64   `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	Name           string  `thrift:"name,2" frugal:"2,default,string" json:"name"`
	PayAccountNo   string  `thrift:"payAccountNo,3" frugal:"3,default,string" json:"payAccountNo"`
	Month          string  `thrift:"month,4" frugal:"4,default,string" json:"month"`
	Remark         string  `thrift:"remark,5" frugal:"5,default,string" json:"remark"`
	TotalCount     int64   `thrift:"totalCount,6" frugal:"6,default,i64" json:"totalCount"`
	Status         int64   `thrift:"status,7" frugal:"7,default,i64" json:"status"`
	CreatedUser    string  `thrift:"createdUser,8" frugal:"8,default,string" json:"createdUser"`
	CreatedAt      string  `thrift:"createdAt,9" frugal:"9,default,string" json:"createdAt"`
	PayAccountName string  `thrift:"payAccountName,10" frugal:"10,default,string" json:"payAccountName"`
	State          string  `thrift:"state,11" frugal:"11,default,string" json:"state"`
	Msg            string  `thrift:"msg,12" frugal:"12,default,string" json:"msg"`
	SubmitTime     string  `thrift:"submitTime,13" frugal:"13,default,string" json:"submitTime"`
	TotalAmount    float64 `thrift:"totalAmount,14" frugal:"14,default,double" json:"totalAmount"`
}

func NewBusinessPayrollListVo() *BusinessPayrollListVo {
	return &BusinessPayrollListVo{}
}

func (p *BusinessPayrollListVo) InitDefault() {
	*p = BusinessPayrollListVo{}
}

func (p *BusinessPayrollListVo) GetId() (v int64) {
	return p.Id
}

func (p *BusinessPayrollListVo) GetName() (v string) {
	return p.Name
}

func (p *BusinessPayrollListVo) GetPayAccountNo() (v string) {
	return p.PayAccountNo
}

func (p *BusinessPayrollListVo) GetMonth() (v string) {
	return p.Month
}

func (p *BusinessPayrollListVo) GetRemark() (v string) {
	return p.Remark
}

func (p *BusinessPayrollListVo) GetTotalCount() (v int64) {
	return p.TotalCount
}

func (p *BusinessPayrollListVo) GetStatus() (v int64) {
	return p.Status
}

func (p *BusinessPayrollListVo) GetCreatedUser() (v string) {
	return p.CreatedUser
}

func (p *BusinessPayrollListVo) GetCreatedAt() (v string) {
	return p.CreatedAt
}

func (p *BusinessPayrollListVo) GetPayAccountName() (v string) {
	return p.PayAccountName
}

func (p *BusinessPayrollListVo) GetState() (v string) {
	return p.State
}

func (p *BusinessPayrollListVo) GetMsg() (v string) {
	return p.Msg
}

func (p *BusinessPayrollListVo) GetSubmitTime() (v string) {
	return p.SubmitTime
}

func (p *BusinessPayrollListVo) GetTotalAmount() (v float64) {
	return p.TotalAmount
}
func (p *BusinessPayrollListVo) SetId(val int64) {
	p.Id = val
}
func (p *BusinessPayrollListVo) SetName(val string) {
	p.Name = val
}
func (p *BusinessPayrollListVo) SetPayAccountNo(val string) {
	p.PayAccountNo = val
}
func (p *BusinessPayrollListVo) SetMonth(val string) {
	p.Month = val
}
func (p *BusinessPayrollListVo) SetRemark(val string) {
	p.Remark = val
}
func (p *BusinessPayrollListVo) SetTotalCount(val int64) {
	p.TotalCount = val
}
func (p *BusinessPayrollListVo) SetStatus(val int64) {
	p.Status = val
}
func (p *BusinessPayrollListVo) SetCreatedUser(val string) {
	p.CreatedUser = val
}
func (p *BusinessPayrollListVo) SetCreatedAt(val string) {
	p.CreatedAt = val
}
func (p *BusinessPayrollListVo) SetPayAccountName(val string) {
	p.PayAccountName = val
}
func (p *BusinessPayrollListVo) SetState(val string) {
	p.State = val
}
func (p *BusinessPayrollListVo) SetMsg(val string) {
	p.Msg = val
}
func (p *BusinessPayrollListVo) SetSubmitTime(val string) {
	p.SubmitTime = val
}
func (p *BusinessPayrollListVo) SetTotalAmount(val float64) {
	p.TotalAmount = val
}

var fieldIDToName_BusinessPayrollListVo = map[int16]string{
	1:  "id",
	2:  "name",
	3:  "payAccountNo",
	4:  "month",
	5:  "remark",
	6:  "totalCount",
	7:  "status",
	8:  "createdUser",
	9:  "createdAt",
	10: "payAccountName",
	11: "state",
	12: "msg",
	13: "submitTime",
	14: "totalAmount",
}

func (p *BusinessPayrollListVo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BusinessPayrollListVo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BusinessPayrollListVo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *BusinessPayrollListVo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *BusinessPayrollListVo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PayAccountNo = v
	}
	return nil
}

func (p *BusinessPayrollListVo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Month = v
	}
	return nil
}

func (p *BusinessPayrollListVo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Remark = v
	}
	return nil
}

func (p *BusinessPayrollListVo) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.TotalCount = v
	}
	return nil
}

func (p *BusinessPayrollListVo) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Status = v
	}
	return nil
}

func (p *BusinessPayrollListVo) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CreatedUser = v
	}
	return nil
}

func (p *BusinessPayrollListVo) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CreatedAt = v
	}
	return nil
}

func (p *BusinessPayrollListVo) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PayAccountName = v
	}
	return nil
}

func (p *BusinessPayrollListVo) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.State = v
	}
	return nil
}

func (p *BusinessPayrollListVo) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Msg = v
	}
	return nil
}

func (p *BusinessPayrollListVo) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.SubmitTime = v
	}
	return nil
}

func (p *BusinessPayrollListVo) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		p.TotalAmount = v
	}
	return nil
}

func (p *BusinessPayrollListVo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BusinessPayrollListVo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BusinessPayrollListVo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BusinessPayrollListVo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BusinessPayrollListVo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("payAccountNo", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PayAccountNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *BusinessPayrollListVo) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("month", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Month); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *BusinessPayrollListVo) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("remark", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Remark); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *BusinessPayrollListVo) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("totalCount", thrift.I64, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TotalCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *BusinessPayrollListVo) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.I64, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *BusinessPayrollListVo) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("createdUser", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreatedUser); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *BusinessPayrollListVo) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("createdAt", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *BusinessPayrollListVo) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("payAccountName", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PayAccountName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *BusinessPayrollListVo) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("state", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.State); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *BusinessPayrollListVo) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("msg", thrift.STRING, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Msg); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *BusinessPayrollListVo) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("submitTime", thrift.STRING, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.SubmitTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *BusinessPayrollListVo) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("totalAmount", thrift.DOUBLE, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.TotalAmount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *BusinessPayrollListVo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BusinessPayrollListVo(%+v)", *p)
}

func (p *BusinessPayrollListVo) DeepEqual(ano *BusinessPayrollListVo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.PayAccountNo) {
		return false
	}
	if !p.Field4DeepEqual(ano.Month) {
		return false
	}
	if !p.Field5DeepEqual(ano.Remark) {
		return false
	}
	if !p.Field6DeepEqual(ano.TotalCount) {
		return false
	}
	if !p.Field7DeepEqual(ano.Status) {
		return false
	}
	if !p.Field8DeepEqual(ano.CreatedUser) {
		return false
	}
	if !p.Field9DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field10DeepEqual(ano.PayAccountName) {
		return false
	}
	if !p.Field11DeepEqual(ano.State) {
		return false
	}
	if !p.Field12DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field13DeepEqual(ano.SubmitTime) {
		return false
	}
	if !p.Field14DeepEqual(ano.TotalAmount) {
		return false
	}
	return true
}

func (p *BusinessPayrollListVo) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *BusinessPayrollListVo) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *BusinessPayrollListVo) Field3DeepEqual(src string) bool {

	if strings.Compare(p.PayAccountNo, src) != 0 {
		return false
	}
	return true
}
func (p *BusinessPayrollListVo) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Month, src) != 0 {
		return false
	}
	return true
}
func (p *BusinessPayrollListVo) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Remark, src) != 0 {
		return false
	}
	return true
}
func (p *BusinessPayrollListVo) Field6DeepEqual(src int64) bool {

	if p.TotalCount != src {
		return false
	}
	return true
}
func (p *BusinessPayrollListVo) Field7DeepEqual(src int64) bool {

	if p.Status != src {
		return false
	}
	return true
}
func (p *BusinessPayrollListVo) Field8DeepEqual(src string) bool {

	if strings.Compare(p.CreatedUser, src) != 0 {
		return false
	}
	return true
}
func (p *BusinessPayrollListVo) Field9DeepEqual(src string) bool {

	if strings.Compare(p.CreatedAt, src) != 0 {
		return false
	}
	return true
}
func (p *BusinessPayrollListVo) Field10DeepEqual(src string) bool {

	if strings.Compare(p.PayAccountName, src) != 0 {
		return false
	}
	return true
}
func (p *BusinessPayrollListVo) Field11DeepEqual(src string) bool {

	if strings.Compare(p.State, src) != 0 {
		return false
	}
	return true
}
func (p *BusinessPayrollListVo) Field12DeepEqual(src string) bool {

	if strings.Compare(p.Msg, src) != 0 {
		return false
	}
	return true
}
func (p *BusinessPayrollListVo) Field13DeepEqual(src string) bool {

	if strings.Compare(p.SubmitTime, src) != 0 {
		return false
	}
	return true
}
func (p *BusinessPayrollListVo) Field14DeepEqual(src float64) bool {

	if p.TotalAmount != src {
		return false
	}
	return true
}

type CreateBusinessPayrollRequest struct {
	PayAccountNo   string  `thrift:"payAccountNo,1" frugal:"1,default,string" json:"payAccountNo"`
	PayAccountName string  `thrift:"payAccountName,2" frugal:"2,default,string" json:"payAccountName"`
	Month          string  `thrift:"month,3" frugal:"3,default,string" json:"month"`
	Remark         string  `thrift:"remark,4" frugal:"4,default,string" json:"remark"`
	Count          int64   `thrift:"count,5" frugal:"5,default,i64" json:"count"`
	TotalMoney     float64 `thrift:"totalMoney,6" frugal:"6,default,double" json:"totalMoney"`
	CreatedUserId  int64   `thrift:"createdUserId,7" frugal:"7,default,i64" json:"createdUserId"`
	FileBytes      []byte  `thrift:"fileBytes,8" frugal:"8,default,binary" json:"fileBytes"`
}

func NewCreateBusinessPayrollRequest() *CreateBusinessPayrollRequest {
	return &CreateBusinessPayrollRequest{}
}

func (p *CreateBusinessPayrollRequest) InitDefault() {
	*p = CreateBusinessPayrollRequest{}
}

func (p *CreateBusinessPayrollRequest) GetPayAccountNo() (v string) {
	return p.PayAccountNo
}

func (p *CreateBusinessPayrollRequest) GetPayAccountName() (v string) {
	return p.PayAccountName
}

func (p *CreateBusinessPayrollRequest) GetMonth() (v string) {
	return p.Month
}

func (p *CreateBusinessPayrollRequest) GetRemark() (v string) {
	return p.Remark
}

func (p *CreateBusinessPayrollRequest) GetCount() (v int64) {
	return p.Count
}

func (p *CreateBusinessPayrollRequest) GetTotalMoney() (v float64) {
	return p.TotalMoney
}

func (p *CreateBusinessPayrollRequest) GetCreatedUserId() (v int64) {
	return p.CreatedUserId
}

func (p *CreateBusinessPayrollRequest) GetFileBytes() (v []byte) {
	return p.FileBytes
}
func (p *CreateBusinessPayrollRequest) SetPayAccountNo(val string) {
	p.PayAccountNo = val
}
func (p *CreateBusinessPayrollRequest) SetPayAccountName(val string) {
	p.PayAccountName = val
}
func (p *CreateBusinessPayrollRequest) SetMonth(val string) {
	p.Month = val
}
func (p *CreateBusinessPayrollRequest) SetRemark(val string) {
	p.Remark = val
}
func (p *CreateBusinessPayrollRequest) SetCount(val int64) {
	p.Count = val
}
func (p *CreateBusinessPayrollRequest) SetTotalMoney(val float64) {
	p.TotalMoney = val
}
func (p *CreateBusinessPayrollRequest) SetCreatedUserId(val int64) {
	p.CreatedUserId = val
}
func (p *CreateBusinessPayrollRequest) SetFileBytes(val []byte) {
	p.FileBytes = val
}

var fieldIDToName_CreateBusinessPayrollRequest = map[int16]string{
	1: "payAccountNo",
	2: "payAccountName",
	3: "month",
	4: "remark",
	5: "count",
	6: "totalMoney",
	7: "createdUserId",
	8: "fileBytes",
}

func (p *CreateBusinessPayrollRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateBusinessPayrollRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateBusinessPayrollRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PayAccountNo = v
	}
	return nil
}

func (p *CreateBusinessPayrollRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PayAccountName = v
	}
	return nil
}

func (p *CreateBusinessPayrollRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Month = v
	}
	return nil
}

func (p *CreateBusinessPayrollRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Remark = v
	}
	return nil
}

func (p *CreateBusinessPayrollRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Count = v
	}
	return nil
}

func (p *CreateBusinessPayrollRequest) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		p.TotalMoney = v
	}
	return nil
}

func (p *CreateBusinessPayrollRequest) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.CreatedUserId = v
	}
	return nil
}

func (p *CreateBusinessPayrollRequest) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		p.FileBytes = []byte(v)
	}
	return nil
}

func (p *CreateBusinessPayrollRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateBusinessPayrollRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateBusinessPayrollRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("payAccountNo", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PayAccountNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateBusinessPayrollRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("payAccountName", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PayAccountName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateBusinessPayrollRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("month", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Month); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreateBusinessPayrollRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("remark", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Remark); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CreateBusinessPayrollRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("count", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Count); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CreateBusinessPayrollRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("totalMoney", thrift.DOUBLE, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.TotalMoney); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CreateBusinessPayrollRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("createdUserId", thrift.I64, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.CreatedUserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *CreateBusinessPayrollRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("fileBytes", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.FileBytes)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *CreateBusinessPayrollRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateBusinessPayrollRequest(%+v)", *p)
}

func (p *CreateBusinessPayrollRequest) DeepEqual(ano *CreateBusinessPayrollRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PayAccountNo) {
		return false
	}
	if !p.Field2DeepEqual(ano.PayAccountName) {
		return false
	}
	if !p.Field3DeepEqual(ano.Month) {
		return false
	}
	if !p.Field4DeepEqual(ano.Remark) {
		return false
	}
	if !p.Field5DeepEqual(ano.Count) {
		return false
	}
	if !p.Field6DeepEqual(ano.TotalMoney) {
		return false
	}
	if !p.Field7DeepEqual(ano.CreatedUserId) {
		return false
	}
	if !p.Field8DeepEqual(ano.FileBytes) {
		return false
	}
	return true
}

func (p *CreateBusinessPayrollRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.PayAccountNo, src) != 0 {
		return false
	}
	return true
}
func (p *CreateBusinessPayrollRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.PayAccountName, src) != 0 {
		return false
	}
	return true
}
func (p *CreateBusinessPayrollRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Month, src) != 0 {
		return false
	}
	return true
}
func (p *CreateBusinessPayrollRequest) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Remark, src) != 0 {
		return false
	}
	return true
}
func (p *CreateBusinessPayrollRequest) Field5DeepEqual(src int64) bool {

	if p.Count != src {
		return false
	}
	return true
}
func (p *CreateBusinessPayrollRequest) Field6DeepEqual(src float64) bool {

	if p.TotalMoney != src {
		return false
	}
	return true
}
func (p *CreateBusinessPayrollRequest) Field7DeepEqual(src int64) bool {

	if p.CreatedUserId != src {
		return false
	}
	return true
}
func (p *CreateBusinessPayrollRequest) Field8DeepEqual(src []byte) bool {

	if bytes.Compare(p.FileBytes, src) != 0 {
		return false
	}
	return true
}

type ListBusinessPayrollDetailRequest struct {
	PageNum        int32  `thrift:"pageNum,1,required" frugal:"1,required,i32" json:"pageNum"`
	PageSize       int32  `thrift:"pageSize,2,required" frugal:"2,required,i32" json:"pageSize"`
	Sort           string `thrift:"sort,3" frugal:"3,default,string" json:"sort"`
	BatchId        int64  `thrift:"batchId,4" frugal:"4,default,i64" json:"batchId"`
	Num            string `thrift:"num,5" frugal:"5,default,string" json:"num"`
	Month          string `thrift:"month,6" frugal:"6,default,string" json:"month"`
	RecAccountName string `thrift:"recAccountName,7" frugal:"7,default,string" json:"recAccountName"`
	RecAccountNo   string `thrift:"recAccountNo,8" frugal:"8,default,string" json:"recAccountNo"`
}

func NewListBusinessPayrollDetailRequest() *ListBusinessPayrollDetailRequest {
	return &ListBusinessPayrollDetailRequest{}
}

func (p *ListBusinessPayrollDetailRequest) InitDefault() {
	*p = ListBusinessPayrollDetailRequest{}
}

func (p *ListBusinessPayrollDetailRequest) GetPageNum() (v int32) {
	return p.PageNum
}

func (p *ListBusinessPayrollDetailRequest) GetPageSize() (v int32) {
	return p.PageSize
}

func (p *ListBusinessPayrollDetailRequest) GetSort() (v string) {
	return p.Sort
}

func (p *ListBusinessPayrollDetailRequest) GetBatchId() (v int64) {
	return p.BatchId
}

func (p *ListBusinessPayrollDetailRequest) GetNum() (v string) {
	return p.Num
}

func (p *ListBusinessPayrollDetailRequest) GetMonth() (v string) {
	return p.Month
}

func (p *ListBusinessPayrollDetailRequest) GetRecAccountName() (v string) {
	return p.RecAccountName
}

func (p *ListBusinessPayrollDetailRequest) GetRecAccountNo() (v string) {
	return p.RecAccountNo
}
func (p *ListBusinessPayrollDetailRequest) SetPageNum(val int32) {
	p.PageNum = val
}
func (p *ListBusinessPayrollDetailRequest) SetPageSize(val int32) {
	p.PageSize = val
}
func (p *ListBusinessPayrollDetailRequest) SetSort(val string) {
	p.Sort = val
}
func (p *ListBusinessPayrollDetailRequest) SetBatchId(val int64) {
	p.BatchId = val
}
func (p *ListBusinessPayrollDetailRequest) SetNum(val string) {
	p.Num = val
}
func (p *ListBusinessPayrollDetailRequest) SetMonth(val string) {
	p.Month = val
}
func (p *ListBusinessPayrollDetailRequest) SetRecAccountName(val string) {
	p.RecAccountName = val
}
func (p *ListBusinessPayrollDetailRequest) SetRecAccountNo(val string) {
	p.RecAccountNo = val
}

var fieldIDToName_ListBusinessPayrollDetailRequest = map[int16]string{
	1: "pageNum",
	2: "pageSize",
	3: "sort",
	4: "batchId",
	5: "num",
	6: "month",
	7: "recAccountName",
	8: "recAccountNo",
}

func (p *ListBusinessPayrollDetailRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPageNum bool = false
	var issetPageSize bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPageNum = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetPageSize = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPageNum {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPageSize {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListBusinessPayrollDetailRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListBusinessPayrollDetailRequest[fieldId]))
}

func (p *ListBusinessPayrollDetailRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.PageNum = v
	}
	return nil
}

func (p *ListBusinessPayrollDetailRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.PageSize = v
	}
	return nil
}

func (p *ListBusinessPayrollDetailRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Sort = v
	}
	return nil
}

func (p *ListBusinessPayrollDetailRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.BatchId = v
	}
	return nil
}

func (p *ListBusinessPayrollDetailRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Num = v
	}
	return nil
}

func (p *ListBusinessPayrollDetailRequest) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Month = v
	}
	return nil
}

func (p *ListBusinessPayrollDetailRequest) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.RecAccountName = v
	}
	return nil
}

func (p *ListBusinessPayrollDetailRequest) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.RecAccountNo = v
	}
	return nil
}

func (p *ListBusinessPayrollDetailRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListBusinessPayrollDetailRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListBusinessPayrollDetailRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pageNum", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.PageNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListBusinessPayrollDetailRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pageSize", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.PageSize); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListBusinessPayrollDetailRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("sort", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Sort); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ListBusinessPayrollDetailRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("batchId", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.BatchId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ListBusinessPayrollDetailRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("num", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Num); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ListBusinessPayrollDetailRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("month", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Month); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ListBusinessPayrollDetailRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("recAccountName", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.RecAccountName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ListBusinessPayrollDetailRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("recAccountNo", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.RecAccountNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ListBusinessPayrollDetailRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListBusinessPayrollDetailRequest(%+v)", *p)
}

func (p *ListBusinessPayrollDetailRequest) DeepEqual(ano *ListBusinessPayrollDetailRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PageNum) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field3DeepEqual(ano.Sort) {
		return false
	}
	if !p.Field4DeepEqual(ano.BatchId) {
		return false
	}
	if !p.Field5DeepEqual(ano.Num) {
		return false
	}
	if !p.Field6DeepEqual(ano.Month) {
		return false
	}
	if !p.Field7DeepEqual(ano.RecAccountName) {
		return false
	}
	if !p.Field8DeepEqual(ano.RecAccountNo) {
		return false
	}
	return true
}

func (p *ListBusinessPayrollDetailRequest) Field1DeepEqual(src int32) bool {

	if p.PageNum != src {
		return false
	}
	return true
}
func (p *ListBusinessPayrollDetailRequest) Field2DeepEqual(src int32) bool {

	if p.PageSize != src {
		return false
	}
	return true
}
func (p *ListBusinessPayrollDetailRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Sort, src) != 0 {
		return false
	}
	return true
}
func (p *ListBusinessPayrollDetailRequest) Field4DeepEqual(src int64) bool {

	if p.BatchId != src {
		return false
	}
	return true
}
func (p *ListBusinessPayrollDetailRequest) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Num, src) != 0 {
		return false
	}
	return true
}
func (p *ListBusinessPayrollDetailRequest) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Month, src) != 0 {
		return false
	}
	return true
}
func (p *ListBusinessPayrollDetailRequest) Field7DeepEqual(src string) bool {

	if strings.Compare(p.RecAccountName, src) != 0 {
		return false
	}
	return true
}
func (p *ListBusinessPayrollDetailRequest) Field8DeepEqual(src string) bool {

	if strings.Compare(p.RecAccountNo, src) != 0 {
		return false
	}
	return true
}

type ListBusinessPayrollDetailResponse struct {
	Data  []*BusinessPayrollDetailListVo `thrift:"data,1" frugal:"1,default,list<BusinessPayrollDetailListVo>" json:"data"`
	Count int64                          `thrift:"count,2" frugal:"2,default,i64" json:"count"`
}

func NewListBusinessPayrollDetailResponse() *ListBusinessPayrollDetailResponse {
	return &ListBusinessPayrollDetailResponse{}
}

func (p *ListBusinessPayrollDetailResponse) InitDefault() {
	*p = ListBusinessPayrollDetailResponse{}
}

func (p *ListBusinessPayrollDetailResponse) GetData() (v []*BusinessPayrollDetailListVo) {
	return p.Data
}

func (p *ListBusinessPayrollDetailResponse) GetCount() (v int64) {
	return p.Count
}
func (p *ListBusinessPayrollDetailResponse) SetData(val []*BusinessPayrollDetailListVo) {
	p.Data = val
}
func (p *ListBusinessPayrollDetailResponse) SetCount(val int64) {
	p.Count = val
}

var fieldIDToName_ListBusinessPayrollDetailResponse = map[int16]string{
	1: "data",
	2: "count",
}

func (p *ListBusinessPayrollDetailResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListBusinessPayrollDetailResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListBusinessPayrollDetailResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Data = make([]*BusinessPayrollDetailListVo, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewBusinessPayrollDetailListVo()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Data = append(p.Data, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListBusinessPayrollDetailResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Count = v
	}
	return nil
}

func (p *ListBusinessPayrollDetailResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListBusinessPayrollDetailResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListBusinessPayrollDetailResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Data)); err != nil {
		return err
	}
	for _, v := range p.Data {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListBusinessPayrollDetailResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("count", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Count); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListBusinessPayrollDetailResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListBusinessPayrollDetailResponse(%+v)", *p)
}

func (p *ListBusinessPayrollDetailResponse) DeepEqual(ano *ListBusinessPayrollDetailResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Data) {
		return false
	}
	if !p.Field2DeepEqual(ano.Count) {
		return false
	}
	return true
}

func (p *ListBusinessPayrollDetailResponse) Field1DeepEqual(src []*BusinessPayrollDetailListVo) bool {

	if len(p.Data) != len(src) {
		return false
	}
	for i, v := range p.Data {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListBusinessPayrollDetailResponse) Field2DeepEqual(src int64) bool {

	if p.Count != src {
		return false
	}
	return true
}

type BusinessPayrollDetailListVo struct {
	Id             int64   `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	BatchId        int64   `thrift:"batchId,2" frugal:"2,default,i64" json:"batchId"`
	RecAccountName string  `thrift:"recAccountName,3" frugal:"3,default,string" json:"recAccountName"`
	RecAccountNo   string  `thrift:"recAccountNo,4" frugal:"4,default,string" json:"recAccountNo"`
	Amount         float64 `thrift:"amount,5" frugal:"5,default,double" json:"amount"`
	Month          string  `thrift:"month,6" frugal:"6,default,string" json:"month"`
	OrderState     string  `thrift:"orderState,7" frugal:"7,default,string" json:"orderState"`
	ErrorMessage   string  `thrift:"errorMessage,8" frugal:"8,default,string" json:"errorMessage"`
	Num            string  `thrift:"num,9" frugal:"9,default,string" json:"num"`
	ErrorCode      string  `thrift:"errorCode,10" frugal:"10,default,string" json:"errorCode"`
	Remark         string  `thrift:"remark,11" frugal:"11,default,string" json:"remark"`
}

func NewBusinessPayrollDetailListVo() *BusinessPayrollDetailListVo {
	return &BusinessPayrollDetailListVo{}
}

func (p *BusinessPayrollDetailListVo) InitDefault() {
	*p = BusinessPayrollDetailListVo{}
}

func (p *BusinessPayrollDetailListVo) GetId() (v int64) {
	return p.Id
}

func (p *BusinessPayrollDetailListVo) GetBatchId() (v int64) {
	return p.BatchId
}

func (p *BusinessPayrollDetailListVo) GetRecAccountName() (v string) {
	return p.RecAccountName
}

func (p *BusinessPayrollDetailListVo) GetRecAccountNo() (v string) {
	return p.RecAccountNo
}

func (p *BusinessPayrollDetailListVo) GetAmount() (v float64) {
	return p.Amount
}

func (p *BusinessPayrollDetailListVo) GetMonth() (v string) {
	return p.Month
}

func (p *BusinessPayrollDetailListVo) GetOrderState() (v string) {
	return p.OrderState
}

func (p *BusinessPayrollDetailListVo) GetErrorMessage() (v string) {
	return p.ErrorMessage
}

func (p *BusinessPayrollDetailListVo) GetNum() (v string) {
	return p.Num
}

func (p *BusinessPayrollDetailListVo) GetErrorCode() (v string) {
	return p.ErrorCode
}

func (p *BusinessPayrollDetailListVo) GetRemark() (v string) {
	return p.Remark
}
func (p *BusinessPayrollDetailListVo) SetId(val int64) {
	p.Id = val
}
func (p *BusinessPayrollDetailListVo) SetBatchId(val int64) {
	p.BatchId = val
}
func (p *BusinessPayrollDetailListVo) SetRecAccountName(val string) {
	p.RecAccountName = val
}
func (p *BusinessPayrollDetailListVo) SetRecAccountNo(val string) {
	p.RecAccountNo = val
}
func (p *BusinessPayrollDetailListVo) SetAmount(val float64) {
	p.Amount = val
}
func (p *BusinessPayrollDetailListVo) SetMonth(val string) {
	p.Month = val
}
func (p *BusinessPayrollDetailListVo) SetOrderState(val string) {
	p.OrderState = val
}
func (p *BusinessPayrollDetailListVo) SetErrorMessage(val string) {
	p.ErrorMessage = val
}
func (p *BusinessPayrollDetailListVo) SetNum(val string) {
	p.Num = val
}
func (p *BusinessPayrollDetailListVo) SetErrorCode(val string) {
	p.ErrorCode = val
}
func (p *BusinessPayrollDetailListVo) SetRemark(val string) {
	p.Remark = val
}

var fieldIDToName_BusinessPayrollDetailListVo = map[int16]string{
	1:  "id",
	2:  "batchId",
	3:  "recAccountName",
	4:  "recAccountNo",
	5:  "amount",
	6:  "month",
	7:  "orderState",
	8:  "errorMessage",
	9:  "num",
	10: "errorCode",
	11: "remark",
}

func (p *BusinessPayrollDetailListVo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BusinessPayrollDetailListVo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BusinessPayrollDetailListVo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *BusinessPayrollDetailListVo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.BatchId = v
	}
	return nil
}

func (p *BusinessPayrollDetailListVo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.RecAccountName = v
	}
	return nil
}

func (p *BusinessPayrollDetailListVo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.RecAccountNo = v
	}
	return nil
}

func (p *BusinessPayrollDetailListVo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		p.Amount = v
	}
	return nil
}

func (p *BusinessPayrollDetailListVo) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Month = v
	}
	return nil
}

func (p *BusinessPayrollDetailListVo) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.OrderState = v
	}
	return nil
}

func (p *BusinessPayrollDetailListVo) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ErrorMessage = v
	}
	return nil
}

func (p *BusinessPayrollDetailListVo) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Num = v
	}
	return nil
}

func (p *BusinessPayrollDetailListVo) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ErrorCode = v
	}
	return nil
}

func (p *BusinessPayrollDetailListVo) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Remark = v
	}
	return nil
}

func (p *BusinessPayrollDetailListVo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BusinessPayrollDetailListVo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BusinessPayrollDetailListVo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BusinessPayrollDetailListVo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("batchId", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.BatchId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BusinessPayrollDetailListVo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("recAccountName", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.RecAccountName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *BusinessPayrollDetailListVo) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("recAccountNo", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.RecAccountNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *BusinessPayrollDetailListVo) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("amount", thrift.DOUBLE, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.Amount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *BusinessPayrollDetailListVo) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("month", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Month); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *BusinessPayrollDetailListVo) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("orderState", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OrderState); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *BusinessPayrollDetailListVo) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("errorMessage", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ErrorMessage); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *BusinessPayrollDetailListVo) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("num", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Num); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *BusinessPayrollDetailListVo) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("errorCode", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ErrorCode); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *BusinessPayrollDetailListVo) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("remark", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Remark); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *BusinessPayrollDetailListVo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BusinessPayrollDetailListVo(%+v)", *p)
}

func (p *BusinessPayrollDetailListVo) DeepEqual(ano *BusinessPayrollDetailListVo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.BatchId) {
		return false
	}
	if !p.Field3DeepEqual(ano.RecAccountName) {
		return false
	}
	if !p.Field4DeepEqual(ano.RecAccountNo) {
		return false
	}
	if !p.Field5DeepEqual(ano.Amount) {
		return false
	}
	if !p.Field6DeepEqual(ano.Month) {
		return false
	}
	if !p.Field7DeepEqual(ano.OrderState) {
		return false
	}
	if !p.Field8DeepEqual(ano.ErrorMessage) {
		return false
	}
	if !p.Field9DeepEqual(ano.Num) {
		return false
	}
	if !p.Field10DeepEqual(ano.ErrorCode) {
		return false
	}
	if !p.Field11DeepEqual(ano.Remark) {
		return false
	}
	return true
}

func (p *BusinessPayrollDetailListVo) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *BusinessPayrollDetailListVo) Field2DeepEqual(src int64) bool {

	if p.BatchId != src {
		return false
	}
	return true
}
func (p *BusinessPayrollDetailListVo) Field3DeepEqual(src string) bool {

	if strings.Compare(p.RecAccountName, src) != 0 {
		return false
	}
	return true
}
func (p *BusinessPayrollDetailListVo) Field4DeepEqual(src string) bool {

	if strings.Compare(p.RecAccountNo, src) != 0 {
		return false
	}
	return true
}
func (p *BusinessPayrollDetailListVo) Field5DeepEqual(src float64) bool {

	if p.Amount != src {
		return false
	}
	return true
}
func (p *BusinessPayrollDetailListVo) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Month, src) != 0 {
		return false
	}
	return true
}
func (p *BusinessPayrollDetailListVo) Field7DeepEqual(src string) bool {

	if strings.Compare(p.OrderState, src) != 0 {
		return false
	}
	return true
}
func (p *BusinessPayrollDetailListVo) Field8DeepEqual(src string) bool {

	if strings.Compare(p.ErrorMessage, src) != 0 {
		return false
	}
	return true
}
func (p *BusinessPayrollDetailListVo) Field9DeepEqual(src string) bool {

	if strings.Compare(p.Num, src) != 0 {
		return false
	}
	return true
}
func (p *BusinessPayrollDetailListVo) Field10DeepEqual(src string) bool {

	if strings.Compare(p.ErrorCode, src) != 0 {
		return false
	}
	return true
}
func (p *BusinessPayrollDetailListVo) Field11DeepEqual(src string) bool {

	if strings.Compare(p.Remark, src) != 0 {
		return false
	}
	return true
}

type QueryAccountBalanceRequest struct {
	AccountNo      string `thrift:"accountNo,1" frugal:"1,default,string" json:"accountNo"`
	OrganizationId int64  `thrift:"organizationId,2" frugal:"2,default,i64" json:"organizationId"`
}

func NewQueryAccountBalanceRequest() *QueryAccountBalanceRequest {
	return &QueryAccountBalanceRequest{}
}

func (p *QueryAccountBalanceRequest) InitDefault() {
	*p = QueryAccountBalanceRequest{}
}

func (p *QueryAccountBalanceRequest) GetAccountNo() (v string) {
	return p.AccountNo
}

func (p *QueryAccountBalanceRequest) GetOrganizationId() (v int64) {
	return p.OrganizationId
}
func (p *QueryAccountBalanceRequest) SetAccountNo(val string) {
	p.AccountNo = val
}
func (p *QueryAccountBalanceRequest) SetOrganizationId(val int64) {
	p.OrganizationId = val
}

var fieldIDToName_QueryAccountBalanceRequest = map[int16]string{
	1: "accountNo",
	2: "organizationId",
}

func (p *QueryAccountBalanceRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QueryAccountBalanceRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *QueryAccountBalanceRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.AccountNo = v
	}
	return nil
}

func (p *QueryAccountBalanceRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.OrganizationId = v
	}
	return nil
}

func (p *QueryAccountBalanceRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryAccountBalanceRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QueryAccountBalanceRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("accountNo", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AccountNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QueryAccountBalanceRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("organizationId", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.OrganizationId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *QueryAccountBalanceRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryAccountBalanceRequest(%+v)", *p)
}

func (p *QueryAccountBalanceRequest) DeepEqual(ano *QueryAccountBalanceRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AccountNo) {
		return false
	}
	if !p.Field2DeepEqual(ano.OrganizationId) {
		return false
	}
	return true
}

func (p *QueryAccountBalanceRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.AccountNo, src) != 0 {
		return false
	}
	return true
}
func (p *QueryAccountBalanceRequest) Field2DeepEqual(src int64) bool {

	if p.OrganizationId != src {
		return false
	}
	return true
}

type QueryAccountBalanceResponse struct {
	Success bool    `thrift:"success,1" frugal:"1,default,bool" json:"success"`
	Msg     string  `thrift:"msg,2" frugal:"2,default,string" json:"msg"`
	Balance float64 `thrift:"balance,3" frugal:"3,default,double" json:"balance"`
}

func NewQueryAccountBalanceResponse() *QueryAccountBalanceResponse {
	return &QueryAccountBalanceResponse{}
}

func (p *QueryAccountBalanceResponse) InitDefault() {
	*p = QueryAccountBalanceResponse{}
}

func (p *QueryAccountBalanceResponse) GetSuccess() (v bool) {
	return p.Success
}

func (p *QueryAccountBalanceResponse) GetMsg() (v string) {
	return p.Msg
}

func (p *QueryAccountBalanceResponse) GetBalance() (v float64) {
	return p.Balance
}
func (p *QueryAccountBalanceResponse) SetSuccess(val bool) {
	p.Success = val
}
func (p *QueryAccountBalanceResponse) SetMsg(val string) {
	p.Msg = val
}
func (p *QueryAccountBalanceResponse) SetBalance(val float64) {
	p.Balance = val
}

var fieldIDToName_QueryAccountBalanceResponse = map[int16]string{
	1: "success",
	2: "msg",
	3: "balance",
}

func (p *QueryAccountBalanceResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QueryAccountBalanceResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *QueryAccountBalanceResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.Success = v
	}
	return nil
}

func (p *QueryAccountBalanceResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Msg = v
	}
	return nil
}

func (p *QueryAccountBalanceResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		p.Balance = v
	}
	return nil
}

func (p *QueryAccountBalanceResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryAccountBalanceResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QueryAccountBalanceResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("success", thrift.BOOL, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Success); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QueryAccountBalanceResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Msg); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *QueryAccountBalanceResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("balance", thrift.DOUBLE, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.Balance); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *QueryAccountBalanceResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryAccountBalanceResponse(%+v)", *p)
}

func (p *QueryAccountBalanceResponse) DeepEqual(ano *QueryAccountBalanceResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Success) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Balance) {
		return false
	}
	return true
}

func (p *QueryAccountBalanceResponse) Field1DeepEqual(src bool) bool {

	if p.Success != src {
		return false
	}
	return true
}
func (p *QueryAccountBalanceResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Msg, src) != 0 {
		return false
	}
	return true
}
func (p *QueryAccountBalanceResponse) Field3DeepEqual(src float64) bool {

	if p.Balance != src {
		return false
	}
	return true
}

type SyncBusinessPayrollResultRequest struct {
	Id int64 `thrift:"id,1" frugal:"1,default,i64" json:"id"`
}

func NewSyncBusinessPayrollResultRequest() *SyncBusinessPayrollResultRequest {
	return &SyncBusinessPayrollResultRequest{}
}

func (p *SyncBusinessPayrollResultRequest) InitDefault() {
	*p = SyncBusinessPayrollResultRequest{}
}

func (p *SyncBusinessPayrollResultRequest) GetId() (v int64) {
	return p.Id
}
func (p *SyncBusinessPayrollResultRequest) SetId(val int64) {
	p.Id = val
}

var fieldIDToName_SyncBusinessPayrollResultRequest = map[int16]string{
	1: "id",
}

func (p *SyncBusinessPayrollResultRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SyncBusinessPayrollResultRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SyncBusinessPayrollResultRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *SyncBusinessPayrollResultRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SyncBusinessPayrollResultRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SyncBusinessPayrollResultRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SyncBusinessPayrollResultRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SyncBusinessPayrollResultRequest(%+v)", *p)
}

func (p *SyncBusinessPayrollResultRequest) DeepEqual(ano *SyncBusinessPayrollResultRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *SyncBusinessPayrollResultRequest) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}

type SyncBusinessPayrollResultResponse struct {
	Success bool   `thrift:"success,1" frugal:"1,default,bool" json:"success"`
	Msg     string `thrift:"msg,2" frugal:"2,default,string" json:"msg"`
}

func NewSyncBusinessPayrollResultResponse() *SyncBusinessPayrollResultResponse {
	return &SyncBusinessPayrollResultResponse{}
}

func (p *SyncBusinessPayrollResultResponse) InitDefault() {
	*p = SyncBusinessPayrollResultResponse{}
}

func (p *SyncBusinessPayrollResultResponse) GetSuccess() (v bool) {
	return p.Success
}

func (p *SyncBusinessPayrollResultResponse) GetMsg() (v string) {
	return p.Msg
}
func (p *SyncBusinessPayrollResultResponse) SetSuccess(val bool) {
	p.Success = val
}
func (p *SyncBusinessPayrollResultResponse) SetMsg(val string) {
	p.Msg = val
}

var fieldIDToName_SyncBusinessPayrollResultResponse = map[int16]string{
	1: "success",
	2: "msg",
}

func (p *SyncBusinessPayrollResultResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SyncBusinessPayrollResultResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SyncBusinessPayrollResultResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.Success = v
	}
	return nil
}

func (p *SyncBusinessPayrollResultResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Msg = v
	}
	return nil
}

func (p *SyncBusinessPayrollResultResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SyncBusinessPayrollResultResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SyncBusinessPayrollResultResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("success", thrift.BOOL, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Success); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SyncBusinessPayrollResultResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Msg); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SyncBusinessPayrollResultResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SyncBusinessPayrollResultResponse(%+v)", *p)
}

func (p *SyncBusinessPayrollResultResponse) DeepEqual(ano *SyncBusinessPayrollResultResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Success) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	return true
}

func (p *SyncBusinessPayrollResultResponse) Field1DeepEqual(src bool) bool {

	if p.Success != src {
		return false
	}
	return true
}
func (p *SyncBusinessPayrollResultResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Msg, src) != 0 {
		return false
	}
	return true
}

type ProofData struct {
	Id                  int64            `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	CreatedAt           []byte           `thrift:"createdAt,2" frugal:"2,default,binary" json:"createdAt"`
	UpdatedAt           []byte           `thrift:"updatedAt,3" frugal:"3,default,binary" json:"updatedAt"`
	OrganizationId      int64            `thrift:"organizationId,4" frugal:"4,default,i64" json:"organizationId"`
	FinanceAccountSetId int64            `thrift:"financeAccountSetId,5" frugal:"5,default,i64" json:"financeAccountSetId"`
	Date                string           `thrift:"date,6" frugal:"6,default,string" json:"date"`
	Num                 int64            `thrift:"num,7" frugal:"7,default,i64" json:"num"`
	BorrowAmount        float64          `thrift:"borrowAmount,8" frugal:"8,default,double" json:"borrowAmount"`
	LoanAmount          float64          `thrift:"loanAmount,9" frugal:"9,default,double" json:"loanAmount"`
	Items               []*ProofItemData `thrift:"items,10" frugal:"10,default,list<ProofItemData>" json:"items"`
}

func NewProofData() *ProofData {
	return &ProofData{}
}

func (p *ProofData) InitDefault() {
	*p = ProofData{}
}

func (p *ProofData) GetId() (v int64) {
	return p.Id
}

func (p *ProofData) GetCreatedAt() (v []byte) {
	return p.CreatedAt
}

func (p *ProofData) GetUpdatedAt() (v []byte) {
	return p.UpdatedAt
}

func (p *ProofData) GetOrganizationId() (v int64) {
	return p.OrganizationId
}

func (p *ProofData) GetFinanceAccountSetId() (v int64) {
	return p.FinanceAccountSetId
}

func (p *ProofData) GetDate() (v string) {
	return p.Date
}

func (p *ProofData) GetNum() (v int64) {
	return p.Num
}

func (p *ProofData) GetBorrowAmount() (v float64) {
	return p.BorrowAmount
}

func (p *ProofData) GetLoanAmount() (v float64) {
	return p.LoanAmount
}

func (p *ProofData) GetItems() (v []*ProofItemData) {
	return p.Items
}
func (p *ProofData) SetId(val int64) {
	p.Id = val
}
func (p *ProofData) SetCreatedAt(val []byte) {
	p.CreatedAt = val
}
func (p *ProofData) SetUpdatedAt(val []byte) {
	p.UpdatedAt = val
}
func (p *ProofData) SetOrganizationId(val int64) {
	p.OrganizationId = val
}
func (p *ProofData) SetFinanceAccountSetId(val int64) {
	p.FinanceAccountSetId = val
}
func (p *ProofData) SetDate(val string) {
	p.Date = val
}
func (p *ProofData) SetNum(val int64) {
	p.Num = val
}
func (p *ProofData) SetBorrowAmount(val float64) {
	p.BorrowAmount = val
}
func (p *ProofData) SetLoanAmount(val float64) {
	p.LoanAmount = val
}
func (p *ProofData) SetItems(val []*ProofItemData) {
	p.Items = val
}

var fieldIDToName_ProofData = map[int16]string{
	1:  "id",
	2:  "createdAt",
	3:  "updatedAt",
	4:  "organizationId",
	5:  "financeAccountSetId",
	6:  "date",
	7:  "num",
	8:  "borrowAmount",
	9:  "loanAmount",
	10: "items",
}

func (p *ProofData) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProofData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProofData) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *ProofData) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		p.CreatedAt = []byte(v)
	}
	return nil
}

func (p *ProofData) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		p.UpdatedAt = []byte(v)
	}
	return nil
}

func (p *ProofData) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.OrganizationId = v
	}
	return nil
}

func (p *ProofData) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.FinanceAccountSetId = v
	}
	return nil
}

func (p *ProofData) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Date = v
	}
	return nil
}

func (p *ProofData) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Num = v
	}
	return nil
}

func (p *ProofData) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		p.BorrowAmount = v
	}
	return nil
}

func (p *ProofData) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		p.LoanAmount = v
	}
	return nil
}

func (p *ProofData) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Items = make([]*ProofItemData, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewProofItemData()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Items = append(p.Items, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ProofData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ProofData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProofData) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ProofData) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("createdAt", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.CreatedAt)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ProofData) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updatedAt", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.UpdatedAt)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ProofData) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("organizationId", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.OrganizationId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ProofData) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("financeAccountSetId", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.FinanceAccountSetId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ProofData) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("date", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Date); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ProofData) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("num", thrift.I64, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Num); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ProofData) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("borrowAmount", thrift.DOUBLE, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.BorrowAmount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ProofData) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("loanAmount", thrift.DOUBLE, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.LoanAmount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ProofData) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("items", thrift.LIST, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
		return err
	}
	for _, v := range p.Items {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ProofData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProofData(%+v)", *p)
}

func (p *ProofData) DeepEqual(ano *ProofData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field3DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field4DeepEqual(ano.OrganizationId) {
		return false
	}
	if !p.Field5DeepEqual(ano.FinanceAccountSetId) {
		return false
	}
	if !p.Field6DeepEqual(ano.Date) {
		return false
	}
	if !p.Field7DeepEqual(ano.Num) {
		return false
	}
	if !p.Field8DeepEqual(ano.BorrowAmount) {
		return false
	}
	if !p.Field9DeepEqual(ano.LoanAmount) {
		return false
	}
	if !p.Field10DeepEqual(ano.Items) {
		return false
	}
	return true
}

func (p *ProofData) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *ProofData) Field2DeepEqual(src []byte) bool {

	if bytes.Compare(p.CreatedAt, src) != 0 {
		return false
	}
	return true
}
func (p *ProofData) Field3DeepEqual(src []byte) bool {

	if bytes.Compare(p.UpdatedAt, src) != 0 {
		return false
	}
	return true
}
func (p *ProofData) Field4DeepEqual(src int64) bool {

	if p.OrganizationId != src {
		return false
	}
	return true
}
func (p *ProofData) Field5DeepEqual(src int64) bool {

	if p.FinanceAccountSetId != src {
		return false
	}
	return true
}
func (p *ProofData) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Date, src) != 0 {
		return false
	}
	return true
}
func (p *ProofData) Field7DeepEqual(src int64) bool {

	if p.Num != src {
		return false
	}
	return true
}
func (p *ProofData) Field8DeepEqual(src float64) bool {

	if p.BorrowAmount != src {
		return false
	}
	return true
}
func (p *ProofData) Field9DeepEqual(src float64) bool {

	if p.LoanAmount != src {
		return false
	}
	return true
}
func (p *ProofData) Field10DeepEqual(src []*ProofItemData) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type ProofItemData struct {
	Id                  int64   `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	CreatedAt           []byte  `thrift:"createdAt,2" frugal:"2,default,binary" json:"createdAt"`
	UpdatedAt           []byte  `thrift:"updatedAt,3" frugal:"3,default,binary" json:"updatedAt"`
	OrganizationId      int64   `thrift:"organizationId,4" frugal:"4,default,i64" json:"organizationId"`
	ProofId             int64   `thrift:"proofId,5" frugal:"5,default,i64" json:"proofId"`
	Summary             string  `thrift:"summary,6" frugal:"6,default,string" json:"summary"`
	SubjectFullCodePath string  `thrift:"subjectFullCodePath,7" frugal:"7,default,string" json:"subjectFullCodePath"`
	SubjectName         string  `thrift:"subjectName,8" frugal:"8,default,string" json:"subjectName"`
	BorrowAmount        float64 `thrift:"borrowAmount,9" frugal:"9,default,double" json:"borrowAmount"`
	LoanAmount          float64 `thrift:"loanAmount,10" frugal:"10,default,double" json:"loanAmount"`
	Sort                int32   `thrift:"sort,11" frugal:"11,default,i32" json:"sort"`
}

func NewProofItemData() *ProofItemData {
	return &ProofItemData{}
}

func (p *ProofItemData) InitDefault() {
	*p = ProofItemData{}
}

func (p *ProofItemData) GetId() (v int64) {
	return p.Id
}

func (p *ProofItemData) GetCreatedAt() (v []byte) {
	return p.CreatedAt
}

func (p *ProofItemData) GetUpdatedAt() (v []byte) {
	return p.UpdatedAt
}

func (p *ProofItemData) GetOrganizationId() (v int64) {
	return p.OrganizationId
}

func (p *ProofItemData) GetProofId() (v int64) {
	return p.ProofId
}

func (p *ProofItemData) GetSummary() (v string) {
	return p.Summary
}

func (p *ProofItemData) GetSubjectFullCodePath() (v string) {
	return p.SubjectFullCodePath
}

func (p *ProofItemData) GetSubjectName() (v string) {
	return p.SubjectName
}

func (p *ProofItemData) GetBorrowAmount() (v float64) {
	return p.BorrowAmount
}

func (p *ProofItemData) GetLoanAmount() (v float64) {
	return p.LoanAmount
}

func (p *ProofItemData) GetSort() (v int32) {
	return p.Sort
}
func (p *ProofItemData) SetId(val int64) {
	p.Id = val
}
func (p *ProofItemData) SetCreatedAt(val []byte) {
	p.CreatedAt = val
}
func (p *ProofItemData) SetUpdatedAt(val []byte) {
	p.UpdatedAt = val
}
func (p *ProofItemData) SetOrganizationId(val int64) {
	p.OrganizationId = val
}
func (p *ProofItemData) SetProofId(val int64) {
	p.ProofId = val
}
func (p *ProofItemData) SetSummary(val string) {
	p.Summary = val
}
func (p *ProofItemData) SetSubjectFullCodePath(val string) {
	p.SubjectFullCodePath = val
}
func (p *ProofItemData) SetSubjectName(val string) {
	p.SubjectName = val
}
func (p *ProofItemData) SetBorrowAmount(val float64) {
	p.BorrowAmount = val
}
func (p *ProofItemData) SetLoanAmount(val float64) {
	p.LoanAmount = val
}
func (p *ProofItemData) SetSort(val int32) {
	p.Sort = val
}

var fieldIDToName_ProofItemData = map[int16]string{
	1:  "id",
	2:  "createdAt",
	3:  "updatedAt",
	4:  "organizationId",
	5:  "proofId",
	6:  "summary",
	7:  "subjectFullCodePath",
	8:  "subjectName",
	9:  "borrowAmount",
	10: "loanAmount",
	11: "sort",
}

func (p *ProofItemData) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProofItemData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProofItemData) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *ProofItemData) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		p.CreatedAt = []byte(v)
	}
	return nil
}

func (p *ProofItemData) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		p.UpdatedAt = []byte(v)
	}
	return nil
}

func (p *ProofItemData) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.OrganizationId = v
	}
	return nil
}

func (p *ProofItemData) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ProofId = v
	}
	return nil
}

func (p *ProofItemData) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Summary = v
	}
	return nil
}

func (p *ProofItemData) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.SubjectFullCodePath = v
	}
	return nil
}

func (p *ProofItemData) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.SubjectName = v
	}
	return nil
}

func (p *ProofItemData) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		p.BorrowAmount = v
	}
	return nil
}

func (p *ProofItemData) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		p.LoanAmount = v
	}
	return nil
}

func (p *ProofItemData) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Sort = v
	}
	return nil
}

func (p *ProofItemData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ProofItemData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProofItemData) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ProofItemData) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("createdAt", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.CreatedAt)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ProofItemData) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updatedAt", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.UpdatedAt)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ProofItemData) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("organizationId", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.OrganizationId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ProofItemData) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("proofId", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ProofId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ProofItemData) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("summary", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Summary); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ProofItemData) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("subjectFullCodePath", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.SubjectFullCodePath); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ProofItemData) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("subjectName", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.SubjectName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ProofItemData) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("borrowAmount", thrift.DOUBLE, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.BorrowAmount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ProofItemData) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("loanAmount", thrift.DOUBLE, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.LoanAmount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ProofItemData) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("sort", thrift.I32, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Sort); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *ProofItemData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProofItemData(%+v)", *p)
}

func (p *ProofItemData) DeepEqual(ano *ProofItemData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field3DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field4DeepEqual(ano.OrganizationId) {
		return false
	}
	if !p.Field5DeepEqual(ano.ProofId) {
		return false
	}
	if !p.Field6DeepEqual(ano.Summary) {
		return false
	}
	if !p.Field7DeepEqual(ano.SubjectFullCodePath) {
		return false
	}
	if !p.Field8DeepEqual(ano.SubjectName) {
		return false
	}
	if !p.Field9DeepEqual(ano.BorrowAmount) {
		return false
	}
	if !p.Field10DeepEqual(ano.LoanAmount) {
		return false
	}
	if !p.Field11DeepEqual(ano.Sort) {
		return false
	}
	return true
}

func (p *ProofItemData) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *ProofItemData) Field2DeepEqual(src []byte) bool {

	if bytes.Compare(p.CreatedAt, src) != 0 {
		return false
	}
	return true
}
func (p *ProofItemData) Field3DeepEqual(src []byte) bool {

	if bytes.Compare(p.UpdatedAt, src) != 0 {
		return false
	}
	return true
}
func (p *ProofItemData) Field4DeepEqual(src int64) bool {

	if p.OrganizationId != src {
		return false
	}
	return true
}
func (p *ProofItemData) Field5DeepEqual(src int64) bool {

	if p.ProofId != src {
		return false
	}
	return true
}
func (p *ProofItemData) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Summary, src) != 0 {
		return false
	}
	return true
}
func (p *ProofItemData) Field7DeepEqual(src string) bool {

	if strings.Compare(p.SubjectFullCodePath, src) != 0 {
		return false
	}
	return true
}
func (p *ProofItemData) Field8DeepEqual(src string) bool {

	if strings.Compare(p.SubjectName, src) != 0 {
		return false
	}
	return true
}
func (p *ProofItemData) Field9DeepEqual(src float64) bool {

	if p.BorrowAmount != src {
		return false
	}
	return true
}
func (p *ProofItemData) Field10DeepEqual(src float64) bool {

	if p.LoanAmount != src {
		return false
	}
	return true
}
func (p *ProofItemData) Field11DeepEqual(src int32) bool {

	if p.Sort != src {
		return false
	}
	return true
}

type ListProofRequest struct {
	PageNum  int32  `thrift:"pageNum,1,required" frugal:"1,required,i32" json:"pageNum"`
	PageSize int32  `thrift:"pageSize,2,required" frugal:"2,required,i32" json:"pageSize"`
	Sort     string `thrift:"sort,3" frugal:"3,default,string" json:"sort"`
}

func NewListProofRequest() *ListProofRequest {
	return &ListProofRequest{}
}

func (p *ListProofRequest) InitDefault() {
	*p = ListProofRequest{}
}

func (p *ListProofRequest) GetPageNum() (v int32) {
	return p.PageNum
}

func (p *ListProofRequest) GetPageSize() (v int32) {
	return p.PageSize
}

func (p *ListProofRequest) GetSort() (v string) {
	return p.Sort
}
func (p *ListProofRequest) SetPageNum(val int32) {
	p.PageNum = val
}
func (p *ListProofRequest) SetPageSize(val int32) {
	p.PageSize = val
}
func (p *ListProofRequest) SetSort(val string) {
	p.Sort = val
}

var fieldIDToName_ListProofRequest = map[int16]string{
	1: "pageNum",
	2: "pageSize",
	3: "sort",
}

func (p *ListProofRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPageNum bool = false
	var issetPageSize bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPageNum = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetPageSize = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPageNum {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPageSize {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListProofRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListProofRequest[fieldId]))
}

func (p *ListProofRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.PageNum = v
	}
	return nil
}

func (p *ListProofRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.PageSize = v
	}
	return nil
}

func (p *ListProofRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Sort = v
	}
	return nil
}

func (p *ListProofRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListProofRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListProofRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pageNum", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.PageNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListProofRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pageSize", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.PageSize); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListProofRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("sort", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Sort); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ListProofRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListProofRequest(%+v)", *p)
}

func (p *ListProofRequest) DeepEqual(ano *ListProofRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PageNum) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field3DeepEqual(ano.Sort) {
		return false
	}
	return true
}

func (p *ListProofRequest) Field1DeepEqual(src int32) bool {

	if p.PageNum != src {
		return false
	}
	return true
}
func (p *ListProofRequest) Field2DeepEqual(src int32) bool {

	if p.PageSize != src {
		return false
	}
	return true
}
func (p *ListProofRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Sort, src) != 0 {
		return false
	}
	return true
}

type ListProofResponse struct {
	Data  []*ProofData `thrift:"data,1" frugal:"1,default,list<ProofData>" json:"data"`
	Count int64        `thrift:"count,2" frugal:"2,default,i64" json:"count"`
}

func NewListProofResponse() *ListProofResponse {
	return &ListProofResponse{}
}

func (p *ListProofResponse) InitDefault() {
	*p = ListProofResponse{}
}

func (p *ListProofResponse) GetData() (v []*ProofData) {
	return p.Data
}

func (p *ListProofResponse) GetCount() (v int64) {
	return p.Count
}
func (p *ListProofResponse) SetData(val []*ProofData) {
	p.Data = val
}
func (p *ListProofResponse) SetCount(val int64) {
	p.Count = val
}

var fieldIDToName_ListProofResponse = map[int16]string{
	1: "data",
	2: "count",
}

func (p *ListProofResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListProofResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListProofResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Data = make([]*ProofData, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewProofData()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Data = append(p.Data, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListProofResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Count = v
	}
	return nil
}

func (p *ListProofResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListProofResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListProofResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Data)); err != nil {
		return err
	}
	for _, v := range p.Data {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListProofResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("count", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Count); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListProofResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListProofResponse(%+v)", *p)
}

func (p *ListProofResponse) DeepEqual(ano *ListProofResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Data) {
		return false
	}
	if !p.Field2DeepEqual(ano.Count) {
		return false
	}
	return true
}

func (p *ListProofResponse) Field1DeepEqual(src []*ProofData) bool {

	if len(p.Data) != len(src) {
		return false
	}
	for i, v := range p.Data {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListProofResponse) Field2DeepEqual(src int64) bool {

	if p.Count != src {
		return false
	}
	return true
}

type AccountSetPeriodData struct {
	Id             int64  `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	CreatedAt      []byte `thrift:"createdAt,2" frugal:"2,default,binary" json:"createdAt"`
	UpdatedAt      []byte `thrift:"updatedAt,3" frugal:"3,default,binary" json:"updatedAt"`
	OrganizationId int64  `thrift:"organizationId,4" frugal:"4,default,i64" json:"organizationId"`
	Year           string `thrift:"year,5" frugal:"5,default,string" json:"year"`
	Month          string `thrift:"month,6" frugal:"6,default,string" json:"month"`
	Status         string `thrift:"status,7" frugal:"7,default,string" json:"status"`
}

func NewAccountSetPeriodData() *AccountSetPeriodData {
	return &AccountSetPeriodData{}
}

func (p *AccountSetPeriodData) InitDefault() {
	*p = AccountSetPeriodData{}
}

func (p *AccountSetPeriodData) GetId() (v int64) {
	return p.Id
}

func (p *AccountSetPeriodData) GetCreatedAt() (v []byte) {
	return p.CreatedAt
}

func (p *AccountSetPeriodData) GetUpdatedAt() (v []byte) {
	return p.UpdatedAt
}

func (p *AccountSetPeriodData) GetOrganizationId() (v int64) {
	return p.OrganizationId
}

func (p *AccountSetPeriodData) GetYear() (v string) {
	return p.Year
}

func (p *AccountSetPeriodData) GetMonth() (v string) {
	return p.Month
}

func (p *AccountSetPeriodData) GetStatus() (v string) {
	return p.Status
}
func (p *AccountSetPeriodData) SetId(val int64) {
	p.Id = val
}
func (p *AccountSetPeriodData) SetCreatedAt(val []byte) {
	p.CreatedAt = val
}
func (p *AccountSetPeriodData) SetUpdatedAt(val []byte) {
	p.UpdatedAt = val
}
func (p *AccountSetPeriodData) SetOrganizationId(val int64) {
	p.OrganizationId = val
}
func (p *AccountSetPeriodData) SetYear(val string) {
	p.Year = val
}
func (p *AccountSetPeriodData) SetMonth(val string) {
	p.Month = val
}
func (p *AccountSetPeriodData) SetStatus(val string) {
	p.Status = val
}

var fieldIDToName_AccountSetPeriodData = map[int16]string{
	1: "id",
	2: "createdAt",
	3: "updatedAt",
	4: "organizationId",
	5: "year",
	6: "month",
	7: "status",
}

func (p *AccountSetPeriodData) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AccountSetPeriodData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AccountSetPeriodData) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *AccountSetPeriodData) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		p.CreatedAt = []byte(v)
	}
	return nil
}

func (p *AccountSetPeriodData) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		p.UpdatedAt = []byte(v)
	}
	return nil
}

func (p *AccountSetPeriodData) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.OrganizationId = v
	}
	return nil
}

func (p *AccountSetPeriodData) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Year = v
	}
	return nil
}

func (p *AccountSetPeriodData) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Month = v
	}
	return nil
}

func (p *AccountSetPeriodData) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Status = v
	}
	return nil
}

func (p *AccountSetPeriodData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AccountSetPeriodData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AccountSetPeriodData) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AccountSetPeriodData) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("createdAt", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.CreatedAt)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *AccountSetPeriodData) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updatedAt", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.UpdatedAt)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *AccountSetPeriodData) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("organizationId", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.OrganizationId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *AccountSetPeriodData) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("year", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Year); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *AccountSetPeriodData) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("month", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Month); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *AccountSetPeriodData) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *AccountSetPeriodData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccountSetPeriodData(%+v)", *p)
}

func (p *AccountSetPeriodData) DeepEqual(ano *AccountSetPeriodData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field3DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field4DeepEqual(ano.OrganizationId) {
		return false
	}
	if !p.Field5DeepEqual(ano.Year) {
		return false
	}
	if !p.Field6DeepEqual(ano.Month) {
		return false
	}
	if !p.Field7DeepEqual(ano.Status) {
		return false
	}
	return true
}

func (p *AccountSetPeriodData) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *AccountSetPeriodData) Field2DeepEqual(src []byte) bool {

	if bytes.Compare(p.CreatedAt, src) != 0 {
		return false
	}
	return true
}
func (p *AccountSetPeriodData) Field3DeepEqual(src []byte) bool {

	if bytes.Compare(p.UpdatedAt, src) != 0 {
		return false
	}
	return true
}
func (p *AccountSetPeriodData) Field4DeepEqual(src int64) bool {

	if p.OrganizationId != src {
		return false
	}
	return true
}
func (p *AccountSetPeriodData) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Year, src) != 0 {
		return false
	}
	return true
}
func (p *AccountSetPeriodData) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Month, src) != 0 {
		return false
	}
	return true
}
func (p *AccountSetPeriodData) Field7DeepEqual(src string) bool {

	if strings.Compare(p.Status, src) != 0 {
		return false
	}
	return true
}

type ListAccountSetPeriodRequest struct {
	PageNum  int32  `thrift:"pageNum,1,required" frugal:"1,required,i32" json:"pageNum"`
	PageSize int32  `thrift:"pageSize,2,required" frugal:"2,required,i32" json:"pageSize"`
	Sort     string `thrift:"sort,3" frugal:"3,default,string" json:"sort"`
	Status   string `thrift:"status,4" frugal:"4,default,string" json:"status"`
}

func NewListAccountSetPeriodRequest() *ListAccountSetPeriodRequest {
	return &ListAccountSetPeriodRequest{}
}

func (p *ListAccountSetPeriodRequest) InitDefault() {
	*p = ListAccountSetPeriodRequest{}
}

func (p *ListAccountSetPeriodRequest) GetPageNum() (v int32) {
	return p.PageNum
}

func (p *ListAccountSetPeriodRequest) GetPageSize() (v int32) {
	return p.PageSize
}

func (p *ListAccountSetPeriodRequest) GetSort() (v string) {
	return p.Sort
}

func (p *ListAccountSetPeriodRequest) GetStatus() (v string) {
	return p.Status
}
func (p *ListAccountSetPeriodRequest) SetPageNum(val int32) {
	p.PageNum = val
}
func (p *ListAccountSetPeriodRequest) SetPageSize(val int32) {
	p.PageSize = val
}
func (p *ListAccountSetPeriodRequest) SetSort(val string) {
	p.Sort = val
}
func (p *ListAccountSetPeriodRequest) SetStatus(val string) {
	p.Status = val
}

var fieldIDToName_ListAccountSetPeriodRequest = map[int16]string{
	1: "pageNum",
	2: "pageSize",
	3: "sort",
	4: "status",
}

func (p *ListAccountSetPeriodRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPageNum bool = false
	var issetPageSize bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPageNum = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetPageSize = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPageNum {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPageSize {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListAccountSetPeriodRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListAccountSetPeriodRequest[fieldId]))
}

func (p *ListAccountSetPeriodRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.PageNum = v
	}
	return nil
}

func (p *ListAccountSetPeriodRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.PageSize = v
	}
	return nil
}

func (p *ListAccountSetPeriodRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Sort = v
	}
	return nil
}

func (p *ListAccountSetPeriodRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Status = v
	}
	return nil
}

func (p *ListAccountSetPeriodRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListAccountSetPeriodRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListAccountSetPeriodRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pageNum", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.PageNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListAccountSetPeriodRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pageSize", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.PageSize); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListAccountSetPeriodRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("sort", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Sort); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ListAccountSetPeriodRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ListAccountSetPeriodRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListAccountSetPeriodRequest(%+v)", *p)
}

func (p *ListAccountSetPeriodRequest) DeepEqual(ano *ListAccountSetPeriodRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PageNum) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field3DeepEqual(ano.Sort) {
		return false
	}
	if !p.Field4DeepEqual(ano.Status) {
		return false
	}
	return true
}

func (p *ListAccountSetPeriodRequest) Field1DeepEqual(src int32) bool {

	if p.PageNum != src {
		return false
	}
	return true
}
func (p *ListAccountSetPeriodRequest) Field2DeepEqual(src int32) bool {

	if p.PageSize != src {
		return false
	}
	return true
}
func (p *ListAccountSetPeriodRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Sort, src) != 0 {
		return false
	}
	return true
}
func (p *ListAccountSetPeriodRequest) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Status, src) != 0 {
		return false
	}
	return true
}

type ListAccountSetPeriodResponse struct {
	Data  []*AccountSetPeriodData `thrift:"data,1" frugal:"1,default,list<AccountSetPeriodData>" json:"data"`
	Count int64                   `thrift:"count,2" frugal:"2,default,i64" json:"count"`
}

func NewListAccountSetPeriodResponse() *ListAccountSetPeriodResponse {
	return &ListAccountSetPeriodResponse{}
}

func (p *ListAccountSetPeriodResponse) InitDefault() {
	*p = ListAccountSetPeriodResponse{}
}

func (p *ListAccountSetPeriodResponse) GetData() (v []*AccountSetPeriodData) {
	return p.Data
}

func (p *ListAccountSetPeriodResponse) GetCount() (v int64) {
	return p.Count
}
func (p *ListAccountSetPeriodResponse) SetData(val []*AccountSetPeriodData) {
	p.Data = val
}
func (p *ListAccountSetPeriodResponse) SetCount(val int64) {
	p.Count = val
}

var fieldIDToName_ListAccountSetPeriodResponse = map[int16]string{
	1: "data",
	2: "count",
}

func (p *ListAccountSetPeriodResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListAccountSetPeriodResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListAccountSetPeriodResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Data = make([]*AccountSetPeriodData, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewAccountSetPeriodData()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Data = append(p.Data, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListAccountSetPeriodResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Count = v
	}
	return nil
}

func (p *ListAccountSetPeriodResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListAccountSetPeriodResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListAccountSetPeriodResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Data)); err != nil {
		return err
	}
	for _, v := range p.Data {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListAccountSetPeriodResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("count", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Count); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListAccountSetPeriodResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListAccountSetPeriodResponse(%+v)", *p)
}

func (p *ListAccountSetPeriodResponse) DeepEqual(ano *ListAccountSetPeriodResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Data) {
		return false
	}
	if !p.Field2DeepEqual(ano.Count) {
		return false
	}
	return true
}

func (p *ListAccountSetPeriodResponse) Field1DeepEqual(src []*AccountSetPeriodData) bool {

	if len(p.Data) != len(src) {
		return false
	}
	for i, v := range p.Data {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListAccountSetPeriodResponse) Field2DeepEqual(src int64) bool {

	if p.Count != src {
		return false
	}
	return true
}

type CreateVirtualAccountRequest struct {
	OrganizationId int64               `thrift:"organizationId,1" frugal:"1,default,i64" json:"organizationId"`
	Data           *VirtualAccountData `thrift:"data,2" frugal:"2,default,VirtualAccountData" json:"data"`
	Type           string              `thrift:"type,3" frugal:"3,default,string" json:"type"`
}

func NewCreateVirtualAccountRequest() *CreateVirtualAccountRequest {
	return &CreateVirtualAccountRequest{}
}

func (p *CreateVirtualAccountRequest) InitDefault() {
	*p = CreateVirtualAccountRequest{}
}

func (p *CreateVirtualAccountRequest) GetOrganizationId() (v int64) {
	return p.OrganizationId
}

var CreateVirtualAccountRequest_Data_DEFAULT *VirtualAccountData

func (p *CreateVirtualAccountRequest) GetData() (v *VirtualAccountData) {
	if !p.IsSetData() {
		return CreateVirtualAccountRequest_Data_DEFAULT
	}
	return p.Data
}

func (p *CreateVirtualAccountRequest) GetType() (v string) {
	return p.Type
}
func (p *CreateVirtualAccountRequest) SetOrganizationId(val int64) {
	p.OrganizationId = val
}
func (p *CreateVirtualAccountRequest) SetData(val *VirtualAccountData) {
	p.Data = val
}
func (p *CreateVirtualAccountRequest) SetType(val string) {
	p.Type = val
}

var fieldIDToName_CreateVirtualAccountRequest = map[int16]string{
	1: "organizationId",
	2: "data",
	3: "type",
}

func (p *CreateVirtualAccountRequest) IsSetData() bool {
	return p.Data != nil
}

func (p *CreateVirtualAccountRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateVirtualAccountRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateVirtualAccountRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.OrganizationId = v
	}
	return nil
}

func (p *CreateVirtualAccountRequest) ReadField2(iprot thrift.TProtocol) error {
	p.Data = NewVirtualAccountData()
	if err := p.Data.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CreateVirtualAccountRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Type = v
	}
	return nil
}

func (p *CreateVirtualAccountRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateVirtualAccountRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateVirtualAccountRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("organizationId", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.OrganizationId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateVirtualAccountRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Data.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateVirtualAccountRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("type", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Type); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreateVirtualAccountRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateVirtualAccountRequest(%+v)", *p)
}

func (p *CreateVirtualAccountRequest) DeepEqual(ano *CreateVirtualAccountRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.OrganizationId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Data) {
		return false
	}
	if !p.Field3DeepEqual(ano.Type) {
		return false
	}
	return true
}

func (p *CreateVirtualAccountRequest) Field1DeepEqual(src int64) bool {

	if p.OrganizationId != src {
		return false
	}
	return true
}
func (p *CreateVirtualAccountRequest) Field2DeepEqual(src *VirtualAccountData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateVirtualAccountRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Type, src) != 0 {
		return false
	}
	return true
}

type CreateVirtualAccountResponse struct {
	Status string              `thrift:"status,1" frugal:"1,default,string" json:"status"`
	Msg    string              `thrift:"msg,2" frugal:"2,default,string" json:"msg"`
	Data   *VirtualAccountData `thrift:"data,3" frugal:"3,default,VirtualAccountData" json:"data"`
}

func NewCreateVirtualAccountResponse() *CreateVirtualAccountResponse {
	return &CreateVirtualAccountResponse{}
}

func (p *CreateVirtualAccountResponse) InitDefault() {
	*p = CreateVirtualAccountResponse{}
}

func (p *CreateVirtualAccountResponse) GetStatus() (v string) {
	return p.Status
}

func (p *CreateVirtualAccountResponse) GetMsg() (v string) {
	return p.Msg
}

var CreateVirtualAccountResponse_Data_DEFAULT *VirtualAccountData

func (p *CreateVirtualAccountResponse) GetData() (v *VirtualAccountData) {
	if !p.IsSetData() {
		return CreateVirtualAccountResponse_Data_DEFAULT
	}
	return p.Data
}
func (p *CreateVirtualAccountResponse) SetStatus(val string) {
	p.Status = val
}
func (p *CreateVirtualAccountResponse) SetMsg(val string) {
	p.Msg = val
}
func (p *CreateVirtualAccountResponse) SetData(val *VirtualAccountData) {
	p.Data = val
}

var fieldIDToName_CreateVirtualAccountResponse = map[int16]string{
	1: "status",
	2: "msg",
	3: "data",
}

func (p *CreateVirtualAccountResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *CreateVirtualAccountResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateVirtualAccountResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateVirtualAccountResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Status = v
	}
	return nil
}

func (p *CreateVirtualAccountResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Msg = v
	}
	return nil
}

func (p *CreateVirtualAccountResponse) ReadField3(iprot thrift.TProtocol) error {
	p.Data = NewVirtualAccountData()
	if err := p.Data.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CreateVirtualAccountResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateVirtualAccountResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateVirtualAccountResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateVirtualAccountResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Msg); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateVirtualAccountResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Data.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreateVirtualAccountResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateVirtualAccountResponse(%+v)", *p)
}

func (p *CreateVirtualAccountResponse) DeepEqual(ano *CreateVirtualAccountResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	return true
}

func (p *CreateVirtualAccountResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Status, src) != 0 {
		return false
	}
	return true
}
func (p *CreateVirtualAccountResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Msg, src) != 0 {
		return false
	}
	return true
}
func (p *CreateVirtualAccountResponse) Field3DeepEqual(src *VirtualAccountData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}

type VirtualAccountData struct {
	VirtualAccountName string  `thrift:"virtualAccountName,1" frugal:"1,default,string" json:"virtualAccountName"`
	VirtualAccountNo   string  `thrift:"virtualAccountNo,2" frugal:"2,default,string" json:"virtualAccountNo"`
	Rate               float64 `thrift:"rate,3" frugal:"3,default,double" json:"rate"`
}

func NewVirtualAccountData() *VirtualAccountData {
	return &VirtualAccountData{}
}

func (p *VirtualAccountData) InitDefault() {
	*p = VirtualAccountData{}
}

func (p *VirtualAccountData) GetVirtualAccountName() (v string) {
	return p.VirtualAccountName
}

func (p *VirtualAccountData) GetVirtualAccountNo() (v string) {
	return p.VirtualAccountNo
}

func (p *VirtualAccountData) GetRate() (v float64) {
	return p.Rate
}
func (p *VirtualAccountData) SetVirtualAccountName(val string) {
	p.VirtualAccountName = val
}
func (p *VirtualAccountData) SetVirtualAccountNo(val string) {
	p.VirtualAccountNo = val
}
func (p *VirtualAccountData) SetRate(val float64) {
	p.Rate = val
}

var fieldIDToName_VirtualAccountData = map[int16]string{
	1: "virtualAccountName",
	2: "virtualAccountNo",
	3: "rate",
}

func (p *VirtualAccountData) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VirtualAccountData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VirtualAccountData) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.VirtualAccountName = v
	}
	return nil
}

func (p *VirtualAccountData) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.VirtualAccountNo = v
	}
	return nil
}

func (p *VirtualAccountData) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		p.Rate = v
	}
	return nil
}

func (p *VirtualAccountData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VirtualAccountData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VirtualAccountData) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("virtualAccountName", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.VirtualAccountName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VirtualAccountData) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("virtualAccountNo", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.VirtualAccountNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *VirtualAccountData) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("rate", thrift.DOUBLE, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.Rate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *VirtualAccountData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VirtualAccountData(%+v)", *p)
}

func (p *VirtualAccountData) DeepEqual(ano *VirtualAccountData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.VirtualAccountName) {
		return false
	}
	if !p.Field2DeepEqual(ano.VirtualAccountNo) {
		return false
	}
	if !p.Field3DeepEqual(ano.Rate) {
		return false
	}
	return true
}

func (p *VirtualAccountData) Field1DeepEqual(src string) bool {

	if strings.Compare(p.VirtualAccountName, src) != 0 {
		return false
	}
	return true
}
func (p *VirtualAccountData) Field2DeepEqual(src string) bool {

	if strings.Compare(p.VirtualAccountNo, src) != 0 {
		return false
	}
	return true
}
func (p *VirtualAccountData) Field3DeepEqual(src float64) bool {

	if p.Rate != src {
		return false
	}
	return true
}

type VirtualAccountBalanceData struct {
	VirtualAccountNo       string  `thrift:"virtualAccountNo,1" frugal:"1,default,string" json:"virtualAccountNo"`
	VirtualBalance         float64 `thrift:"virtualBalance,2" frugal:"2,default,double" json:"virtualBalance"`
	UpdateTime             []byte  `thrift:"updateTime,3" frugal:"3,default,binary" json:"updateTime"`
	BankType               string  `thrift:"bankType,4" frugal:"4,default,string" json:"bankType"`
	VirtualAccountName     string  `thrift:"virtualAccountName,5" frugal:"5,default,string" json:"virtualAccountName"`
	VirtualAccountBankName string  `thrift:"virtualAccountBankName,6" frugal:"6,default,string" json:"virtualAccountBankName"`
}

func NewVirtualAccountBalanceData() *VirtualAccountBalanceData {
	return &VirtualAccountBalanceData{}
}

func (p *VirtualAccountBalanceData) InitDefault() {
	*p = VirtualAccountBalanceData{}
}

func (p *VirtualAccountBalanceData) GetVirtualAccountNo() (v string) {
	return p.VirtualAccountNo
}

func (p *VirtualAccountBalanceData) GetVirtualBalance() (v float64) {
	return p.VirtualBalance
}

func (p *VirtualAccountBalanceData) GetUpdateTime() (v []byte) {
	return p.UpdateTime
}

func (p *VirtualAccountBalanceData) GetBankType() (v string) {
	return p.BankType
}

func (p *VirtualAccountBalanceData) GetVirtualAccountName() (v string) {
	return p.VirtualAccountName
}

func (p *VirtualAccountBalanceData) GetVirtualAccountBankName() (v string) {
	return p.VirtualAccountBankName
}
func (p *VirtualAccountBalanceData) SetVirtualAccountNo(val string) {
	p.VirtualAccountNo = val
}
func (p *VirtualAccountBalanceData) SetVirtualBalance(val float64) {
	p.VirtualBalance = val
}
func (p *VirtualAccountBalanceData) SetUpdateTime(val []byte) {
	p.UpdateTime = val
}
func (p *VirtualAccountBalanceData) SetBankType(val string) {
	p.BankType = val
}
func (p *VirtualAccountBalanceData) SetVirtualAccountName(val string) {
	p.VirtualAccountName = val
}
func (p *VirtualAccountBalanceData) SetVirtualAccountBankName(val string) {
	p.VirtualAccountBankName = val
}

var fieldIDToName_VirtualAccountBalanceData = map[int16]string{
	1: "virtualAccountNo",
	2: "virtualBalance",
	3: "updateTime",
	4: "bankType",
	5: "virtualAccountName",
	6: "virtualAccountBankName",
}

func (p *VirtualAccountBalanceData) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VirtualAccountBalanceData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VirtualAccountBalanceData) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.VirtualAccountNo = v
	}
	return nil
}

func (p *VirtualAccountBalanceData) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		p.VirtualBalance = v
	}
	return nil
}

func (p *VirtualAccountBalanceData) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		p.UpdateTime = []byte(v)
	}
	return nil
}

func (p *VirtualAccountBalanceData) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.BankType = v
	}
	return nil
}

func (p *VirtualAccountBalanceData) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.VirtualAccountName = v
	}
	return nil
}

func (p *VirtualAccountBalanceData) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.VirtualAccountBankName = v
	}
	return nil
}

func (p *VirtualAccountBalanceData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VirtualAccountBalanceData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VirtualAccountBalanceData) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("virtualAccountNo", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.VirtualAccountNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VirtualAccountBalanceData) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("virtualBalance", thrift.DOUBLE, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.VirtualBalance); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *VirtualAccountBalanceData) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updateTime", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.UpdateTime)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *VirtualAccountBalanceData) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("bankType", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.BankType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *VirtualAccountBalanceData) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("virtualAccountName", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.VirtualAccountName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *VirtualAccountBalanceData) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("virtualAccountBankName", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.VirtualAccountBankName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *VirtualAccountBalanceData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VirtualAccountBalanceData(%+v)", *p)
}

func (p *VirtualAccountBalanceData) DeepEqual(ano *VirtualAccountBalanceData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.VirtualAccountNo) {
		return false
	}
	if !p.Field2DeepEqual(ano.VirtualBalance) {
		return false
	}
	if !p.Field3DeepEqual(ano.UpdateTime) {
		return false
	}
	if !p.Field4DeepEqual(ano.BankType) {
		return false
	}
	if !p.Field5DeepEqual(ano.VirtualAccountName) {
		return false
	}
	if !p.Field6DeepEqual(ano.VirtualAccountBankName) {
		return false
	}
	return true
}

func (p *VirtualAccountBalanceData) Field1DeepEqual(src string) bool {

	if strings.Compare(p.VirtualAccountNo, src) != 0 {
		return false
	}
	return true
}
func (p *VirtualAccountBalanceData) Field2DeepEqual(src float64) bool {

	if p.VirtualBalance != src {
		return false
	}
	return true
}
func (p *VirtualAccountBalanceData) Field3DeepEqual(src []byte) bool {

	if bytes.Compare(p.UpdateTime, src) != 0 {
		return false
	}
	return true
}
func (p *VirtualAccountBalanceData) Field4DeepEqual(src string) bool {

	if strings.Compare(p.BankType, src) != 0 {
		return false
	}
	return true
}
func (p *VirtualAccountBalanceData) Field5DeepEqual(src string) bool {

	if strings.Compare(p.VirtualAccountName, src) != 0 {
		return false
	}
	return true
}
func (p *VirtualAccountBalanceData) Field6DeepEqual(src string) bool {

	if strings.Compare(p.VirtualAccountBankName, src) != 0 {
		return false
	}
	return true
}

type BankVirtualAccountTranscationResponse struct {
	TransferReceiptId int64  `thrift:"transferReceiptId,1" frugal:"1,default,i64" json:"transferReceiptId"`
	SerialNo          string `thrift:"serialNo,2" frugal:"2,default,string" json:"serialNo"`
	AcceptNo          string `thrift:"acceptNo,3" frugal:"3,default,string" json:"acceptNo"`
	Status            string `thrift:"status,4" frugal:"4,default,string" json:"status"`
	Msg               string `thrift:"msg,5" frugal:"5,default,string" json:"msg"`
}

func NewBankVirtualAccountTranscationResponse() *BankVirtualAccountTranscationResponse {
	return &BankVirtualAccountTranscationResponse{}
}

func (p *BankVirtualAccountTranscationResponse) InitDefault() {
	*p = BankVirtualAccountTranscationResponse{}
}

func (p *BankVirtualAccountTranscationResponse) GetTransferReceiptId() (v int64) {
	return p.TransferReceiptId
}

func (p *BankVirtualAccountTranscationResponse) GetSerialNo() (v string) {
	return p.SerialNo
}

func (p *BankVirtualAccountTranscationResponse) GetAcceptNo() (v string) {
	return p.AcceptNo
}

func (p *BankVirtualAccountTranscationResponse) GetStatus() (v string) {
	return p.Status
}

func (p *BankVirtualAccountTranscationResponse) GetMsg() (v string) {
	return p.Msg
}
func (p *BankVirtualAccountTranscationResponse) SetTransferReceiptId(val int64) {
	p.TransferReceiptId = val
}
func (p *BankVirtualAccountTranscationResponse) SetSerialNo(val string) {
	p.SerialNo = val
}
func (p *BankVirtualAccountTranscationResponse) SetAcceptNo(val string) {
	p.AcceptNo = val
}
func (p *BankVirtualAccountTranscationResponse) SetStatus(val string) {
	p.Status = val
}
func (p *BankVirtualAccountTranscationResponse) SetMsg(val string) {
	p.Msg = val
}

var fieldIDToName_BankVirtualAccountTranscationResponse = map[int16]string{
	1: "transferReceiptId",
	2: "serialNo",
	3: "acceptNo",
	4: "status",
	5: "msg",
}

func (p *BankVirtualAccountTranscationResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankVirtualAccountTranscationResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankVirtualAccountTranscationResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.TransferReceiptId = v
	}
	return nil
}

func (p *BankVirtualAccountTranscationResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.SerialNo = v
	}
	return nil
}

func (p *BankVirtualAccountTranscationResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.AcceptNo = v
	}
	return nil
}

func (p *BankVirtualAccountTranscationResponse) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Status = v
	}
	return nil
}

func (p *BankVirtualAccountTranscationResponse) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Msg = v
	}
	return nil
}

func (p *BankVirtualAccountTranscationResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BankVirtualAccountTranscationResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankVirtualAccountTranscationResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("transferReceiptId", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TransferReceiptId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankVirtualAccountTranscationResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("serialNo", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.SerialNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BankVirtualAccountTranscationResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("acceptNo", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AcceptNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *BankVirtualAccountTranscationResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *BankVirtualAccountTranscationResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("msg", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Msg); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *BankVirtualAccountTranscationResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankVirtualAccountTranscationResponse(%+v)", *p)
}

func (p *BankVirtualAccountTranscationResponse) DeepEqual(ano *BankVirtualAccountTranscationResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TransferReceiptId) {
		return false
	}
	if !p.Field2DeepEqual(ano.SerialNo) {
		return false
	}
	if !p.Field3DeepEqual(ano.AcceptNo) {
		return false
	}
	if !p.Field4DeepEqual(ano.Status) {
		return false
	}
	if !p.Field5DeepEqual(ano.Msg) {
		return false
	}
	return true
}

func (p *BankVirtualAccountTranscationResponse) Field1DeepEqual(src int64) bool {

	if p.TransferReceiptId != src {
		return false
	}
	return true
}
func (p *BankVirtualAccountTranscationResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.SerialNo, src) != 0 {
		return false
	}
	return true
}
func (p *BankVirtualAccountTranscationResponse) Field3DeepEqual(src string) bool {

	if strings.Compare(p.AcceptNo, src) != 0 {
		return false
	}
	return true
}
func (p *BankVirtualAccountTranscationResponse) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Status, src) != 0 {
		return false
	}
	return true
}
func (p *BankVirtualAccountTranscationResponse) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Msg, src) != 0 {
		return false
	}
	return true
}

type PaymentReceiptData struct {
	Id                     int64                `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	OrganizationId         int64                `thrift:"organizationId,2" frugal:"2,default,i64" json:"organizationId"`
	CreatedAt              []byte               `thrift:"createdAt,3" frugal:"3,default,binary" json:"createdAt"`
	UpdatedAt              []byte               `thrift:"updatedAt,4" frugal:"4,default,binary" json:"updatedAt"`
	ProcessInstanceId      int64                `thrift:"processInstanceId,5" frugal:"5,default,i64" json:"processInstanceId"`
	Code                   string               `thrift:"code,6" frugal:"6,default,string" json:"code"`
	PayAmount              float64              `thrift:"payAmount,7" frugal:"7,default,double" json:"payAmount"`
	PublicPrivateFlag      string               `thrift:"publicPrivateFlag,8" frugal:"8,default,string" json:"publicPrivateFlag"`
	PayAccount             string               `thrift:"payAccount,9" frugal:"9,default,string" json:"payAccount"`
	PayAccountName         string               `thrift:"payAccountName,10" frugal:"10,default,string" json:"payAccountName"`
	PayAccountBankName     string               `thrift:"payAccountBankName,11" frugal:"11,default,string" json:"payAccountBankName"`
	PayAccountType         string               `thrift:"payAccountType,12" frugal:"12,default,string" json:"payAccountType"`
	ReceiveAccount         string               `thrift:"receiveAccount,13" frugal:"13,default,string" json:"receiveAccount"`
	ReceiveAccountName     string               `thrift:"receiveAccountName,14" frugal:"14,default,string" json:"receiveAccountName"`
	ReceiveAccountBankName string               `thrift:"receiveAccountBankName,15" frugal:"15,default,string" json:"receiveAccountBankName"`
	Purpose                string               `thrift:"purpose,16" frugal:"16,default,string" json:"purpose"`
	UnionBankNo            string               `thrift:"unionBankNo,17" frugal:"17,default,string" json:"unionBankNo"`
	ClearBankNo            string               `thrift:"clearBankNo,18" frugal:"18,default,string" json:"clearBankNo"`
	InsideOutsideBankType  string               `thrift:"insideOutsideBankType,19" frugal:"19,default,string" json:"insideOutsideBankType"`
	ChargeFee              float64              `thrift:"chargeFee,20" frugal:"20,default,double" json:"chargeFee"`
	OrderStatus            string               `thrift:"orderStatus,21" frugal:"21,default,string" json:"orderStatus"`
	RetCode                string               `thrift:"retCode,22" frugal:"22,default,string" json:"retCode"`
	RetMessage             string               `thrift:"retMessage,23" frugal:"23,default,string" json:"retMessage"`
	OrderFlowNo            string               `thrift:"orderFlowNo,24" frugal:"24,default,string" json:"orderFlowNo"`
	CanWrite               bool                 `thrift:"canWrite,25" frugal:"25,default,bool" json:"canWrite"`
	Type                   string               `thrift:"type,26" frugal:"26,default,string" json:"type"`
	ProcessInstanceItemId  int64                `thrift:"processInstanceItemId,27" frugal:"27,default,i64" json:"processInstanceItemId"`
	PaymentModeType        string               `thrift:"paymentModeType,28" frugal:"28,default,string" json:"paymentModeType"`
	ApplicantId            int64                `thrift:"applicantId,29" frugal:"29,default,i64" json:"applicantId"`
	ApplicantName          string               `thrift:"applicantName,30" frugal:"30,default,string" json:"applicantName"`
	FillingDt              string               `thrift:"fillingDt,31" frugal:"31,default,string" json:"fillingDt"`
	DepartmentId           int64                `thrift:"departmentId,32" frugal:"32,default,i64" json:"departmentId"`
	DepartmentName         string               `thrift:"departmentName,33" frugal:"33,default,string" json:"departmentName"`
	Attachments            string               `thrift:"attachments,34" frugal:"34,default,string" json:"attachments"`
	BusType                string               `thrift:"busType,35" frugal:"35,default,string" json:"busType"`
	BusOrderNo             string               `thrift:"busOrderNo,36" frugal:"36,default,string" json:"busOrderNo"`
	RefundSuccess          string               `thrift:"refundSuccess,37" frugal:"37,default,string" json:"refundSuccess"`
	ReceiptOrderNo         string               `thrift:"receiptOrderNo,38" frugal:"38,default,string" json:"receiptOrderNo"`
	Remark                 string               `thrift:"remark,39" frugal:"39,default,string" json:"remark"`
	ProcessAddTagItemVO    *ProcessAddTagItemVO `thrift:"processAddTagItemVO,40" frugal:"40,default,ProcessAddTagItemVO" json:"processAddTagItemVO"`
	CustomFields           []*CustomField       `thrift:"customFields,41" frugal:"41,default,list<CustomField>" json:"customFields"`
	ElectronicDocument     string               `thrift:"electronicDocument,42" frugal:"42,default,string" json:"electronicDocument"`
	ElectronicDocumentPng  string               `thrift:"electronicDocumentPng,43" frugal:"43,default,string" json:"electronicDocumentPng"`
	PaymentReason          string               `thrift:"paymentReason,44" frugal:"44,default,string" json:"paymentReason"`
}

func NewPaymentReceiptData() *PaymentReceiptData {
	return &PaymentReceiptData{}
}

func (p *PaymentReceiptData) InitDefault() {
	*p = PaymentReceiptData{}
}

func (p *PaymentReceiptData) GetId() (v int64) {
	return p.Id
}

func (p *PaymentReceiptData) GetOrganizationId() (v int64) {
	return p.OrganizationId
}

func (p *PaymentReceiptData) GetCreatedAt() (v []byte) {
	return p.CreatedAt
}

func (p *PaymentReceiptData) GetUpdatedAt() (v []byte) {
	return p.UpdatedAt
}

func (p *PaymentReceiptData) GetProcessInstanceId() (v int64) {
	return p.ProcessInstanceId
}

func (p *PaymentReceiptData) GetCode() (v string) {
	return p.Code
}

func (p *PaymentReceiptData) GetPayAmount() (v float64) {
	return p.PayAmount
}

func (p *PaymentReceiptData) GetPublicPrivateFlag() (v string) {
	return p.PublicPrivateFlag
}

func (p *PaymentReceiptData) GetPayAccount() (v string) {
	return p.PayAccount
}

func (p *PaymentReceiptData) GetPayAccountName() (v string) {
	return p.PayAccountName
}

func (p *PaymentReceiptData) GetPayAccountBankName() (v string) {
	return p.PayAccountBankName
}

func (p *PaymentReceiptData) GetPayAccountType() (v string) {
	return p.PayAccountType
}

func (p *PaymentReceiptData) GetReceiveAccount() (v string) {
	return p.ReceiveAccount
}

func (p *PaymentReceiptData) GetReceiveAccountName() (v string) {
	return p.ReceiveAccountName
}

func (p *PaymentReceiptData) GetReceiveAccountBankName() (v string) {
	return p.ReceiveAccountBankName
}

func (p *PaymentReceiptData) GetPurpose() (v string) {
	return p.Purpose
}

func (p *PaymentReceiptData) GetUnionBankNo() (v string) {
	return p.UnionBankNo
}

func (p *PaymentReceiptData) GetClearBankNo() (v string) {
	return p.ClearBankNo
}

func (p *PaymentReceiptData) GetInsideOutsideBankType() (v string) {
	return p.InsideOutsideBankType
}

func (p *PaymentReceiptData) GetChargeFee() (v float64) {
	return p.ChargeFee
}

func (p *PaymentReceiptData) GetOrderStatus() (v string) {
	return p.OrderStatus
}

func (p *PaymentReceiptData) GetRetCode() (v string) {
	return p.RetCode
}

func (p *PaymentReceiptData) GetRetMessage() (v string) {
	return p.RetMessage
}

func (p *PaymentReceiptData) GetOrderFlowNo() (v string) {
	return p.OrderFlowNo
}

func (p *PaymentReceiptData) GetCanWrite() (v bool) {
	return p.CanWrite
}

func (p *PaymentReceiptData) GetType() (v string) {
	return p.Type
}

func (p *PaymentReceiptData) GetProcessInstanceItemId() (v int64) {
	return p.ProcessInstanceItemId
}

func (p *PaymentReceiptData) GetPaymentModeType() (v string) {
	return p.PaymentModeType
}

func (p *PaymentReceiptData) GetApplicantId() (v int64) {
	return p.ApplicantId
}

func (p *PaymentReceiptData) GetApplicantName() (v string) {
	return p.ApplicantName
}

func (p *PaymentReceiptData) GetFillingDt() (v string) {
	return p.FillingDt
}

func (p *PaymentReceiptData) GetDepartmentId() (v int64) {
	return p.DepartmentId
}

func (p *PaymentReceiptData) GetDepartmentName() (v string) {
	return p.DepartmentName
}

func (p *PaymentReceiptData) GetAttachments() (v string) {
	return p.Attachments
}

func (p *PaymentReceiptData) GetBusType() (v string) {
	return p.BusType
}

func (p *PaymentReceiptData) GetBusOrderNo() (v string) {
	return p.BusOrderNo
}

func (p *PaymentReceiptData) GetRefundSuccess() (v string) {
	return p.RefundSuccess
}

func (p *PaymentReceiptData) GetReceiptOrderNo() (v string) {
	return p.ReceiptOrderNo
}

func (p *PaymentReceiptData) GetRemark() (v string) {
	return p.Remark
}

var PaymentReceiptData_ProcessAddTagItemVO_DEFAULT *ProcessAddTagItemVO

func (p *PaymentReceiptData) GetProcessAddTagItemVO() (v *ProcessAddTagItemVO) {
	if !p.IsSetProcessAddTagItemVO() {
		return PaymentReceiptData_ProcessAddTagItemVO_DEFAULT
	}
	return p.ProcessAddTagItemVO
}

func (p *PaymentReceiptData) GetCustomFields() (v []*CustomField) {
	return p.CustomFields
}

func (p *PaymentReceiptData) GetElectronicDocument() (v string) {
	return p.ElectronicDocument
}

func (p *PaymentReceiptData) GetElectronicDocumentPng() (v string) {
	return p.ElectronicDocumentPng
}

func (p *PaymentReceiptData) GetPaymentReason() (v string) {
	return p.PaymentReason
}
func (p *PaymentReceiptData) SetId(val int64) {
	p.Id = val
}
func (p *PaymentReceiptData) SetOrganizationId(val int64) {
	p.OrganizationId = val
}
func (p *PaymentReceiptData) SetCreatedAt(val []byte) {
	p.CreatedAt = val
}
func (p *PaymentReceiptData) SetUpdatedAt(val []byte) {
	p.UpdatedAt = val
}
func (p *PaymentReceiptData) SetProcessInstanceId(val int64) {
	p.ProcessInstanceId = val
}
func (p *PaymentReceiptData) SetCode(val string) {
	p.Code = val
}
func (p *PaymentReceiptData) SetPayAmount(val float64) {
	p.PayAmount = val
}
func (p *PaymentReceiptData) SetPublicPrivateFlag(val string) {
	p.PublicPrivateFlag = val
}
func (p *PaymentReceiptData) SetPayAccount(val string) {
	p.PayAccount = val
}
func (p *PaymentReceiptData) SetPayAccountName(val string) {
	p.PayAccountName = val
}
func (p *PaymentReceiptData) SetPayAccountBankName(val string) {
	p.PayAccountBankName = val
}
func (p *PaymentReceiptData) SetPayAccountType(val string) {
	p.PayAccountType = val
}
func (p *PaymentReceiptData) SetReceiveAccount(val string) {
	p.ReceiveAccount = val
}
func (p *PaymentReceiptData) SetReceiveAccountName(val string) {
	p.ReceiveAccountName = val
}
func (p *PaymentReceiptData) SetReceiveAccountBankName(val string) {
	p.ReceiveAccountBankName = val
}
func (p *PaymentReceiptData) SetPurpose(val string) {
	p.Purpose = val
}
func (p *PaymentReceiptData) SetUnionBankNo(val string) {
	p.UnionBankNo = val
}
func (p *PaymentReceiptData) SetClearBankNo(val string) {
	p.ClearBankNo = val
}
func (p *PaymentReceiptData) SetInsideOutsideBankType(val string) {
	p.InsideOutsideBankType = val
}
func (p *PaymentReceiptData) SetChargeFee(val float64) {
	p.ChargeFee = val
}
func (p *PaymentReceiptData) SetOrderStatus(val string) {
	p.OrderStatus = val
}
func (p *PaymentReceiptData) SetRetCode(val string) {
	p.RetCode = val
}
func (p *PaymentReceiptData) SetRetMessage(val string) {
	p.RetMessage = val
}
func (p *PaymentReceiptData) SetOrderFlowNo(val string) {
	p.OrderFlowNo = val
}
func (p *PaymentReceiptData) SetCanWrite(val bool) {
	p.CanWrite = val
}
func (p *PaymentReceiptData) SetType(val string) {
	p.Type = val
}
func (p *PaymentReceiptData) SetProcessInstanceItemId(val int64) {
	p.ProcessInstanceItemId = val
}
func (p *PaymentReceiptData) SetPaymentModeType(val string) {
	p.PaymentModeType = val
}
func (p *PaymentReceiptData) SetApplicantId(val int64) {
	p.ApplicantId = val
}
func (p *PaymentReceiptData) SetApplicantName(val string) {
	p.ApplicantName = val
}
func (p *PaymentReceiptData) SetFillingDt(val string) {
	p.FillingDt = val
}
func (p *PaymentReceiptData) SetDepartmentId(val int64) {
	p.DepartmentId = val
}
func (p *PaymentReceiptData) SetDepartmentName(val string) {
	p.DepartmentName = val
}
func (p *PaymentReceiptData) SetAttachments(val string) {
	p.Attachments = val
}
func (p *PaymentReceiptData) SetBusType(val string) {
	p.BusType = val
}
func (p *PaymentReceiptData) SetBusOrderNo(val string) {
	p.BusOrderNo = val
}
func (p *PaymentReceiptData) SetRefundSuccess(val string) {
	p.RefundSuccess = val
}
func (p *PaymentReceiptData) SetReceiptOrderNo(val string) {
	p.ReceiptOrderNo = val
}
func (p *PaymentReceiptData) SetRemark(val string) {
	p.Remark = val
}
func (p *PaymentReceiptData) SetProcessAddTagItemVO(val *ProcessAddTagItemVO) {
	p.ProcessAddTagItemVO = val
}
func (p *PaymentReceiptData) SetCustomFields(val []*CustomField) {
	p.CustomFields = val
}
func (p *PaymentReceiptData) SetElectronicDocument(val string) {
	p.ElectronicDocument = val
}
func (p *PaymentReceiptData) SetElectronicDocumentPng(val string) {
	p.ElectronicDocumentPng = val
}
func (p *PaymentReceiptData) SetPaymentReason(val string) {
	p.PaymentReason = val
}

var fieldIDToName_PaymentReceiptData = map[int16]string{
	1:  "id",
	2:  "organizationId",
	3:  "createdAt",
	4:  "updatedAt",
	5:  "processInstanceId",
	6:  "code",
	7:  "payAmount",
	8:  "publicPrivateFlag",
	9:  "payAccount",
	10: "payAccountName",
	11: "payAccountBankName",
	12: "payAccountType",
	13: "receiveAccount",
	14: "receiveAccountName",
	15: "receiveAccountBankName",
	16: "purpose",
	17: "unionBankNo",
	18: "clearBankNo",
	19: "insideOutsideBankType",
	20: "chargeFee",
	21: "orderStatus",
	22: "retCode",
	23: "retMessage",
	24: "orderFlowNo",
	25: "canWrite",
	26: "type",
	27: "processInstanceItemId",
	28: "paymentModeType",
	29: "applicantId",
	30: "applicantName",
	31: "fillingDt",
	32: "departmentId",
	33: "departmentName",
	34: "attachments",
	35: "busType",
	36: "busOrderNo",
	37: "refundSuccess",
	38: "receiptOrderNo",
	39: "remark",
	40: "processAddTagItemVO",
	41: "customFields",
	42: "electronicDocument",
	43: "electronicDocumentPng",
	44: "paymentReason",
}

func (p *PaymentReceiptData) IsSetProcessAddTagItemVO() bool {
	return p.ProcessAddTagItemVO != nil
}

func (p *PaymentReceiptData) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 17:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 18:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 19:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 20:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 21:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 22:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 23:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField23(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 24:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField24(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 25:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField25(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 26:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField26(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 27:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField27(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 28:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField28(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 29:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField29(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 30:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField30(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 31:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField31(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 32:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField32(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 33:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField33(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 34:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField34(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 35:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField35(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 36:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField36(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 37:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField37(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 38:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField38(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 39:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField39(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 40:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField40(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 41:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField41(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 42:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField42(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 43:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField43(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 44:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField44(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PaymentReceiptData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PaymentReceiptData) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *PaymentReceiptData) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.OrganizationId = v
	}
	return nil
}

func (p *PaymentReceiptData) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		p.CreatedAt = []byte(v)
	}
	return nil
}

func (p *PaymentReceiptData) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		p.UpdatedAt = []byte(v)
	}
	return nil
}

func (p *PaymentReceiptData) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ProcessInstanceId = v
	}
	return nil
}

func (p *PaymentReceiptData) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Code = v
	}
	return nil
}

func (p *PaymentReceiptData) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		p.PayAmount = v
	}
	return nil
}

func (p *PaymentReceiptData) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PublicPrivateFlag = v
	}
	return nil
}

func (p *PaymentReceiptData) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PayAccount = v
	}
	return nil
}

func (p *PaymentReceiptData) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PayAccountName = v
	}
	return nil
}

func (p *PaymentReceiptData) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PayAccountBankName = v
	}
	return nil
}

func (p *PaymentReceiptData) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PayAccountType = v
	}
	return nil
}

func (p *PaymentReceiptData) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ReceiveAccount = v
	}
	return nil
}

func (p *PaymentReceiptData) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ReceiveAccountName = v
	}
	return nil
}

func (p *PaymentReceiptData) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ReceiveAccountBankName = v
	}
	return nil
}

func (p *PaymentReceiptData) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Purpose = v
	}
	return nil
}

func (p *PaymentReceiptData) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UnionBankNo = v
	}
	return nil
}

func (p *PaymentReceiptData) ReadField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClearBankNo = v
	}
	return nil
}

func (p *PaymentReceiptData) ReadField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.InsideOutsideBankType = v
	}
	return nil
}

func (p *PaymentReceiptData) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		p.ChargeFee = v
	}
	return nil
}

func (p *PaymentReceiptData) ReadField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.OrderStatus = v
	}
	return nil
}

func (p *PaymentReceiptData) ReadField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.RetCode = v
	}
	return nil
}

func (p *PaymentReceiptData) ReadField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.RetMessage = v
	}
	return nil
}

func (p *PaymentReceiptData) ReadField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.OrderFlowNo = v
	}
	return nil
}

func (p *PaymentReceiptData) ReadField25(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.CanWrite = v
	}
	return nil
}

func (p *PaymentReceiptData) ReadField26(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Type = v
	}
	return nil
}

func (p *PaymentReceiptData) ReadField27(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ProcessInstanceItemId = v
	}
	return nil
}

func (p *PaymentReceiptData) ReadField28(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PaymentModeType = v
	}
	return nil
}

func (p *PaymentReceiptData) ReadField29(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ApplicantId = v
	}
	return nil
}

func (p *PaymentReceiptData) ReadField30(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ApplicantName = v
	}
	return nil
}

func (p *PaymentReceiptData) ReadField31(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.FillingDt = v
	}
	return nil
}

func (p *PaymentReceiptData) ReadField32(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.DepartmentId = v
	}
	return nil
}

func (p *PaymentReceiptData) ReadField33(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.DepartmentName = v
	}
	return nil
}

func (p *PaymentReceiptData) ReadField34(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Attachments = v
	}
	return nil
}

func (p *PaymentReceiptData) ReadField35(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.BusType = v
	}
	return nil
}

func (p *PaymentReceiptData) ReadField36(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.BusOrderNo = v
	}
	return nil
}

func (p *PaymentReceiptData) ReadField37(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.RefundSuccess = v
	}
	return nil
}

func (p *PaymentReceiptData) ReadField38(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ReceiptOrderNo = v
	}
	return nil
}

func (p *PaymentReceiptData) ReadField39(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Remark = v
	}
	return nil
}

func (p *PaymentReceiptData) ReadField40(iprot thrift.TProtocol) error {
	p.ProcessAddTagItemVO = NewProcessAddTagItemVO()
	if err := p.ProcessAddTagItemVO.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PaymentReceiptData) ReadField41(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.CustomFields = make([]*CustomField, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewCustomField()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.CustomFields = append(p.CustomFields, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *PaymentReceiptData) ReadField42(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ElectronicDocument = v
	}
	return nil
}

func (p *PaymentReceiptData) ReadField43(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ElectronicDocumentPng = v
	}
	return nil
}

func (p *PaymentReceiptData) ReadField44(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PaymentReason = v
	}
	return nil
}

func (p *PaymentReceiptData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PaymentReceiptData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField23(oprot); err != nil {
			fieldId = 23
			goto WriteFieldError
		}
		if err = p.writeField24(oprot); err != nil {
			fieldId = 24
			goto WriteFieldError
		}
		if err = p.writeField25(oprot); err != nil {
			fieldId = 25
			goto WriteFieldError
		}
		if err = p.writeField26(oprot); err != nil {
			fieldId = 26
			goto WriteFieldError
		}
		if err = p.writeField27(oprot); err != nil {
			fieldId = 27
			goto WriteFieldError
		}
		if err = p.writeField28(oprot); err != nil {
			fieldId = 28
			goto WriteFieldError
		}
		if err = p.writeField29(oprot); err != nil {
			fieldId = 29
			goto WriteFieldError
		}
		if err = p.writeField30(oprot); err != nil {
			fieldId = 30
			goto WriteFieldError
		}
		if err = p.writeField31(oprot); err != nil {
			fieldId = 31
			goto WriteFieldError
		}
		if err = p.writeField32(oprot); err != nil {
			fieldId = 32
			goto WriteFieldError
		}
		if err = p.writeField33(oprot); err != nil {
			fieldId = 33
			goto WriteFieldError
		}
		if err = p.writeField34(oprot); err != nil {
			fieldId = 34
			goto WriteFieldError
		}
		if err = p.writeField35(oprot); err != nil {
			fieldId = 35
			goto WriteFieldError
		}
		if err = p.writeField36(oprot); err != nil {
			fieldId = 36
			goto WriteFieldError
		}
		if err = p.writeField37(oprot); err != nil {
			fieldId = 37
			goto WriteFieldError
		}
		if err = p.writeField38(oprot); err != nil {
			fieldId = 38
			goto WriteFieldError
		}
		if err = p.writeField39(oprot); err != nil {
			fieldId = 39
			goto WriteFieldError
		}
		if err = p.writeField40(oprot); err != nil {
			fieldId = 40
			goto WriteFieldError
		}
		if err = p.writeField41(oprot); err != nil {
			fieldId = 41
			goto WriteFieldError
		}
		if err = p.writeField42(oprot); err != nil {
			fieldId = 42
			goto WriteFieldError
		}
		if err = p.writeField43(oprot); err != nil {
			fieldId = 43
			goto WriteFieldError
		}
		if err = p.writeField44(oprot); err != nil {
			fieldId = 44
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PaymentReceiptData) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PaymentReceiptData) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("organizationId", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.OrganizationId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *PaymentReceiptData) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("createdAt", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.CreatedAt)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *PaymentReceiptData) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updatedAt", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.UpdatedAt)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *PaymentReceiptData) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("processInstanceId", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ProcessInstanceId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *PaymentReceiptData) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *PaymentReceiptData) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("payAmount", thrift.DOUBLE, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.PayAmount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *PaymentReceiptData) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("publicPrivateFlag", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PublicPrivateFlag); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *PaymentReceiptData) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("payAccount", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PayAccount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *PaymentReceiptData) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("payAccountName", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PayAccountName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *PaymentReceiptData) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("payAccountBankName", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PayAccountBankName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *PaymentReceiptData) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("payAccountType", thrift.STRING, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PayAccountType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *PaymentReceiptData) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("receiveAccount", thrift.STRING, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ReceiveAccount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *PaymentReceiptData) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("receiveAccountName", thrift.STRING, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ReceiveAccountName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *PaymentReceiptData) writeField15(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("receiveAccountBankName", thrift.STRING, 15); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ReceiveAccountBankName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *PaymentReceiptData) writeField16(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("purpose", thrift.STRING, 16); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Purpose); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *PaymentReceiptData) writeField17(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("unionBankNo", thrift.STRING, 17); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UnionBankNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *PaymentReceiptData) writeField18(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("clearBankNo", thrift.STRING, 18); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClearBankNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *PaymentReceiptData) writeField19(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("insideOutsideBankType", thrift.STRING, 19); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.InsideOutsideBankType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *PaymentReceiptData) writeField20(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("chargeFee", thrift.DOUBLE, 20); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.ChargeFee); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *PaymentReceiptData) writeField21(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("orderStatus", thrift.STRING, 21); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OrderStatus); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *PaymentReceiptData) writeField22(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("retCode", thrift.STRING, 22); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.RetCode); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *PaymentReceiptData) writeField23(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("retMessage", thrift.STRING, 23); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.RetMessage); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 end error: ", p), err)
}

func (p *PaymentReceiptData) writeField24(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("orderFlowNo", thrift.STRING, 24); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OrderFlowNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 end error: ", p), err)
}

func (p *PaymentReceiptData) writeField25(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("canWrite", thrift.BOOL, 25); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.CanWrite); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 end error: ", p), err)
}

func (p *PaymentReceiptData) writeField26(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("type", thrift.STRING, 26); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Type); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 end error: ", p), err)
}

func (p *PaymentReceiptData) writeField27(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("processInstanceItemId", thrift.I64, 27); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ProcessInstanceItemId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 end error: ", p), err)
}

func (p *PaymentReceiptData) writeField28(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("paymentModeType", thrift.STRING, 28); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PaymentModeType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 end error: ", p), err)
}

func (p *PaymentReceiptData) writeField29(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("applicantId", thrift.I64, 29); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ApplicantId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 29 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 29 end error: ", p), err)
}

func (p *PaymentReceiptData) writeField30(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("applicantName", thrift.STRING, 30); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ApplicantName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 30 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 30 end error: ", p), err)
}

func (p *PaymentReceiptData) writeField31(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("fillingDt", thrift.STRING, 31); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FillingDt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 end error: ", p), err)
}

func (p *PaymentReceiptData) writeField32(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("departmentId", thrift.I64, 32); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.DepartmentId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 32 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 32 end error: ", p), err)
}

func (p *PaymentReceiptData) writeField33(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("departmentName", thrift.STRING, 33); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.DepartmentName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 33 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 33 end error: ", p), err)
}

func (p *PaymentReceiptData) writeField34(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("attachments", thrift.STRING, 34); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Attachments); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 34 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 34 end error: ", p), err)
}

func (p *PaymentReceiptData) writeField35(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("busType", thrift.STRING, 35); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.BusType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 35 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 35 end error: ", p), err)
}

func (p *PaymentReceiptData) writeField36(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("busOrderNo", thrift.STRING, 36); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.BusOrderNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 36 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 36 end error: ", p), err)
}

func (p *PaymentReceiptData) writeField37(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("refundSuccess", thrift.STRING, 37); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.RefundSuccess); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 37 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 37 end error: ", p), err)
}

func (p *PaymentReceiptData) writeField38(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("receiptOrderNo", thrift.STRING, 38); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ReceiptOrderNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 38 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 38 end error: ", p), err)
}

func (p *PaymentReceiptData) writeField39(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("remark", thrift.STRING, 39); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Remark); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 39 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 39 end error: ", p), err)
}

func (p *PaymentReceiptData) writeField40(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("processAddTagItemVO", thrift.STRUCT, 40); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.ProcessAddTagItemVO.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 40 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 40 end error: ", p), err)
}

func (p *PaymentReceiptData) writeField41(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("customFields", thrift.LIST, 41); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.CustomFields)); err != nil {
		return err
	}
	for _, v := range p.CustomFields {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 41 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 41 end error: ", p), err)
}

func (p *PaymentReceiptData) writeField42(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("electronicDocument", thrift.STRING, 42); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ElectronicDocument); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 42 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 42 end error: ", p), err)
}

func (p *PaymentReceiptData) writeField43(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("electronicDocumentPng", thrift.STRING, 43); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ElectronicDocumentPng); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 43 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 43 end error: ", p), err)
}

func (p *PaymentReceiptData) writeField44(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("paymentReason", thrift.STRING, 44); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PaymentReason); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 44 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 44 end error: ", p), err)
}

func (p *PaymentReceiptData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaymentReceiptData(%+v)", *p)
}

func (p *PaymentReceiptData) DeepEqual(ano *PaymentReceiptData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.OrganizationId) {
		return false
	}
	if !p.Field3DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field4DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field5DeepEqual(ano.ProcessInstanceId) {
		return false
	}
	if !p.Field6DeepEqual(ano.Code) {
		return false
	}
	if !p.Field7DeepEqual(ano.PayAmount) {
		return false
	}
	if !p.Field8DeepEqual(ano.PublicPrivateFlag) {
		return false
	}
	if !p.Field9DeepEqual(ano.PayAccount) {
		return false
	}
	if !p.Field10DeepEqual(ano.PayAccountName) {
		return false
	}
	if !p.Field11DeepEqual(ano.PayAccountBankName) {
		return false
	}
	if !p.Field12DeepEqual(ano.PayAccountType) {
		return false
	}
	if !p.Field13DeepEqual(ano.ReceiveAccount) {
		return false
	}
	if !p.Field14DeepEqual(ano.ReceiveAccountName) {
		return false
	}
	if !p.Field15DeepEqual(ano.ReceiveAccountBankName) {
		return false
	}
	if !p.Field16DeepEqual(ano.Purpose) {
		return false
	}
	if !p.Field17DeepEqual(ano.UnionBankNo) {
		return false
	}
	if !p.Field18DeepEqual(ano.ClearBankNo) {
		return false
	}
	if !p.Field19DeepEqual(ano.InsideOutsideBankType) {
		return false
	}
	if !p.Field20DeepEqual(ano.ChargeFee) {
		return false
	}
	if !p.Field21DeepEqual(ano.OrderStatus) {
		return false
	}
	if !p.Field22DeepEqual(ano.RetCode) {
		return false
	}
	if !p.Field23DeepEqual(ano.RetMessage) {
		return false
	}
	if !p.Field24DeepEqual(ano.OrderFlowNo) {
		return false
	}
	if !p.Field25DeepEqual(ano.CanWrite) {
		return false
	}
	if !p.Field26DeepEqual(ano.Type) {
		return false
	}
	if !p.Field27DeepEqual(ano.ProcessInstanceItemId) {
		return false
	}
	if !p.Field28DeepEqual(ano.PaymentModeType) {
		return false
	}
	if !p.Field29DeepEqual(ano.ApplicantId) {
		return false
	}
	if !p.Field30DeepEqual(ano.ApplicantName) {
		return false
	}
	if !p.Field31DeepEqual(ano.FillingDt) {
		return false
	}
	if !p.Field32DeepEqual(ano.DepartmentId) {
		return false
	}
	if !p.Field33DeepEqual(ano.DepartmentName) {
		return false
	}
	if !p.Field34DeepEqual(ano.Attachments) {
		return false
	}
	if !p.Field35DeepEqual(ano.BusType) {
		return false
	}
	if !p.Field36DeepEqual(ano.BusOrderNo) {
		return false
	}
	if !p.Field37DeepEqual(ano.RefundSuccess) {
		return false
	}
	if !p.Field38DeepEqual(ano.ReceiptOrderNo) {
		return false
	}
	if !p.Field39DeepEqual(ano.Remark) {
		return false
	}
	if !p.Field40DeepEqual(ano.ProcessAddTagItemVO) {
		return false
	}
	if !p.Field41DeepEqual(ano.CustomFields) {
		return false
	}
	if !p.Field42DeepEqual(ano.ElectronicDocument) {
		return false
	}
	if !p.Field43DeepEqual(ano.ElectronicDocumentPng) {
		return false
	}
	if !p.Field44DeepEqual(ano.PaymentReason) {
		return false
	}
	return true
}

func (p *PaymentReceiptData) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *PaymentReceiptData) Field2DeepEqual(src int64) bool {

	if p.OrganizationId != src {
		return false
	}
	return true
}
func (p *PaymentReceiptData) Field3DeepEqual(src []byte) bool {

	if bytes.Compare(p.CreatedAt, src) != 0 {
		return false
	}
	return true
}
func (p *PaymentReceiptData) Field4DeepEqual(src []byte) bool {

	if bytes.Compare(p.UpdatedAt, src) != 0 {
		return false
	}
	return true
}
func (p *PaymentReceiptData) Field5DeepEqual(src int64) bool {

	if p.ProcessInstanceId != src {
		return false
	}
	return true
}
func (p *PaymentReceiptData) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Code, src) != 0 {
		return false
	}
	return true
}
func (p *PaymentReceiptData) Field7DeepEqual(src float64) bool {

	if p.PayAmount != src {
		return false
	}
	return true
}
func (p *PaymentReceiptData) Field8DeepEqual(src string) bool {

	if strings.Compare(p.PublicPrivateFlag, src) != 0 {
		return false
	}
	return true
}
func (p *PaymentReceiptData) Field9DeepEqual(src string) bool {

	if strings.Compare(p.PayAccount, src) != 0 {
		return false
	}
	return true
}
func (p *PaymentReceiptData) Field10DeepEqual(src string) bool {

	if strings.Compare(p.PayAccountName, src) != 0 {
		return false
	}
	return true
}
func (p *PaymentReceiptData) Field11DeepEqual(src string) bool {

	if strings.Compare(p.PayAccountBankName, src) != 0 {
		return false
	}
	return true
}
func (p *PaymentReceiptData) Field12DeepEqual(src string) bool {

	if strings.Compare(p.PayAccountType, src) != 0 {
		return false
	}
	return true
}
func (p *PaymentReceiptData) Field13DeepEqual(src string) bool {

	if strings.Compare(p.ReceiveAccount, src) != 0 {
		return false
	}
	return true
}
func (p *PaymentReceiptData) Field14DeepEqual(src string) bool {

	if strings.Compare(p.ReceiveAccountName, src) != 0 {
		return false
	}
	return true
}
func (p *PaymentReceiptData) Field15DeepEqual(src string) bool {

	if strings.Compare(p.ReceiveAccountBankName, src) != 0 {
		return false
	}
	return true
}
func (p *PaymentReceiptData) Field16DeepEqual(src string) bool {

	if strings.Compare(p.Purpose, src) != 0 {
		return false
	}
	return true
}
func (p *PaymentReceiptData) Field17DeepEqual(src string) bool {

	if strings.Compare(p.UnionBankNo, src) != 0 {
		return false
	}
	return true
}
func (p *PaymentReceiptData) Field18DeepEqual(src string) bool {

	if strings.Compare(p.ClearBankNo, src) != 0 {
		return false
	}
	return true
}
func (p *PaymentReceiptData) Field19DeepEqual(src string) bool {

	if strings.Compare(p.InsideOutsideBankType, src) != 0 {
		return false
	}
	return true
}
func (p *PaymentReceiptData) Field20DeepEqual(src float64) bool {

	if p.ChargeFee != src {
		return false
	}
	return true
}
func (p *PaymentReceiptData) Field21DeepEqual(src string) bool {

	if strings.Compare(p.OrderStatus, src) != 0 {
		return false
	}
	return true
}
func (p *PaymentReceiptData) Field22DeepEqual(src string) bool {

	if strings.Compare(p.RetCode, src) != 0 {
		return false
	}
	return true
}
func (p *PaymentReceiptData) Field23DeepEqual(src string) bool {

	if strings.Compare(p.RetMessage, src) != 0 {
		return false
	}
	return true
}
func (p *PaymentReceiptData) Field24DeepEqual(src string) bool {

	if strings.Compare(p.OrderFlowNo, src) != 0 {
		return false
	}
	return true
}
func (p *PaymentReceiptData) Field25DeepEqual(src bool) bool {

	if p.CanWrite != src {
		return false
	}
	return true
}
func (p *PaymentReceiptData) Field26DeepEqual(src string) bool {

	if strings.Compare(p.Type, src) != 0 {
		return false
	}
	return true
}
func (p *PaymentReceiptData) Field27DeepEqual(src int64) bool {

	if p.ProcessInstanceItemId != src {
		return false
	}
	return true
}
func (p *PaymentReceiptData) Field28DeepEqual(src string) bool {

	if strings.Compare(p.PaymentModeType, src) != 0 {
		return false
	}
	return true
}
func (p *PaymentReceiptData) Field29DeepEqual(src int64) bool {

	if p.ApplicantId != src {
		return false
	}
	return true
}
func (p *PaymentReceiptData) Field30DeepEqual(src string) bool {

	if strings.Compare(p.ApplicantName, src) != 0 {
		return false
	}
	return true
}
func (p *PaymentReceiptData) Field31DeepEqual(src string) bool {

	if strings.Compare(p.FillingDt, src) != 0 {
		return false
	}
	return true
}
func (p *PaymentReceiptData) Field32DeepEqual(src int64) bool {

	if p.DepartmentId != src {
		return false
	}
	return true
}
func (p *PaymentReceiptData) Field33DeepEqual(src string) bool {

	if strings.Compare(p.DepartmentName, src) != 0 {
		return false
	}
	return true
}
func (p *PaymentReceiptData) Field34DeepEqual(src string) bool {

	if strings.Compare(p.Attachments, src) != 0 {
		return false
	}
	return true
}
func (p *PaymentReceiptData) Field35DeepEqual(src string) bool {

	if strings.Compare(p.BusType, src) != 0 {
		return false
	}
	return true
}
func (p *PaymentReceiptData) Field36DeepEqual(src string) bool {

	if strings.Compare(p.BusOrderNo, src) != 0 {
		return false
	}
	return true
}
func (p *PaymentReceiptData) Field37DeepEqual(src string) bool {

	if strings.Compare(p.RefundSuccess, src) != 0 {
		return false
	}
	return true
}
func (p *PaymentReceiptData) Field38DeepEqual(src string) bool {

	if strings.Compare(p.ReceiptOrderNo, src) != 0 {
		return false
	}
	return true
}
func (p *PaymentReceiptData) Field39DeepEqual(src string) bool {

	if strings.Compare(p.Remark, src) != 0 {
		return false
	}
	return true
}
func (p *PaymentReceiptData) Field40DeepEqual(src *ProcessAddTagItemVO) bool {

	if !p.ProcessAddTagItemVO.DeepEqual(src) {
		return false
	}
	return true
}
func (p *PaymentReceiptData) Field41DeepEqual(src []*CustomField) bool {

	if len(p.CustomFields) != len(src) {
		return false
	}
	for i, v := range p.CustomFields {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *PaymentReceiptData) Field42DeepEqual(src string) bool {

	if strings.Compare(p.ElectronicDocument, src) != 0 {
		return false
	}
	return true
}
func (p *PaymentReceiptData) Field43DeepEqual(src string) bool {

	if strings.Compare(p.ElectronicDocumentPng, src) != 0 {
		return false
	}
	return true
}
func (p *PaymentReceiptData) Field44DeepEqual(src string) bool {

	if strings.Compare(p.PaymentReason, src) != 0 {
		return false
	}
	return true
}

type ListPaymentReceiptRequest struct {
	PageNum                int32  `thrift:"pageNum,1,required" frugal:"1,required,i32" json:"pageNum"`
	PageSize               int32  `thrift:"pageSize,2,required" frugal:"2,required,i32" json:"pageSize"`
	Sort                   string `thrift:"sort,3" frugal:"3,default,string" json:"sort"`
	Code                   string `thrift:"code,4" frugal:"4,default,string" json:"code"`
	ReceiveAccount         string `thrift:"receiveAccount,5" frugal:"5,default,string" json:"receiveAccount"`
	ReceiveAccountName     string `thrift:"receiveAccountName,6" frugal:"6,default,string" json:"receiveAccountName"`
	ReceiveAccountBankName string `thrift:"receiveAccountBankName,7" frugal:"7,default,string" json:"receiveAccountBankName"`
	Purpose                string `thrift:"purpose,8" frugal:"8,default,string" json:"purpose"`
	OrderStatus            string `thrift:"orderStatus,9" frugal:"9,default,string" json:"orderStatus"`
	OrderFlowNo            string `thrift:"orderFlowNo,10" frugal:"10,default,string" json:"orderFlowNo"`
	UnionBankNo            string `thrift:"unionBankNo,11" frugal:"11,default,string" json:"unionBankNo"`
	ClearBankNo            string `thrift:"clearBankNo,12" frugal:"12,default,string" json:"clearBankNo"`
	CreateTimeStart        string `thrift:"createTimeStart,13" frugal:"13,default,string" json:"createTimeStart"`
	CreateTimeEnd          string `thrift:"createTimeEnd,14" frugal:"14,default,string" json:"createTimeEnd"`
	Type                   string `thrift:"type,15" frugal:"15,default,string" json:"type"`
	ProcessName            string `thrift:"processName,16" frugal:"16,default,string" json:"processName"`
	ProcessCodes           string `thrift:"processCodes,17" frugal:"17,default,string" json:"processCodes"`
	ProcessStatus          string `thrift:"processStatus,18" frugal:"18,default,string" json:"processStatus"`
	RefundSuccess          string `thrift:"refundSuccess,19" frugal:"19,default,string" json:"refundSuccess"`
	ProcessCurrentUserName string `thrift:"processCurrentUserName,20" frugal:"20,default,string" json:"processCurrentUserName"`
	ProcessCurrentUserId   int64  `thrift:"processCurrentUserId,21" frugal:"21,default,i64" json:"processCurrentUserId"`
	ReceiptOrderNo         string `thrift:"receiptOrderNo,22" frugal:"22,default,string" json:"receiptOrderNo"`
	EndTime                string `thrift:"endTime,23" frugal:"23,default,string" json:"endTime"`
	BeginTime              string `thrift:"beginTime,24" frugal:"24,default,string" json:"beginTime"`
	PaymentModeType        string `thrift:"paymentModeType,25" frugal:"25,default,string" json:"paymentModeType"`
	ApplicantName          string `thrift:"applicantName,26" frugal:"26,default,string" json:"applicantName"`
}

func NewListPaymentReceiptRequest() *ListPaymentReceiptRequest {
	return &ListPaymentReceiptRequest{}
}

func (p *ListPaymentReceiptRequest) InitDefault() {
	*p = ListPaymentReceiptRequest{}
}

func (p *ListPaymentReceiptRequest) GetPageNum() (v int32) {
	return p.PageNum
}

func (p *ListPaymentReceiptRequest) GetPageSize() (v int32) {
	return p.PageSize
}

func (p *ListPaymentReceiptRequest) GetSort() (v string) {
	return p.Sort
}

func (p *ListPaymentReceiptRequest) GetCode() (v string) {
	return p.Code
}

func (p *ListPaymentReceiptRequest) GetReceiveAccount() (v string) {
	return p.ReceiveAccount
}

func (p *ListPaymentReceiptRequest) GetReceiveAccountName() (v string) {
	return p.ReceiveAccountName
}

func (p *ListPaymentReceiptRequest) GetReceiveAccountBankName() (v string) {
	return p.ReceiveAccountBankName
}

func (p *ListPaymentReceiptRequest) GetPurpose() (v string) {
	return p.Purpose
}

func (p *ListPaymentReceiptRequest) GetOrderStatus() (v string) {
	return p.OrderStatus
}

func (p *ListPaymentReceiptRequest) GetOrderFlowNo() (v string) {
	return p.OrderFlowNo
}

func (p *ListPaymentReceiptRequest) GetUnionBankNo() (v string) {
	return p.UnionBankNo
}

func (p *ListPaymentReceiptRequest) GetClearBankNo() (v string) {
	return p.ClearBankNo
}

func (p *ListPaymentReceiptRequest) GetCreateTimeStart() (v string) {
	return p.CreateTimeStart
}

func (p *ListPaymentReceiptRequest) GetCreateTimeEnd() (v string) {
	return p.CreateTimeEnd
}

func (p *ListPaymentReceiptRequest) GetType() (v string) {
	return p.Type
}

func (p *ListPaymentReceiptRequest) GetProcessName() (v string) {
	return p.ProcessName
}

func (p *ListPaymentReceiptRequest) GetProcessCodes() (v string) {
	return p.ProcessCodes
}

func (p *ListPaymentReceiptRequest) GetProcessStatus() (v string) {
	return p.ProcessStatus
}

func (p *ListPaymentReceiptRequest) GetRefundSuccess() (v string) {
	return p.RefundSuccess
}

func (p *ListPaymentReceiptRequest) GetProcessCurrentUserName() (v string) {
	return p.ProcessCurrentUserName
}

func (p *ListPaymentReceiptRequest) GetProcessCurrentUserId() (v int64) {
	return p.ProcessCurrentUserId
}

func (p *ListPaymentReceiptRequest) GetReceiptOrderNo() (v string) {
	return p.ReceiptOrderNo
}

func (p *ListPaymentReceiptRequest) GetEndTime() (v string) {
	return p.EndTime
}

func (p *ListPaymentReceiptRequest) GetBeginTime() (v string) {
	return p.BeginTime
}

func (p *ListPaymentReceiptRequest) GetPaymentModeType() (v string) {
	return p.PaymentModeType
}

func (p *ListPaymentReceiptRequest) GetApplicantName() (v string) {
	return p.ApplicantName
}
func (p *ListPaymentReceiptRequest) SetPageNum(val int32) {
	p.PageNum = val
}
func (p *ListPaymentReceiptRequest) SetPageSize(val int32) {
	p.PageSize = val
}
func (p *ListPaymentReceiptRequest) SetSort(val string) {
	p.Sort = val
}
func (p *ListPaymentReceiptRequest) SetCode(val string) {
	p.Code = val
}
func (p *ListPaymentReceiptRequest) SetReceiveAccount(val string) {
	p.ReceiveAccount = val
}
func (p *ListPaymentReceiptRequest) SetReceiveAccountName(val string) {
	p.ReceiveAccountName = val
}
func (p *ListPaymentReceiptRequest) SetReceiveAccountBankName(val string) {
	p.ReceiveAccountBankName = val
}
func (p *ListPaymentReceiptRequest) SetPurpose(val string) {
	p.Purpose = val
}
func (p *ListPaymentReceiptRequest) SetOrderStatus(val string) {
	p.OrderStatus = val
}
func (p *ListPaymentReceiptRequest) SetOrderFlowNo(val string) {
	p.OrderFlowNo = val
}
func (p *ListPaymentReceiptRequest) SetUnionBankNo(val string) {
	p.UnionBankNo = val
}
func (p *ListPaymentReceiptRequest) SetClearBankNo(val string) {
	p.ClearBankNo = val
}
func (p *ListPaymentReceiptRequest) SetCreateTimeStart(val string) {
	p.CreateTimeStart = val
}
func (p *ListPaymentReceiptRequest) SetCreateTimeEnd(val string) {
	p.CreateTimeEnd = val
}
func (p *ListPaymentReceiptRequest) SetType(val string) {
	p.Type = val
}
func (p *ListPaymentReceiptRequest) SetProcessName(val string) {
	p.ProcessName = val
}
func (p *ListPaymentReceiptRequest) SetProcessCodes(val string) {
	p.ProcessCodes = val
}
func (p *ListPaymentReceiptRequest) SetProcessStatus(val string) {
	p.ProcessStatus = val
}
func (p *ListPaymentReceiptRequest) SetRefundSuccess(val string) {
	p.RefundSuccess = val
}
func (p *ListPaymentReceiptRequest) SetProcessCurrentUserName(val string) {
	p.ProcessCurrentUserName = val
}
func (p *ListPaymentReceiptRequest) SetProcessCurrentUserId(val int64) {
	p.ProcessCurrentUserId = val
}
func (p *ListPaymentReceiptRequest) SetReceiptOrderNo(val string) {
	p.ReceiptOrderNo = val
}
func (p *ListPaymentReceiptRequest) SetEndTime(val string) {
	p.EndTime = val
}
func (p *ListPaymentReceiptRequest) SetBeginTime(val string) {
	p.BeginTime = val
}
func (p *ListPaymentReceiptRequest) SetPaymentModeType(val string) {
	p.PaymentModeType = val
}
func (p *ListPaymentReceiptRequest) SetApplicantName(val string) {
	p.ApplicantName = val
}

var fieldIDToName_ListPaymentReceiptRequest = map[int16]string{
	1:  "pageNum",
	2:  "pageSize",
	3:  "sort",
	4:  "code",
	5:  "receiveAccount",
	6:  "receiveAccountName",
	7:  "receiveAccountBankName",
	8:  "purpose",
	9:  "orderStatus",
	10: "orderFlowNo",
	11: "unionBankNo",
	12: "clearBankNo",
	13: "createTimeStart",
	14: "createTimeEnd",
	15: "type",
	16: "processName",
	17: "processCodes",
	18: "processStatus",
	19: "refundSuccess",
	20: "processCurrentUserName",
	21: "processCurrentUserId",
	22: "receiptOrderNo",
	23: "endTime",
	24: "beginTime",
	25: "paymentModeType",
	26: "applicantName",
}

func (p *ListPaymentReceiptRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPageNum bool = false
	var issetPageSize bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPageNum = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetPageSize = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 17:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 18:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 19:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 20:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 21:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 22:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 23:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField23(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 24:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField24(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 25:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField25(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 26:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField26(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPageNum {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPageSize {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListPaymentReceiptRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListPaymentReceiptRequest[fieldId]))
}

func (p *ListPaymentReceiptRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.PageNum = v
	}
	return nil
}

func (p *ListPaymentReceiptRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.PageSize = v
	}
	return nil
}

func (p *ListPaymentReceiptRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Sort = v
	}
	return nil
}

func (p *ListPaymentReceiptRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Code = v
	}
	return nil
}

func (p *ListPaymentReceiptRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ReceiveAccount = v
	}
	return nil
}

func (p *ListPaymentReceiptRequest) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ReceiveAccountName = v
	}
	return nil
}

func (p *ListPaymentReceiptRequest) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ReceiveAccountBankName = v
	}
	return nil
}

func (p *ListPaymentReceiptRequest) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Purpose = v
	}
	return nil
}

func (p *ListPaymentReceiptRequest) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.OrderStatus = v
	}
	return nil
}

func (p *ListPaymentReceiptRequest) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.OrderFlowNo = v
	}
	return nil
}

func (p *ListPaymentReceiptRequest) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UnionBankNo = v
	}
	return nil
}

func (p *ListPaymentReceiptRequest) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClearBankNo = v
	}
	return nil
}

func (p *ListPaymentReceiptRequest) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CreateTimeStart = v
	}
	return nil
}

func (p *ListPaymentReceiptRequest) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CreateTimeEnd = v
	}
	return nil
}

func (p *ListPaymentReceiptRequest) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Type = v
	}
	return nil
}

func (p *ListPaymentReceiptRequest) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ProcessName = v
	}
	return nil
}

func (p *ListPaymentReceiptRequest) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ProcessCodes = v
	}
	return nil
}

func (p *ListPaymentReceiptRequest) ReadField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ProcessStatus = v
	}
	return nil
}

func (p *ListPaymentReceiptRequest) ReadField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.RefundSuccess = v
	}
	return nil
}

func (p *ListPaymentReceiptRequest) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ProcessCurrentUserName = v
	}
	return nil
}

func (p *ListPaymentReceiptRequest) ReadField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ProcessCurrentUserId = v
	}
	return nil
}

func (p *ListPaymentReceiptRequest) ReadField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ReceiptOrderNo = v
	}
	return nil
}

func (p *ListPaymentReceiptRequest) ReadField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.EndTime = v
	}
	return nil
}

func (p *ListPaymentReceiptRequest) ReadField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.BeginTime = v
	}
	return nil
}

func (p *ListPaymentReceiptRequest) ReadField25(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PaymentModeType = v
	}
	return nil
}

func (p *ListPaymentReceiptRequest) ReadField26(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ApplicantName = v
	}
	return nil
}

func (p *ListPaymentReceiptRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListPaymentReceiptRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField23(oprot); err != nil {
			fieldId = 23
			goto WriteFieldError
		}
		if err = p.writeField24(oprot); err != nil {
			fieldId = 24
			goto WriteFieldError
		}
		if err = p.writeField25(oprot); err != nil {
			fieldId = 25
			goto WriteFieldError
		}
		if err = p.writeField26(oprot); err != nil {
			fieldId = 26
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListPaymentReceiptRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pageNum", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.PageNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListPaymentReceiptRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pageSize", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.PageSize); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListPaymentReceiptRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("sort", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Sort); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ListPaymentReceiptRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ListPaymentReceiptRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("receiveAccount", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ReceiveAccount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ListPaymentReceiptRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("receiveAccountName", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ReceiveAccountName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ListPaymentReceiptRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("receiveAccountBankName", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ReceiveAccountBankName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ListPaymentReceiptRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("purpose", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Purpose); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ListPaymentReceiptRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("orderStatus", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OrderStatus); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ListPaymentReceiptRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("orderFlowNo", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OrderFlowNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ListPaymentReceiptRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("unionBankNo", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UnionBankNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *ListPaymentReceiptRequest) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("clearBankNo", thrift.STRING, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClearBankNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *ListPaymentReceiptRequest) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("createTimeStart", thrift.STRING, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreateTimeStart); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *ListPaymentReceiptRequest) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("createTimeEnd", thrift.STRING, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreateTimeEnd); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *ListPaymentReceiptRequest) writeField15(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("type", thrift.STRING, 15); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Type); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *ListPaymentReceiptRequest) writeField16(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("processName", thrift.STRING, 16); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ProcessName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *ListPaymentReceiptRequest) writeField17(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("processCodes", thrift.STRING, 17); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ProcessCodes); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *ListPaymentReceiptRequest) writeField18(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("processStatus", thrift.STRING, 18); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ProcessStatus); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *ListPaymentReceiptRequest) writeField19(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("refundSuccess", thrift.STRING, 19); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.RefundSuccess); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *ListPaymentReceiptRequest) writeField20(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("processCurrentUserName", thrift.STRING, 20); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ProcessCurrentUserName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *ListPaymentReceiptRequest) writeField21(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("processCurrentUserId", thrift.I64, 21); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ProcessCurrentUserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *ListPaymentReceiptRequest) writeField22(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("receiptOrderNo", thrift.STRING, 22); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ReceiptOrderNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *ListPaymentReceiptRequest) writeField23(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("endTime", thrift.STRING, 23); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.EndTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 end error: ", p), err)
}

func (p *ListPaymentReceiptRequest) writeField24(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("beginTime", thrift.STRING, 24); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.BeginTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 end error: ", p), err)
}

func (p *ListPaymentReceiptRequest) writeField25(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("paymentModeType", thrift.STRING, 25); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PaymentModeType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 end error: ", p), err)
}

func (p *ListPaymentReceiptRequest) writeField26(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("applicantName", thrift.STRING, 26); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ApplicantName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 end error: ", p), err)
}

func (p *ListPaymentReceiptRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListPaymentReceiptRequest(%+v)", *p)
}

func (p *ListPaymentReceiptRequest) DeepEqual(ano *ListPaymentReceiptRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PageNum) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field3DeepEqual(ano.Sort) {
		return false
	}
	if !p.Field4DeepEqual(ano.Code) {
		return false
	}
	if !p.Field5DeepEqual(ano.ReceiveAccount) {
		return false
	}
	if !p.Field6DeepEqual(ano.ReceiveAccountName) {
		return false
	}
	if !p.Field7DeepEqual(ano.ReceiveAccountBankName) {
		return false
	}
	if !p.Field8DeepEqual(ano.Purpose) {
		return false
	}
	if !p.Field9DeepEqual(ano.OrderStatus) {
		return false
	}
	if !p.Field10DeepEqual(ano.OrderFlowNo) {
		return false
	}
	if !p.Field11DeepEqual(ano.UnionBankNo) {
		return false
	}
	if !p.Field12DeepEqual(ano.ClearBankNo) {
		return false
	}
	if !p.Field13DeepEqual(ano.CreateTimeStart) {
		return false
	}
	if !p.Field14DeepEqual(ano.CreateTimeEnd) {
		return false
	}
	if !p.Field15DeepEqual(ano.Type) {
		return false
	}
	if !p.Field16DeepEqual(ano.ProcessName) {
		return false
	}
	if !p.Field17DeepEqual(ano.ProcessCodes) {
		return false
	}
	if !p.Field18DeepEqual(ano.ProcessStatus) {
		return false
	}
	if !p.Field19DeepEqual(ano.RefundSuccess) {
		return false
	}
	if !p.Field20DeepEqual(ano.ProcessCurrentUserName) {
		return false
	}
	if !p.Field21DeepEqual(ano.ProcessCurrentUserId) {
		return false
	}
	if !p.Field22DeepEqual(ano.ReceiptOrderNo) {
		return false
	}
	if !p.Field23DeepEqual(ano.EndTime) {
		return false
	}
	if !p.Field24DeepEqual(ano.BeginTime) {
		return false
	}
	if !p.Field25DeepEqual(ano.PaymentModeType) {
		return false
	}
	if !p.Field26DeepEqual(ano.ApplicantName) {
		return false
	}
	return true
}

func (p *ListPaymentReceiptRequest) Field1DeepEqual(src int32) bool {

	if p.PageNum != src {
		return false
	}
	return true
}
func (p *ListPaymentReceiptRequest) Field2DeepEqual(src int32) bool {

	if p.PageSize != src {
		return false
	}
	return true
}
func (p *ListPaymentReceiptRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Sort, src) != 0 {
		return false
	}
	return true
}
func (p *ListPaymentReceiptRequest) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Code, src) != 0 {
		return false
	}
	return true
}
func (p *ListPaymentReceiptRequest) Field5DeepEqual(src string) bool {

	if strings.Compare(p.ReceiveAccount, src) != 0 {
		return false
	}
	return true
}
func (p *ListPaymentReceiptRequest) Field6DeepEqual(src string) bool {

	if strings.Compare(p.ReceiveAccountName, src) != 0 {
		return false
	}
	return true
}
func (p *ListPaymentReceiptRequest) Field7DeepEqual(src string) bool {

	if strings.Compare(p.ReceiveAccountBankName, src) != 0 {
		return false
	}
	return true
}
func (p *ListPaymentReceiptRequest) Field8DeepEqual(src string) bool {

	if strings.Compare(p.Purpose, src) != 0 {
		return false
	}
	return true
}
func (p *ListPaymentReceiptRequest) Field9DeepEqual(src string) bool {

	if strings.Compare(p.OrderStatus, src) != 0 {
		return false
	}
	return true
}
func (p *ListPaymentReceiptRequest) Field10DeepEqual(src string) bool {

	if strings.Compare(p.OrderFlowNo, src) != 0 {
		return false
	}
	return true
}
func (p *ListPaymentReceiptRequest) Field11DeepEqual(src string) bool {

	if strings.Compare(p.UnionBankNo, src) != 0 {
		return false
	}
	return true
}
func (p *ListPaymentReceiptRequest) Field12DeepEqual(src string) bool {

	if strings.Compare(p.ClearBankNo, src) != 0 {
		return false
	}
	return true
}
func (p *ListPaymentReceiptRequest) Field13DeepEqual(src string) bool {

	if strings.Compare(p.CreateTimeStart, src) != 0 {
		return false
	}
	return true
}
func (p *ListPaymentReceiptRequest) Field14DeepEqual(src string) bool {

	if strings.Compare(p.CreateTimeEnd, src) != 0 {
		return false
	}
	return true
}
func (p *ListPaymentReceiptRequest) Field15DeepEqual(src string) bool {

	if strings.Compare(p.Type, src) != 0 {
		return false
	}
	return true
}
func (p *ListPaymentReceiptRequest) Field16DeepEqual(src string) bool {

	if strings.Compare(p.ProcessName, src) != 0 {
		return false
	}
	return true
}
func (p *ListPaymentReceiptRequest) Field17DeepEqual(src string) bool {

	if strings.Compare(p.ProcessCodes, src) != 0 {
		return false
	}
	return true
}
func (p *ListPaymentReceiptRequest) Field18DeepEqual(src string) bool {

	if strings.Compare(p.ProcessStatus, src) != 0 {
		return false
	}
	return true
}
func (p *ListPaymentReceiptRequest) Field19DeepEqual(src string) bool {

	if strings.Compare(p.RefundSuccess, src) != 0 {
		return false
	}
	return true
}
func (p *ListPaymentReceiptRequest) Field20DeepEqual(src string) bool {

	if strings.Compare(p.ProcessCurrentUserName, src) != 0 {
		return false
	}
	return true
}
func (p *ListPaymentReceiptRequest) Field21DeepEqual(src int64) bool {

	if p.ProcessCurrentUserId != src {
		return false
	}
	return true
}
func (p *ListPaymentReceiptRequest) Field22DeepEqual(src string) bool {

	if strings.Compare(p.ReceiptOrderNo, src) != 0 {
		return false
	}
	return true
}
func (p *ListPaymentReceiptRequest) Field23DeepEqual(src string) bool {

	if strings.Compare(p.EndTime, src) != 0 {
		return false
	}
	return true
}
func (p *ListPaymentReceiptRequest) Field24DeepEqual(src string) bool {

	if strings.Compare(p.BeginTime, src) != 0 {
		return false
	}
	return true
}
func (p *ListPaymentReceiptRequest) Field25DeepEqual(src string) bool {

	if strings.Compare(p.PaymentModeType, src) != 0 {
		return false
	}
	return true
}
func (p *ListPaymentReceiptRequest) Field26DeepEqual(src string) bool {

	if strings.Compare(p.ApplicantName, src) != 0 {
		return false
	}
	return true
}

type ListPaymentReceiptResponse struct {
	Data  []*PaymentReceiptData `thrift:"data,1" frugal:"1,default,list<PaymentReceiptData>" json:"data"`
	Count int64                 `thrift:"count,2" frugal:"2,default,i64" json:"count"`
}

func NewListPaymentReceiptResponse() *ListPaymentReceiptResponse {
	return &ListPaymentReceiptResponse{}
}

func (p *ListPaymentReceiptResponse) InitDefault() {
	*p = ListPaymentReceiptResponse{}
}

func (p *ListPaymentReceiptResponse) GetData() (v []*PaymentReceiptData) {
	return p.Data
}

func (p *ListPaymentReceiptResponse) GetCount() (v int64) {
	return p.Count
}
func (p *ListPaymentReceiptResponse) SetData(val []*PaymentReceiptData) {
	p.Data = val
}
func (p *ListPaymentReceiptResponse) SetCount(val int64) {
	p.Count = val
}

var fieldIDToName_ListPaymentReceiptResponse = map[int16]string{
	1: "data",
	2: "count",
}

func (p *ListPaymentReceiptResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListPaymentReceiptResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListPaymentReceiptResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Data = make([]*PaymentReceiptData, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewPaymentReceiptData()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Data = append(p.Data, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListPaymentReceiptResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Count = v
	}
	return nil
}

func (p *ListPaymentReceiptResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListPaymentReceiptResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListPaymentReceiptResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Data)); err != nil {
		return err
	}
	for _, v := range p.Data {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListPaymentReceiptResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("count", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Count); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListPaymentReceiptResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListPaymentReceiptResponse(%+v)", *p)
}

func (p *ListPaymentReceiptResponse) DeepEqual(ano *ListPaymentReceiptResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Data) {
		return false
	}
	if !p.Field2DeepEqual(ano.Count) {
		return false
	}
	return true
}

func (p *ListPaymentReceiptResponse) Field1DeepEqual(src []*PaymentReceiptData) bool {

	if len(p.Data) != len(src) {
		return false
	}
	for i, v := range p.Data {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListPaymentReceiptResponse) Field2DeepEqual(src int64) bool {

	if p.Count != src {
		return false
	}
	return true
}

type PinganBankAccountSignatureApplyRequest struct {
	Id             int64  `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	OrganizationId int64  `thrift:"organizationId,2" frugal:"2,default,i64" json:"organizationId"`
	Type           string `thrift:"type,3" frugal:"3,default,string" json:"type"`
	Account        string `thrift:"account,4" frugal:"4,default,string" json:"account"`
	AccountName    string `thrift:"accountName,5" frugal:"5,default,string" json:"accountName"`
}

func NewPinganBankAccountSignatureApplyRequest() *PinganBankAccountSignatureApplyRequest {
	return &PinganBankAccountSignatureApplyRequest{}
}

func (p *PinganBankAccountSignatureApplyRequest) InitDefault() {
	*p = PinganBankAccountSignatureApplyRequest{}
}

func (p *PinganBankAccountSignatureApplyRequest) GetId() (v int64) {
	return p.Id
}

func (p *PinganBankAccountSignatureApplyRequest) GetOrganizationId() (v int64) {
	return p.OrganizationId
}

func (p *PinganBankAccountSignatureApplyRequest) GetType() (v string) {
	return p.Type
}

func (p *PinganBankAccountSignatureApplyRequest) GetAccount() (v string) {
	return p.Account
}

func (p *PinganBankAccountSignatureApplyRequest) GetAccountName() (v string) {
	return p.AccountName
}
func (p *PinganBankAccountSignatureApplyRequest) SetId(val int64) {
	p.Id = val
}
func (p *PinganBankAccountSignatureApplyRequest) SetOrganizationId(val int64) {
	p.OrganizationId = val
}
func (p *PinganBankAccountSignatureApplyRequest) SetType(val string) {
	p.Type = val
}
func (p *PinganBankAccountSignatureApplyRequest) SetAccount(val string) {
	p.Account = val
}
func (p *PinganBankAccountSignatureApplyRequest) SetAccountName(val string) {
	p.AccountName = val
}

var fieldIDToName_PinganBankAccountSignatureApplyRequest = map[int16]string{
	1: "id",
	2: "organizationId",
	3: "type",
	4: "account",
	5: "accountName",
}

func (p *PinganBankAccountSignatureApplyRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PinganBankAccountSignatureApplyRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PinganBankAccountSignatureApplyRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *PinganBankAccountSignatureApplyRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.OrganizationId = v
	}
	return nil
}

func (p *PinganBankAccountSignatureApplyRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Type = v
	}
	return nil
}

func (p *PinganBankAccountSignatureApplyRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Account = v
	}
	return nil
}

func (p *PinganBankAccountSignatureApplyRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.AccountName = v
	}
	return nil
}

func (p *PinganBankAccountSignatureApplyRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("pinganBankAccountSignatureApplyRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PinganBankAccountSignatureApplyRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PinganBankAccountSignatureApplyRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("organizationId", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.OrganizationId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *PinganBankAccountSignatureApplyRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("type", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Type); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *PinganBankAccountSignatureApplyRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("account", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Account); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *PinganBankAccountSignatureApplyRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("accountName", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AccountName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *PinganBankAccountSignatureApplyRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PinganBankAccountSignatureApplyRequest(%+v)", *p)
}

func (p *PinganBankAccountSignatureApplyRequest) DeepEqual(ano *PinganBankAccountSignatureApplyRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.OrganizationId) {
		return false
	}
	if !p.Field3DeepEqual(ano.Type) {
		return false
	}
	if !p.Field4DeepEqual(ano.Account) {
		return false
	}
	if !p.Field5DeepEqual(ano.AccountName) {
		return false
	}
	return true
}

func (p *PinganBankAccountSignatureApplyRequest) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *PinganBankAccountSignatureApplyRequest) Field2DeepEqual(src int64) bool {

	if p.OrganizationId != src {
		return false
	}
	return true
}
func (p *PinganBankAccountSignatureApplyRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Type, src) != 0 {
		return false
	}
	return true
}
func (p *PinganBankAccountSignatureApplyRequest) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Account, src) != 0 {
		return false
	}
	return true
}
func (p *PinganBankAccountSignatureApplyRequest) Field5DeepEqual(src string) bool {

	if strings.Compare(p.AccountName, src) != 0 {
		return false
	}
	return true
}

type PinganUserAcctSignatureApplyResponse struct {
	ZuID      string `thrift:"zuID,1" frugal:"1,default,string" json:"zuID"`
	OpFlag    string `thrift:"opFlag,2" frugal:"2,default,string" json:"opFlag"`
	Stt       string `thrift:"stt,3" frugal:"3,default,string" json:"stt"`
	AccountNo string `thrift:"accountNo,4" frugal:"4,default,string" json:"accountNo"`
}

func NewPinganUserAcctSignatureApplyResponse() *PinganUserAcctSignatureApplyResponse {
	return &PinganUserAcctSignatureApplyResponse{}
}

func (p *PinganUserAcctSignatureApplyResponse) InitDefault() {
	*p = PinganUserAcctSignatureApplyResponse{}
}

func (p *PinganUserAcctSignatureApplyResponse) GetZuID() (v string) {
	return p.ZuID
}

func (p *PinganUserAcctSignatureApplyResponse) GetOpFlag() (v string) {
	return p.OpFlag
}

func (p *PinganUserAcctSignatureApplyResponse) GetStt() (v string) {
	return p.Stt
}

func (p *PinganUserAcctSignatureApplyResponse) GetAccountNo() (v string) {
	return p.AccountNo
}
func (p *PinganUserAcctSignatureApplyResponse) SetZuID(val string) {
	p.ZuID = val
}
func (p *PinganUserAcctSignatureApplyResponse) SetOpFlag(val string) {
	p.OpFlag = val
}
func (p *PinganUserAcctSignatureApplyResponse) SetStt(val string) {
	p.Stt = val
}
func (p *PinganUserAcctSignatureApplyResponse) SetAccountNo(val string) {
	p.AccountNo = val
}

var fieldIDToName_PinganUserAcctSignatureApplyResponse = map[int16]string{
	1: "zuID",
	2: "opFlag",
	3: "stt",
	4: "accountNo",
}

func (p *PinganUserAcctSignatureApplyResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PinganUserAcctSignatureApplyResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PinganUserAcctSignatureApplyResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ZuID = v
	}
	return nil
}

func (p *PinganUserAcctSignatureApplyResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.OpFlag = v
	}
	return nil
}

func (p *PinganUserAcctSignatureApplyResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Stt = v
	}
	return nil
}

func (p *PinganUserAcctSignatureApplyResponse) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.AccountNo = v
	}
	return nil
}

func (p *PinganUserAcctSignatureApplyResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("pinganUserAcctSignatureApplyResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PinganUserAcctSignatureApplyResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("zuID", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ZuID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PinganUserAcctSignatureApplyResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("opFlag", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OpFlag); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *PinganUserAcctSignatureApplyResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("stt", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Stt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *PinganUserAcctSignatureApplyResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("accountNo", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AccountNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *PinganUserAcctSignatureApplyResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PinganUserAcctSignatureApplyResponse(%+v)", *p)
}

func (p *PinganUserAcctSignatureApplyResponse) DeepEqual(ano *PinganUserAcctSignatureApplyResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ZuID) {
		return false
	}
	if !p.Field2DeepEqual(ano.OpFlag) {
		return false
	}
	if !p.Field3DeepEqual(ano.Stt) {
		return false
	}
	if !p.Field4DeepEqual(ano.AccountNo) {
		return false
	}
	return true
}

func (p *PinganUserAcctSignatureApplyResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ZuID, src) != 0 {
		return false
	}
	return true
}
func (p *PinganUserAcctSignatureApplyResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.OpFlag, src) != 0 {
		return false
	}
	return true
}
func (p *PinganUserAcctSignatureApplyResponse) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Stt, src) != 0 {
		return false
	}
	return true
}
func (p *PinganUserAcctSignatureApplyResponse) Field4DeepEqual(src string) bool {

	if strings.Compare(p.AccountNo, src) != 0 {
		return false
	}
	return true
}

type ProcessAddTagItemVO struct {
	TagType           int64                      `thrift:"tagType,1" frugal:"1,default,i64" json:"tagType"`
	NodeType          int64                      `thrift:"nodeType,2" frugal:"2,default,i64" json:"nodeType"`
	ItemUsers         []*ProcessAddTagItemUserVO `thrift:"itemUsers,3" frugal:"3,default,list<ProcessAddTagItemUserVO>" json:"itemUsers"`
	ProcessInstanceId int64                      `thrift:"processInstanceId,4" frugal:"4,default,i64" json:"processInstanceId"`
	NodeExplain       string                     `thrift:"nodeExplain,5" frugal:"5,default,string" json:"nodeExplain"`
}

func NewProcessAddTagItemVO() *ProcessAddTagItemVO {
	return &ProcessAddTagItemVO{}
}

func (p *ProcessAddTagItemVO) InitDefault() {
	*p = ProcessAddTagItemVO{}
}

func (p *ProcessAddTagItemVO) GetTagType() (v int64) {
	return p.TagType
}

func (p *ProcessAddTagItemVO) GetNodeType() (v int64) {
	return p.NodeType
}

func (p *ProcessAddTagItemVO) GetItemUsers() (v []*ProcessAddTagItemUserVO) {
	return p.ItemUsers
}

func (p *ProcessAddTagItemVO) GetProcessInstanceId() (v int64) {
	return p.ProcessInstanceId
}

func (p *ProcessAddTagItemVO) GetNodeExplain() (v string) {
	return p.NodeExplain
}
func (p *ProcessAddTagItemVO) SetTagType(val int64) {
	p.TagType = val
}
func (p *ProcessAddTagItemVO) SetNodeType(val int64) {
	p.NodeType = val
}
func (p *ProcessAddTagItemVO) SetItemUsers(val []*ProcessAddTagItemUserVO) {
	p.ItemUsers = val
}
func (p *ProcessAddTagItemVO) SetProcessInstanceId(val int64) {
	p.ProcessInstanceId = val
}
func (p *ProcessAddTagItemVO) SetNodeExplain(val string) {
	p.NodeExplain = val
}

var fieldIDToName_ProcessAddTagItemVO = map[int16]string{
	1: "tagType",
	2: "nodeType",
	3: "itemUsers",
	4: "processInstanceId",
	5: "nodeExplain",
}

func (p *ProcessAddTagItemVO) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProcessAddTagItemVO[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProcessAddTagItemVO) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.TagType = v
	}
	return nil
}

func (p *ProcessAddTagItemVO) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.NodeType = v
	}
	return nil
}

func (p *ProcessAddTagItemVO) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.ItemUsers = make([]*ProcessAddTagItemUserVO, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewProcessAddTagItemUserVO()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.ItemUsers = append(p.ItemUsers, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ProcessAddTagItemVO) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ProcessInstanceId = v
	}
	return nil
}

func (p *ProcessAddTagItemVO) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.NodeExplain = v
	}
	return nil
}

func (p *ProcessAddTagItemVO) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ProcessAddTagItemVO"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProcessAddTagItemVO) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tagType", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TagType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ProcessAddTagItemVO) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("nodeType", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.NodeType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ProcessAddTagItemVO) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("itemUsers", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ItemUsers)); err != nil {
		return err
	}
	for _, v := range p.ItemUsers {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ProcessAddTagItemVO) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("processInstanceId", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ProcessInstanceId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ProcessAddTagItemVO) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("nodeExplain", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.NodeExplain); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ProcessAddTagItemVO) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProcessAddTagItemVO(%+v)", *p)
}

func (p *ProcessAddTagItemVO) DeepEqual(ano *ProcessAddTagItemVO) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TagType) {
		return false
	}
	if !p.Field2DeepEqual(ano.NodeType) {
		return false
	}
	if !p.Field3DeepEqual(ano.ItemUsers) {
		return false
	}
	if !p.Field4DeepEqual(ano.ProcessInstanceId) {
		return false
	}
	if !p.Field5DeepEqual(ano.NodeExplain) {
		return false
	}
	return true
}

func (p *ProcessAddTagItemVO) Field1DeepEqual(src int64) bool {

	if p.TagType != src {
		return false
	}
	return true
}
func (p *ProcessAddTagItemVO) Field2DeepEqual(src int64) bool {

	if p.NodeType != src {
		return false
	}
	return true
}
func (p *ProcessAddTagItemVO) Field3DeepEqual(src []*ProcessAddTagItemUserVO) bool {

	if len(p.ItemUsers) != len(src) {
		return false
	}
	for i, v := range p.ItemUsers {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ProcessAddTagItemVO) Field4DeepEqual(src int64) bool {

	if p.ProcessInstanceId != src {
		return false
	}
	return true
}
func (p *ProcessAddTagItemVO) Field5DeepEqual(src string) bool {

	if strings.Compare(p.NodeExplain, src) != 0 {
		return false
	}
	return true
}

type ProcessAddTagItemUserVO struct {
	UserId   int64  `thrift:"userId,1" frugal:"1,default,i64" json:"userId"`
	NickName string `thrift:"nickName,2" frugal:"2,default,string" json:"nickName"`
}

func NewProcessAddTagItemUserVO() *ProcessAddTagItemUserVO {
	return &ProcessAddTagItemUserVO{}
}

func (p *ProcessAddTagItemUserVO) InitDefault() {
	*p = ProcessAddTagItemUserVO{}
}

func (p *ProcessAddTagItemUserVO) GetUserId() (v int64) {
	return p.UserId
}

func (p *ProcessAddTagItemUserVO) GetNickName() (v string) {
	return p.NickName
}
func (p *ProcessAddTagItemUserVO) SetUserId(val int64) {
	p.UserId = val
}
func (p *ProcessAddTagItemUserVO) SetNickName(val string) {
	p.NickName = val
}

var fieldIDToName_ProcessAddTagItemUserVO = map[int16]string{
	1: "userId",
	2: "nickName",
}

func (p *ProcessAddTagItemUserVO) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ProcessAddTagItemUserVO[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ProcessAddTagItemUserVO) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}

func (p *ProcessAddTagItemUserVO) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.NickName = v
	}
	return nil
}

func (p *ProcessAddTagItemUserVO) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ProcessAddTagItemUserVO"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ProcessAddTagItemUserVO) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ProcessAddTagItemUserVO) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("nickName", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.NickName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ProcessAddTagItemUserVO) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProcessAddTagItemUserVO(%+v)", *p)
}

func (p *ProcessAddTagItemUserVO) DeepEqual(ano *ProcessAddTagItemUserVO) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.NickName) {
		return false
	}
	return true
}

func (p *ProcessAddTagItemUserVO) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *ProcessAddTagItemUserVO) Field2DeepEqual(src string) bool {

	if strings.Compare(p.NickName, src) != 0 {
		return false
	}
	return true
}

type CustomField struct {
	Id             int64  `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	Name           string `thrift:"name,2" frugal:"2,default,string" json:"name"`
	Value          string `thrift:"value,3" frugal:"3,default,string" json:"value"`
	Explain        string `thrift:"explain,4" frugal:"4,default,string" json:"explain"`
	Sort           int32  `thrift:"sort,5" frugal:"5,default,i32" json:"sort"`
	FieldId        int64  `thrift:"fieldId,6" frugal:"6,default,i64" json:"fieldId"`
	OrganizationId int64  `thrift:"organizationId,7" frugal:"7,default,i64" json:"organizationId"`
}

func NewCustomField() *CustomField {
	return &CustomField{}
}

func (p *CustomField) InitDefault() {
	*p = CustomField{}
}

func (p *CustomField) GetId() (v int64) {
	return p.Id
}

func (p *CustomField) GetName() (v string) {
	return p.Name
}

func (p *CustomField) GetValue() (v string) {
	return p.Value
}

func (p *CustomField) GetExplain() (v string) {
	return p.Explain
}

func (p *CustomField) GetSort() (v int32) {
	return p.Sort
}

func (p *CustomField) GetFieldId() (v int64) {
	return p.FieldId
}

func (p *CustomField) GetOrganizationId() (v int64) {
	return p.OrganizationId
}
func (p *CustomField) SetId(val int64) {
	p.Id = val
}
func (p *CustomField) SetName(val string) {
	p.Name = val
}
func (p *CustomField) SetValue(val string) {
	p.Value = val
}
func (p *CustomField) SetExplain(val string) {
	p.Explain = val
}
func (p *CustomField) SetSort(val int32) {
	p.Sort = val
}
func (p *CustomField) SetFieldId(val int64) {
	p.FieldId = val
}
func (p *CustomField) SetOrganizationId(val int64) {
	p.OrganizationId = val
}

var fieldIDToName_CustomField = map[int16]string{
	1: "id",
	2: "name",
	3: "value",
	4: "explain",
	5: "sort",
	6: "fieldId",
	7: "organizationId",
}

func (p *CustomField) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CustomField[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CustomField) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *CustomField) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *CustomField) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Value = v
	}
	return nil
}

func (p *CustomField) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Explain = v
	}
	return nil
}

func (p *CustomField) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Sort = v
	}
	return nil
}

func (p *CustomField) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.FieldId = v
	}
	return nil
}

func (p *CustomField) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.OrganizationId = v
	}
	return nil
}

func (p *CustomField) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CustomField"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CustomField) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CustomField) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CustomField) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("value", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Value); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CustomField) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("explain", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Explain); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CustomField) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("sort", thrift.I32, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Sort); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CustomField) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("fieldId", thrift.I64, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.FieldId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CustomField) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("organizationId", thrift.I64, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.OrganizationId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *CustomField) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CustomField(%+v)", *p)
}

func (p *CustomField) DeepEqual(ano *CustomField) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Value) {
		return false
	}
	if !p.Field4DeepEqual(ano.Explain) {
		return false
	}
	if !p.Field5DeepEqual(ano.Sort) {
		return false
	}
	if !p.Field6DeepEqual(ano.FieldId) {
		return false
	}
	if !p.Field7DeepEqual(ano.OrganizationId) {
		return false
	}
	return true
}

func (p *CustomField) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *CustomField) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *CustomField) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Value, src) != 0 {
		return false
	}
	return true
}
func (p *CustomField) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Explain, src) != 0 {
		return false
	}
	return true
}
func (p *CustomField) Field5DeepEqual(src int32) bool {

	if p.Sort != src {
		return false
	}
	return true
}
func (p *CustomField) Field6DeepEqual(src int64) bool {

	if p.FieldId != src {
		return false
	}
	return true
}
func (p *CustomField) Field7DeepEqual(src int64) bool {

	if p.OrganizationId != src {
		return false
	}
	return true
}

type Bank interface {
	ListBankTransferReceipt(ctx context.Context, req *ListBankTransferReceiptRequest) (r *ListBankTransferReceiptResponse, err error)

	GetBankTransferReceipt(ctx context.Context, req *BankTransferReceiptData) (r *BankTransferReceiptData, err error)

	AddBankTransferReceipt(ctx context.Context, req *BankTransferReceiptData) (r int64, err error)

	EditBankTransferReceipt(ctx context.Context, req *BankTransferReceiptData) (err error)

	DeleteBankTransferReceipt(ctx context.Context, req int64) (err error)

	CountBankTransferReceipt(ctx context.Context, req *BankTransferReceiptData) (r int64, err error)

	ConfirmTransaction(ctx context.Context, req *BankTransferReceiptData) (err error)

	HandleTransferReceiptResult_(ctx context.Context, id int64) (err error)

	ListBankTransactionDetail(ctx context.Context, req *ListBankTransactionDetailRequest) (r *ListBankTransactionDetailResponse, err error)

	SimpleListBankTransactionDetail(ctx context.Context, req *ListBankTransactionDetailRequest) (r *ListBankTransactionDetailResponse, err error)

	GetBankTransactionDetail(ctx context.Context, req *BankTransactionDetailData) (r *BankTransactionDetailData, err error)

	SimpleGetBankTransactionDetail(ctx context.Context, req *BankTransactionDetailData) (r *BankTransactionDetailData, err error)

	HandleTransactionDetail(ctx context.Context, beginDate string, endDate string, organizationId int64) (err error)

	CreateTransactionDetailProcessInstance(ctx context.Context, id int64) (err error)

	EditBankTransactionDetailExtField(ctx context.Context, req *BankTransactionDetailData) (err error)

	ListBankTransactionDetailProcessInstance(ctx context.Context, id int64) (r []*BankTransactionDetailProcessInstanceData, err error)

	GetBankCodeInfo(ctx context.Context, code string) (r *BankCodeData, err error)

	QueryBankCardInfo(ctx context.Context, cardNo string) (r *QueryBankCardInfoResponse, err error)

	ListBankCode(ctx context.Context, req *ListBankCodeRequest) (r *ListBankCodeResponse, err error)

	GetBankCode(ctx context.Context, req *BankCodeData) (r *BankCodeData, err error)

	AddBankCode(ctx context.Context, req *AddBankCodeRequest) (err error)

	EditBankCode(ctx context.Context, req *BankCodeData) (err error)

	DeleteBankCode(ctx context.Context, id int64) (err error)

	HandleSyncTransferReceipt(ctx context.Context, beginDate string, endDate string, organizationId int64) (err error)

	UpdateBankTransactionRecDetail(ctx context.Context, req *BankTransactionRecDetailData) (err error)

	SyncTransferReceipt(ctx context.Context, taskId int64, param []byte, organizationId int64) (err error)

	SyncTransactionDetail(ctx context.Context, taskId int64, param []byte, organizationId int64) (err error)

	DashboardData(ctx context.Context, organizationId int64) (r *DashboardData, err error)

	GetCashFlowMonthChartData(ctx context.Context, req *MonthChartDataRequest) (r *ChartData, err error)

	GetBalanceMonthChartData(ctx context.Context, req *MonthChartDataRequest) (r *ChartData, err error)

	QueryAccountBalance(ctx context.Context, req *QueryAccountBalanceRequest) (r *QueryAccountBalanceResponse, err error)

	ImportBankBusinessPayrollData(ctx context.Context, taskId int64, param []byte, organizationId int64) (err error)

	ListBankBusinessPayroll(ctx context.Context, req *ListBusinessPayrollRequest) (r *ListBusinessPayrollResponse, err error)

	ListBankBusinessPayrollDetail(ctx context.Context, req *ListBusinessPayrollDetailRequest) (r *ListBusinessPayrollDetailResponse, err error)

	SyncBankBusinessPayrollDetail(ctx context.Context, req *SyncBusinessPayrollResultRequest) (r *SyncBusinessPayrollResultResponse, err error)

	HandleTransactionDetailReceipt(ctx context.Context, beginDate string, endDate string, organizationId int64) (err error)

	CreateVirtualAccount(ctx context.Context, req *CreateVirtualAccountRequest) (r *CreateVirtualAccountResponse, err error)

	SyncVirtualAccountBalance(ctx context.Context) (err error)

	QueryVirtualAccountBalance(ctx context.Context, organizationId int64, bankType string) (r *VirtualAccountBalanceData, err error)

	SpdBankVirtualAccountTranscation(ctx context.Context, organizationId int64, req *BankTransferReceiptData) (r *BankVirtualAccountTranscationResponse, err error)

	ListPaymentReceipt(ctx context.Context, req *ListPaymentReceiptRequest) (r *ListPaymentReceiptResponse, err error)

	GetPaymentReceipt(ctx context.Context, id int64) (r *PaymentReceiptData, err error)

	SimpleGetPaymentReceipt(ctx context.Context, id int64) (r *PaymentReceiptData, err error)

	SimpleGetPaymentReceiptByProcessInstanceId(ctx context.Context, id int64) (r *PaymentReceiptData, err error)

	AddPaymentReceipt(ctx context.Context, req *PaymentReceiptData) (err error)

	ApprovePaymentReceipt(ctx context.Context, id int64, req *PaymentReceiptData) (err error)

	RefusePaymentReceipt(ctx context.Context, id int64, req *PaymentReceiptData, remark string) (err error)

	PaymentReceiptRun(ctx context.Context, id int64) (err error)

	TransmitPaymentReceipt(ctx context.Context, processInstanceId int64, transmitUserId int64) (err error)

	SendBackPaymentApplication(ctx context.Context, id int64, req *PaymentReceiptData, remark string) (err error)

	WithDrawPaymentReceipt(ctx context.Context, id int64, req *PaymentReceiptData) (err error)

	CommentPaymentReceipt(ctx context.Context, req *PaymentReceiptData) (err error)

	AddTagPaymentReceipt(ctx context.Context, req *PaymentReceiptData) (err error)

	HandleSyncPaymentReceipt(ctx context.Context, beginDate string, endDate string, organizationId int64) (err error)

	SyncPaymentReceipt(ctx context.Context, taskId int64, param []byte, organizationId int64) (err error)

	PinganBankAccountSignatureApply(ctx context.Context, req *PinganBankAccountSignatureApplyRequest) (r *PinganUserAcctSignatureApplyResponse, err error)

	PinganBankAccountSignatureQuery(ctx context.Context, req *PinganBankAccountSignatureApplyRequest) (r *PinganUserAcctSignatureApplyResponse, err error)

	SystemRefusePaymentReceipt(ctx context.Context, id int64) (err error)

	SystemApprovePaymentReceipt(ctx context.Context, id int64) (err error)
}

type BankClient struct {
	c thrift.TClient
}

func NewBankClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BankClient {
	return &BankClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewBankClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BankClient {
	return &BankClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewBankClient(c thrift.TClient) *BankClient {
	return &BankClient{
		c: c,
	}
}

func (p *BankClient) Client_() thrift.TClient {
	return p.c
}

func (p *BankClient) ListBankTransferReceipt(ctx context.Context, req *ListBankTransferReceiptRequest) (r *ListBankTransferReceiptResponse, err error) {
	var _args BankListBankTransferReceiptArgs
	_args.Req = req
	var _result BankListBankTransferReceiptResult
	if err = p.Client_().Call(ctx, "listBankTransferReceipt", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BankClient) GetBankTransferReceipt(ctx context.Context, req *BankTransferReceiptData) (r *BankTransferReceiptData, err error) {
	var _args BankGetBankTransferReceiptArgs
	_args.Req = req
	var _result BankGetBankTransferReceiptResult
	if err = p.Client_().Call(ctx, "getBankTransferReceipt", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BankClient) AddBankTransferReceipt(ctx context.Context, req *BankTransferReceiptData) (r int64, err error) {
	var _args BankAddBankTransferReceiptArgs
	_args.Req = req
	var _result BankAddBankTransferReceiptResult
	if err = p.Client_().Call(ctx, "addBankTransferReceipt", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BankClient) EditBankTransferReceipt(ctx context.Context, req *BankTransferReceiptData) (err error) {
	var _args BankEditBankTransferReceiptArgs
	_args.Req = req
	var _result BankEditBankTransferReceiptResult
	if err = p.Client_().Call(ctx, "editBankTransferReceipt", &_args, &_result); err != nil {
		return
	}
	return nil
}
func (p *BankClient) DeleteBankTransferReceipt(ctx context.Context, req int64) (err error) {
	var _args BankDeleteBankTransferReceiptArgs
	_args.Req = req
	var _result BankDeleteBankTransferReceiptResult
	if err = p.Client_().Call(ctx, "deleteBankTransferReceipt", &_args, &_result); err != nil {
		return
	}
	return nil
}
func (p *BankClient) CountBankTransferReceipt(ctx context.Context, req *BankTransferReceiptData) (r int64, err error) {
	var _args BankCountBankTransferReceiptArgs
	_args.Req = req
	var _result BankCountBankTransferReceiptResult
	if err = p.Client_().Call(ctx, "countBankTransferReceipt", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BankClient) ConfirmTransaction(ctx context.Context, req *BankTransferReceiptData) (err error) {
	var _args BankConfirmTransactionArgs
	_args.Req = req
	var _result BankConfirmTransactionResult
	if err = p.Client_().Call(ctx, "confirmTransaction", &_args, &_result); err != nil {
		return
	}
	return nil
}
func (p *BankClient) HandleTransferReceiptResult_(ctx context.Context, id int64) (err error) {
	var _args BankHandleTransferReceiptResultArgs
	_args.Id = id
	var _result BankHandleTransferReceiptResultResult
	if err = p.Client_().Call(ctx, "handleTransferReceiptResult", &_args, &_result); err != nil {
		return
	}
	return nil
}
func (p *BankClient) ListBankTransactionDetail(ctx context.Context, req *ListBankTransactionDetailRequest) (r *ListBankTransactionDetailResponse, err error) {
	var _args BankListBankTransactionDetailArgs
	_args.Req = req
	var _result BankListBankTransactionDetailResult
	if err = p.Client_().Call(ctx, "listBankTransactionDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BankClient) SimpleListBankTransactionDetail(ctx context.Context, req *ListBankTransactionDetailRequest) (r *ListBankTransactionDetailResponse, err error) {
	var _args BankSimpleListBankTransactionDetailArgs
	_args.Req = req
	var _result BankSimpleListBankTransactionDetailResult
	if err = p.Client_().Call(ctx, "simpleListBankTransactionDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BankClient) GetBankTransactionDetail(ctx context.Context, req *BankTransactionDetailData) (r *BankTransactionDetailData, err error) {
	var _args BankGetBankTransactionDetailArgs
	_args.Req = req
	var _result BankGetBankTransactionDetailResult
	if err = p.Client_().Call(ctx, "getBankTransactionDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BankClient) SimpleGetBankTransactionDetail(ctx context.Context, req *BankTransactionDetailData) (r *BankTransactionDetailData, err error) {
	var _args BankSimpleGetBankTransactionDetailArgs
	_args.Req = req
	var _result BankSimpleGetBankTransactionDetailResult
	if err = p.Client_().Call(ctx, "simpleGetBankTransactionDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BankClient) HandleTransactionDetail(ctx context.Context, beginDate string, endDate string, organizationId int64) (err error) {
	var _args BankHandleTransactionDetailArgs
	_args.BeginDate = beginDate
	_args.EndDate = endDate
	_args.OrganizationId = organizationId
	var _result BankHandleTransactionDetailResult
	if err = p.Client_().Call(ctx, "handleTransactionDetail", &_args, &_result); err != nil {
		return
	}
	return nil
}
func (p *BankClient) CreateTransactionDetailProcessInstance(ctx context.Context, id int64) (err error) {
	var _args BankCreateTransactionDetailProcessInstanceArgs
	_args.Id = id
	var _result BankCreateTransactionDetailProcessInstanceResult
	if err = p.Client_().Call(ctx, "createTransactionDetailProcessInstance", &_args, &_result); err != nil {
		return
	}
	return nil
}
func (p *BankClient) EditBankTransactionDetailExtField(ctx context.Context, req *BankTransactionDetailData) (err error) {
	var _args BankEditBankTransactionDetailExtFieldArgs
	_args.Req = req
	var _result BankEditBankTransactionDetailExtFieldResult
	if err = p.Client_().Call(ctx, "EditBankTransactionDetailExtField", &_args, &_result); err != nil {
		return
	}
	return nil
}
func (p *BankClient) ListBankTransactionDetailProcessInstance(ctx context.Context, id int64) (r []*BankTransactionDetailProcessInstanceData, err error) {
	var _args BankListBankTransactionDetailProcessInstanceArgs
	_args.Id = id
	var _result BankListBankTransactionDetailProcessInstanceResult
	if err = p.Client_().Call(ctx, "listBankTransactionDetailProcessInstance", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BankClient) GetBankCodeInfo(ctx context.Context, code string) (r *BankCodeData, err error) {
	var _args BankGetBankCodeInfoArgs
	_args.Code = code
	var _result BankGetBankCodeInfoResult
	if err = p.Client_().Call(ctx, "GetBankCodeInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BankClient) QueryBankCardInfo(ctx context.Context, cardNo string) (r *QueryBankCardInfoResponse, err error) {
	var _args BankQueryBankCardInfoArgs
	_args.CardNo = cardNo
	var _result BankQueryBankCardInfoResult
	if err = p.Client_().Call(ctx, "QueryBankCardInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BankClient) ListBankCode(ctx context.Context, req *ListBankCodeRequest) (r *ListBankCodeResponse, err error) {
	var _args BankListBankCodeArgs
	_args.Req = req
	var _result BankListBankCodeResult
	if err = p.Client_().Call(ctx, "ListBankCode", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BankClient) GetBankCode(ctx context.Context, req *BankCodeData) (r *BankCodeData, err error) {
	var _args BankGetBankCodeArgs
	_args.Req = req
	var _result BankGetBankCodeResult
	if err = p.Client_().Call(ctx, "GetBankCode", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BankClient) AddBankCode(ctx context.Context, req *AddBankCodeRequest) (err error) {
	var _args BankAddBankCodeArgs
	_args.Req = req
	var _result BankAddBankCodeResult
	if err = p.Client_().Call(ctx, "AddBankCode", &_args, &_result); err != nil {
		return
	}
	return nil
}
func (p *BankClient) EditBankCode(ctx context.Context, req *BankCodeData) (err error) {
	var _args BankEditBankCodeArgs
	_args.Req = req
	var _result BankEditBankCodeResult
	if err = p.Client_().Call(ctx, "EditBankCode", &_args, &_result); err != nil {
		return
	}
	return nil
}
func (p *BankClient) DeleteBankCode(ctx context.Context, id int64) (err error) {
	var _args BankDeleteBankCodeArgs
	_args.Id = id
	var _result BankDeleteBankCodeResult
	if err = p.Client_().Call(ctx, "DeleteBankCode", &_args, &_result); err != nil {
		return
	}
	return nil
}
func (p *BankClient) HandleSyncTransferReceipt(ctx context.Context, beginDate string, endDate string, organizationId int64) (err error) {
	var _args BankHandleSyncTransferReceiptArgs
	_args.BeginDate = beginDate
	_args.EndDate = endDate
	_args.OrganizationId = organizationId
	var _result BankHandleSyncTransferReceiptResult
	if err = p.Client_().Call(ctx, "HandleSyncTransferReceipt", &_args, &_result); err != nil {
		return
	}
	return nil
}
func (p *BankClient) UpdateBankTransactionRecDetail(ctx context.Context, req *BankTransactionRecDetailData) (err error) {
	var _args BankUpdateBankTransactionRecDetailArgs
	_args.Req = req
	var _result BankUpdateBankTransactionRecDetailResult
	if err = p.Client_().Call(ctx, "UpdateBankTransactionRecDetail", &_args, &_result); err != nil {
		return
	}
	return nil
}
func (p *BankClient) SyncTransferReceipt(ctx context.Context, taskId int64, param []byte, organizationId int64) (err error) {
	var _args BankSyncTransferReceiptArgs
	_args.TaskId = taskId
	_args.Param = param
	_args.OrganizationId = organizationId
	var _result BankSyncTransferReceiptResult
	if err = p.Client_().Call(ctx, "syncTransferReceipt", &_args, &_result); err != nil {
		return
	}
	return nil
}
func (p *BankClient) SyncTransactionDetail(ctx context.Context, taskId int64, param []byte, organizationId int64) (err error) {
	var _args BankSyncTransactionDetailArgs
	_args.TaskId = taskId
	_args.Param = param
	_args.OrganizationId = organizationId
	var _result BankSyncTransactionDetailResult
	if err = p.Client_().Call(ctx, "syncTransactionDetail", &_args, &_result); err != nil {
		return
	}
	return nil
}
func (p *BankClient) DashboardData(ctx context.Context, organizationId int64) (r *DashboardData, err error) {
	var _args BankDashboardDataArgs
	_args.OrganizationId = organizationId
	var _result BankDashboardDataResult
	if err = p.Client_().Call(ctx, "dashboardData", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BankClient) GetCashFlowMonthChartData(ctx context.Context, req *MonthChartDataRequest) (r *ChartData, err error) {
	var _args BankGetCashFlowMonthChartDataArgs
	_args.Req = req
	var _result BankGetCashFlowMonthChartDataResult
	if err = p.Client_().Call(ctx, "getCashFlowMonthChartData", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BankClient) GetBalanceMonthChartData(ctx context.Context, req *MonthChartDataRequest) (r *ChartData, err error) {
	var _args BankGetBalanceMonthChartDataArgs
	_args.Req = req
	var _result BankGetBalanceMonthChartDataResult
	if err = p.Client_().Call(ctx, "getBalanceMonthChartData", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BankClient) QueryAccountBalance(ctx context.Context, req *QueryAccountBalanceRequest) (r *QueryAccountBalanceResponse, err error) {
	var _args BankQueryAccountBalanceArgs
	_args.Req = req
	var _result BankQueryAccountBalanceResult
	if err = p.Client_().Call(ctx, "QueryAccountBalance", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BankClient) ImportBankBusinessPayrollData(ctx context.Context, taskId int64, param []byte, organizationId int64) (err error) {
	var _args BankImportBankBusinessPayrollDataArgs
	_args.TaskId = taskId
	_args.Param = param
	_args.OrganizationId = organizationId
	var _result BankImportBankBusinessPayrollDataResult
	if err = p.Client_().Call(ctx, "ImportBankBusinessPayrollData", &_args, &_result); err != nil {
		return
	}
	return nil
}
func (p *BankClient) ListBankBusinessPayroll(ctx context.Context, req *ListBusinessPayrollRequest) (r *ListBusinessPayrollResponse, err error) {
	var _args BankListBankBusinessPayrollArgs
	_args.Req = req
	var _result BankListBankBusinessPayrollResult
	if err = p.Client_().Call(ctx, "ListBankBusinessPayroll", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BankClient) ListBankBusinessPayrollDetail(ctx context.Context, req *ListBusinessPayrollDetailRequest) (r *ListBusinessPayrollDetailResponse, err error) {
	var _args BankListBankBusinessPayrollDetailArgs
	_args.Req = req
	var _result BankListBankBusinessPayrollDetailResult
	if err = p.Client_().Call(ctx, "ListBankBusinessPayrollDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BankClient) SyncBankBusinessPayrollDetail(ctx context.Context, req *SyncBusinessPayrollResultRequest) (r *SyncBusinessPayrollResultResponse, err error) {
	var _args BankSyncBankBusinessPayrollDetailArgs
	_args.Req = req
	var _result BankSyncBankBusinessPayrollDetailResult
	if err = p.Client_().Call(ctx, "SyncBankBusinessPayrollDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BankClient) HandleTransactionDetailReceipt(ctx context.Context, beginDate string, endDate string, organizationId int64) (err error) {
	var _args BankHandleTransactionDetailReceiptArgs
	_args.BeginDate = beginDate
	_args.EndDate = endDate
	_args.OrganizationId = organizationId
	var _result BankHandleTransactionDetailReceiptResult
	if err = p.Client_().Call(ctx, "HandleTransactionDetailReceipt", &_args, &_result); err != nil {
		return
	}
	return nil
}
func (p *BankClient) CreateVirtualAccount(ctx context.Context, req *CreateVirtualAccountRequest) (r *CreateVirtualAccountResponse, err error) {
	var _args BankCreateVirtualAccountArgs
	_args.Req = req
	var _result BankCreateVirtualAccountResult
	if err = p.Client_().Call(ctx, "createVirtualAccount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BankClient) SyncVirtualAccountBalance(ctx context.Context) (err error) {
	var _args BankSyncVirtualAccountBalanceArgs
	var _result BankSyncVirtualAccountBalanceResult
	if err = p.Client_().Call(ctx, "SyncVirtualAccountBalance", &_args, &_result); err != nil {
		return
	}
	return nil
}
func (p *BankClient) QueryVirtualAccountBalance(ctx context.Context, organizationId int64, bankType string) (r *VirtualAccountBalanceData, err error) {
	var _args BankQueryVirtualAccountBalanceArgs
	_args.OrganizationId = organizationId
	_args.BankType = bankType
	var _result BankQueryVirtualAccountBalanceResult
	if err = p.Client_().Call(ctx, "QueryVirtualAccountBalance", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BankClient) SpdBankVirtualAccountTranscation(ctx context.Context, organizationId int64, req *BankTransferReceiptData) (r *BankVirtualAccountTranscationResponse, err error) {
	var _args BankSpdBankVirtualAccountTranscationArgs
	_args.OrganizationId = organizationId
	_args.Req = req
	var _result BankSpdBankVirtualAccountTranscationResult
	if err = p.Client_().Call(ctx, "spdBankVirtualAccountTranscation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BankClient) ListPaymentReceipt(ctx context.Context, req *ListPaymentReceiptRequest) (r *ListPaymentReceiptResponse, err error) {
	var _args BankListPaymentReceiptArgs
	_args.Req = req
	var _result BankListPaymentReceiptResult
	if err = p.Client_().Call(ctx, "listPaymentReceipt", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BankClient) GetPaymentReceipt(ctx context.Context, id int64) (r *PaymentReceiptData, err error) {
	var _args BankGetPaymentReceiptArgs
	_args.Id = id
	var _result BankGetPaymentReceiptResult
	if err = p.Client_().Call(ctx, "getPaymentReceipt", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BankClient) SimpleGetPaymentReceipt(ctx context.Context, id int64) (r *PaymentReceiptData, err error) {
	var _args BankSimpleGetPaymentReceiptArgs
	_args.Id = id
	var _result BankSimpleGetPaymentReceiptResult
	if err = p.Client_().Call(ctx, "simpleGetPaymentReceipt", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BankClient) SimpleGetPaymentReceiptByProcessInstanceId(ctx context.Context, id int64) (r *PaymentReceiptData, err error) {
	var _args BankSimpleGetPaymentReceiptByProcessInstanceIdArgs
	_args.Id = id
	var _result BankSimpleGetPaymentReceiptByProcessInstanceIdResult
	if err = p.Client_().Call(ctx, "simpleGetPaymentReceiptByProcessInstanceId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BankClient) AddPaymentReceipt(ctx context.Context, req *PaymentReceiptData) (err error) {
	var _args BankAddPaymentReceiptArgs
	_args.Req = req
	var _result BankAddPaymentReceiptResult
	if err = p.Client_().Call(ctx, "addPaymentReceipt", &_args, &_result); err != nil {
		return
	}
	return nil
}
func (p *BankClient) ApprovePaymentReceipt(ctx context.Context, id int64, req *PaymentReceiptData) (err error) {
	var _args BankApprovePaymentReceiptArgs
	_args.Id = id
	_args.Req = req
	var _result BankApprovePaymentReceiptResult
	if err = p.Client_().Call(ctx, "approvePaymentReceipt", &_args, &_result); err != nil {
		return
	}
	return nil
}
func (p *BankClient) RefusePaymentReceipt(ctx context.Context, id int64, req *PaymentReceiptData, remark string) (err error) {
	var _args BankRefusePaymentReceiptArgs
	_args.Id = id
	_args.Req = req
	_args.Remark = remark
	var _result BankRefusePaymentReceiptResult
	if err = p.Client_().Call(ctx, "refusePaymentReceipt", &_args, &_result); err != nil {
		return
	}
	return nil
}
func (p *BankClient) PaymentReceiptRun(ctx context.Context, id int64) (err error) {
	var _args BankPaymentReceiptRunArgs
	_args.Id = id
	var _result BankPaymentReceiptRunResult
	if err = p.Client_().Call(ctx, "paymentReceiptRun", &_args, &_result); err != nil {
		return
	}
	return nil
}
func (p *BankClient) TransmitPaymentReceipt(ctx context.Context, processInstanceId int64, transmitUserId int64) (err error) {
	var _args BankTransmitPaymentReceiptArgs
	_args.ProcessInstanceId = processInstanceId
	_args.TransmitUserId = transmitUserId
	var _result BankTransmitPaymentReceiptResult
	if err = p.Client_().Call(ctx, "transmitPaymentReceipt", &_args, &_result); err != nil {
		return
	}
	return nil
}
func (p *BankClient) SendBackPaymentApplication(ctx context.Context, id int64, req *PaymentReceiptData, remark string) (err error) {
	var _args BankSendBackPaymentApplicationArgs
	_args.Id = id
	_args.Req = req
	_args.Remark = remark
	var _result BankSendBackPaymentApplicationResult
	if err = p.Client_().Call(ctx, "sendBackPaymentApplication", &_args, &_result); err != nil {
		return
	}
	return nil
}
func (p *BankClient) WithDrawPaymentReceipt(ctx context.Context, id int64, req *PaymentReceiptData) (err error) {
	var _args BankWithDrawPaymentReceiptArgs
	_args.Id = id
	_args.Req = req
	var _result BankWithDrawPaymentReceiptResult
	if err = p.Client_().Call(ctx, "withDrawPaymentReceipt", &_args, &_result); err != nil {
		return
	}
	return nil
}
func (p *BankClient) CommentPaymentReceipt(ctx context.Context, req *PaymentReceiptData) (err error) {
	var _args BankCommentPaymentReceiptArgs
	_args.Req = req
	var _result BankCommentPaymentReceiptResult
	if err = p.Client_().Call(ctx, "commentPaymentReceipt", &_args, &_result); err != nil {
		return
	}
	return nil
}
func (p *BankClient) AddTagPaymentReceipt(ctx context.Context, req *PaymentReceiptData) (err error) {
	var _args BankAddTagPaymentReceiptArgs
	_args.Req = req
	var _result BankAddTagPaymentReceiptResult
	if err = p.Client_().Call(ctx, "addTagPaymentReceipt", &_args, &_result); err != nil {
		return
	}
	return nil
}
func (p *BankClient) HandleSyncPaymentReceipt(ctx context.Context, beginDate string, endDate string, organizationId int64) (err error) {
	var _args BankHandleSyncPaymentReceiptArgs
	_args.BeginDate = beginDate
	_args.EndDate = endDate
	_args.OrganizationId = organizationId
	var _result BankHandleSyncPaymentReceiptResult
	if err = p.Client_().Call(ctx, "handleSyncPaymentReceipt", &_args, &_result); err != nil {
		return
	}
	return nil
}
func (p *BankClient) SyncPaymentReceipt(ctx context.Context, taskId int64, param []byte, organizationId int64) (err error) {
	var _args BankSyncPaymentReceiptArgs
	_args.TaskId = taskId
	_args.Param = param
	_args.OrganizationId = organizationId
	var _result BankSyncPaymentReceiptResult
	if err = p.Client_().Call(ctx, "syncPaymentReceipt", &_args, &_result); err != nil {
		return
	}
	return nil
}
func (p *BankClient) PinganBankAccountSignatureApply(ctx context.Context, req *PinganBankAccountSignatureApplyRequest) (r *PinganUserAcctSignatureApplyResponse, err error) {
	var _args BankPinganBankAccountSignatureApplyArgs
	_args.Req = req
	var _result BankPinganBankAccountSignatureApplyResult
	if err = p.Client_().Call(ctx, "pinganBankAccountSignatureApply", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BankClient) PinganBankAccountSignatureQuery(ctx context.Context, req *PinganBankAccountSignatureApplyRequest) (r *PinganUserAcctSignatureApplyResponse, err error) {
	var _args BankPinganBankAccountSignatureQueryArgs
	_args.Req = req
	var _result BankPinganBankAccountSignatureQueryResult
	if err = p.Client_().Call(ctx, "pinganBankAccountSignatureQuery", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BankClient) SystemRefusePaymentReceipt(ctx context.Context, id int64) (err error) {
	var _args BankSystemRefusePaymentReceiptArgs
	_args.Id = id
	var _result BankSystemRefusePaymentReceiptResult
	if err = p.Client_().Call(ctx, "systemRefusePaymentReceipt", &_args, &_result); err != nil {
		return
	}
	return nil
}
func (p *BankClient) SystemApprovePaymentReceipt(ctx context.Context, id int64) (err error) {
	var _args BankSystemApprovePaymentReceiptArgs
	_args.Id = id
	var _result BankSystemApprovePaymentReceiptResult
	if err = p.Client_().Call(ctx, "systemApprovePaymentReceipt", &_args, &_result); err != nil {
		return
	}
	return nil
}

type BankProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      Bank
}

func (p *BankProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *BankProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *BankProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewBankProcessor(handler Bank) *BankProcessor {
	self := &BankProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("listBankTransferReceipt", &bankProcessorListBankTransferReceipt{handler: handler})
	self.AddToProcessorMap("getBankTransferReceipt", &bankProcessorGetBankTransferReceipt{handler: handler})
	self.AddToProcessorMap("addBankTransferReceipt", &bankProcessorAddBankTransferReceipt{handler: handler})
	self.AddToProcessorMap("editBankTransferReceipt", &bankProcessorEditBankTransferReceipt{handler: handler})
	self.AddToProcessorMap("deleteBankTransferReceipt", &bankProcessorDeleteBankTransferReceipt{handler: handler})
	self.AddToProcessorMap("countBankTransferReceipt", &bankProcessorCountBankTransferReceipt{handler: handler})
	self.AddToProcessorMap("confirmTransaction", &bankProcessorConfirmTransaction{handler: handler})
	self.AddToProcessorMap("handleTransferReceiptResult", &bankProcessorHandleTransferReceiptResult_{handler: handler})
	self.AddToProcessorMap("listBankTransactionDetail", &bankProcessorListBankTransactionDetail{handler: handler})
	self.AddToProcessorMap("simpleListBankTransactionDetail", &bankProcessorSimpleListBankTransactionDetail{handler: handler})
	self.AddToProcessorMap("getBankTransactionDetail", &bankProcessorGetBankTransactionDetail{handler: handler})
	self.AddToProcessorMap("simpleGetBankTransactionDetail", &bankProcessorSimpleGetBankTransactionDetail{handler: handler})
	self.AddToProcessorMap("handleTransactionDetail", &bankProcessorHandleTransactionDetail{handler: handler})
	self.AddToProcessorMap("createTransactionDetailProcessInstance", &bankProcessorCreateTransactionDetailProcessInstance{handler: handler})
	self.AddToProcessorMap("EditBankTransactionDetailExtField", &bankProcessorEditBankTransactionDetailExtField{handler: handler})
	self.AddToProcessorMap("listBankTransactionDetailProcessInstance", &bankProcessorListBankTransactionDetailProcessInstance{handler: handler})
	self.AddToProcessorMap("GetBankCodeInfo", &bankProcessorGetBankCodeInfo{handler: handler})
	self.AddToProcessorMap("QueryBankCardInfo", &bankProcessorQueryBankCardInfo{handler: handler})
	self.AddToProcessorMap("ListBankCode", &bankProcessorListBankCode{handler: handler})
	self.AddToProcessorMap("GetBankCode", &bankProcessorGetBankCode{handler: handler})
	self.AddToProcessorMap("AddBankCode", &bankProcessorAddBankCode{handler: handler})
	self.AddToProcessorMap("EditBankCode", &bankProcessorEditBankCode{handler: handler})
	self.AddToProcessorMap("DeleteBankCode", &bankProcessorDeleteBankCode{handler: handler})
	self.AddToProcessorMap("HandleSyncTransferReceipt", &bankProcessorHandleSyncTransferReceipt{handler: handler})
	self.AddToProcessorMap("UpdateBankTransactionRecDetail", &bankProcessorUpdateBankTransactionRecDetail{handler: handler})
	self.AddToProcessorMap("syncTransferReceipt", &bankProcessorSyncTransferReceipt{handler: handler})
	self.AddToProcessorMap("syncTransactionDetail", &bankProcessorSyncTransactionDetail{handler: handler})
	self.AddToProcessorMap("dashboardData", &bankProcessorDashboardData{handler: handler})
	self.AddToProcessorMap("getCashFlowMonthChartData", &bankProcessorGetCashFlowMonthChartData{handler: handler})
	self.AddToProcessorMap("getBalanceMonthChartData", &bankProcessorGetBalanceMonthChartData{handler: handler})
	self.AddToProcessorMap("QueryAccountBalance", &bankProcessorQueryAccountBalance{handler: handler})
	self.AddToProcessorMap("ImportBankBusinessPayrollData", &bankProcessorImportBankBusinessPayrollData{handler: handler})
	self.AddToProcessorMap("ListBankBusinessPayroll", &bankProcessorListBankBusinessPayroll{handler: handler})
	self.AddToProcessorMap("ListBankBusinessPayrollDetail", &bankProcessorListBankBusinessPayrollDetail{handler: handler})
	self.AddToProcessorMap("SyncBankBusinessPayrollDetail", &bankProcessorSyncBankBusinessPayrollDetail{handler: handler})
	self.AddToProcessorMap("HandleTransactionDetailReceipt", &bankProcessorHandleTransactionDetailReceipt{handler: handler})
	self.AddToProcessorMap("createVirtualAccount", &bankProcessorCreateVirtualAccount{handler: handler})
	self.AddToProcessorMap("SyncVirtualAccountBalance", &bankProcessorSyncVirtualAccountBalance{handler: handler})
	self.AddToProcessorMap("QueryVirtualAccountBalance", &bankProcessorQueryVirtualAccountBalance{handler: handler})
	self.AddToProcessorMap("spdBankVirtualAccountTranscation", &bankProcessorSpdBankVirtualAccountTranscation{handler: handler})
	self.AddToProcessorMap("listPaymentReceipt", &bankProcessorListPaymentReceipt{handler: handler})
	self.AddToProcessorMap("getPaymentReceipt", &bankProcessorGetPaymentReceipt{handler: handler})
	self.AddToProcessorMap("simpleGetPaymentReceipt", &bankProcessorSimpleGetPaymentReceipt{handler: handler})
	self.AddToProcessorMap("simpleGetPaymentReceiptByProcessInstanceId", &bankProcessorSimpleGetPaymentReceiptByProcessInstanceId{handler: handler})
	self.AddToProcessorMap("addPaymentReceipt", &bankProcessorAddPaymentReceipt{handler: handler})
	self.AddToProcessorMap("approvePaymentReceipt", &bankProcessorApprovePaymentReceipt{handler: handler})
	self.AddToProcessorMap("refusePaymentReceipt", &bankProcessorRefusePaymentReceipt{handler: handler})
	self.AddToProcessorMap("paymentReceiptRun", &bankProcessorPaymentReceiptRun{handler: handler})
	self.AddToProcessorMap("transmitPaymentReceipt", &bankProcessorTransmitPaymentReceipt{handler: handler})
	self.AddToProcessorMap("sendBackPaymentApplication", &bankProcessorSendBackPaymentApplication{handler: handler})
	self.AddToProcessorMap("withDrawPaymentReceipt", &bankProcessorWithDrawPaymentReceipt{handler: handler})
	self.AddToProcessorMap("commentPaymentReceipt", &bankProcessorCommentPaymentReceipt{handler: handler})
	self.AddToProcessorMap("addTagPaymentReceipt", &bankProcessorAddTagPaymentReceipt{handler: handler})
	self.AddToProcessorMap("handleSyncPaymentReceipt", &bankProcessorHandleSyncPaymentReceipt{handler: handler})
	self.AddToProcessorMap("syncPaymentReceipt", &bankProcessorSyncPaymentReceipt{handler: handler})
	self.AddToProcessorMap("pinganBankAccountSignatureApply", &bankProcessorPinganBankAccountSignatureApply{handler: handler})
	self.AddToProcessorMap("pinganBankAccountSignatureQuery", &bankProcessorPinganBankAccountSignatureQuery{handler: handler})
	self.AddToProcessorMap("systemRefusePaymentReceipt", &bankProcessorSystemRefusePaymentReceipt{handler: handler})
	self.AddToProcessorMap("systemApprovePaymentReceipt", &bankProcessorSystemApprovePaymentReceipt{handler: handler})
	return self
}
func (p *BankProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type bankProcessorListBankTransferReceipt struct {
	handler Bank
}

func (p *bankProcessorListBankTransferReceipt) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankListBankTransferReceiptArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listBankTransferReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankListBankTransferReceiptResult{}
	var retval *ListBankTransferReceiptResponse
	if retval, err2 = p.handler.ListBankTransferReceipt(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listBankTransferReceipt: "+err2.Error())
		oprot.WriteMessageBegin("listBankTransferReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("listBankTransferReceipt", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorGetBankTransferReceipt struct {
	handler Bank
}

func (p *bankProcessorGetBankTransferReceipt) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankGetBankTransferReceiptArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getBankTransferReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankGetBankTransferReceiptResult{}
	var retval *BankTransferReceiptData
	if retval, err2 = p.handler.GetBankTransferReceipt(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBankTransferReceipt: "+err2.Error())
		oprot.WriteMessageBegin("getBankTransferReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getBankTransferReceipt", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorAddBankTransferReceipt struct {
	handler Bank
}

func (p *bankProcessorAddBankTransferReceipt) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankAddBankTransferReceiptArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addBankTransferReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankAddBankTransferReceiptResult{}
	var retval int64
	if retval, err2 = p.handler.AddBankTransferReceipt(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addBankTransferReceipt: "+err2.Error())
		oprot.WriteMessageBegin("addBankTransferReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("addBankTransferReceipt", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorEditBankTransferReceipt struct {
	handler Bank
}

func (p *bankProcessorEditBankTransferReceipt) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankEditBankTransferReceiptArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("editBankTransferReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankEditBankTransferReceiptResult{}
	if err2 = p.handler.EditBankTransferReceipt(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing editBankTransferReceipt: "+err2.Error())
		oprot.WriteMessageBegin("editBankTransferReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("editBankTransferReceipt", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorDeleteBankTransferReceipt struct {
	handler Bank
}

func (p *bankProcessorDeleteBankTransferReceipt) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankDeleteBankTransferReceiptArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteBankTransferReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankDeleteBankTransferReceiptResult{}
	if err2 = p.handler.DeleteBankTransferReceipt(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteBankTransferReceipt: "+err2.Error())
		oprot.WriteMessageBegin("deleteBankTransferReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("deleteBankTransferReceipt", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorCountBankTransferReceipt struct {
	handler Bank
}

func (p *bankProcessorCountBankTransferReceipt) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankCountBankTransferReceiptArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("countBankTransferReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankCountBankTransferReceiptResult{}
	var retval int64
	if retval, err2 = p.handler.CountBankTransferReceipt(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing countBankTransferReceipt: "+err2.Error())
		oprot.WriteMessageBegin("countBankTransferReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("countBankTransferReceipt", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorConfirmTransaction struct {
	handler Bank
}

func (p *bankProcessorConfirmTransaction) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankConfirmTransactionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("confirmTransaction", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankConfirmTransactionResult{}
	if err2 = p.handler.ConfirmTransaction(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing confirmTransaction: "+err2.Error())
		oprot.WriteMessageBegin("confirmTransaction", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("confirmTransaction", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorHandleTransferReceiptResult_ struct {
	handler Bank
}

func (p *bankProcessorHandleTransferReceiptResult_) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankHandleTransferReceiptResultArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("handleTransferReceiptResult", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankHandleTransferReceiptResultResult{}
	if err2 = p.handler.HandleTransferReceiptResult_(ctx, args.Id); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing handleTransferReceiptResult: "+err2.Error())
		oprot.WriteMessageBegin("handleTransferReceiptResult", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("handleTransferReceiptResult", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorListBankTransactionDetail struct {
	handler Bank
}

func (p *bankProcessorListBankTransactionDetail) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankListBankTransactionDetailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listBankTransactionDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankListBankTransactionDetailResult{}
	var retval *ListBankTransactionDetailResponse
	if retval, err2 = p.handler.ListBankTransactionDetail(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listBankTransactionDetail: "+err2.Error())
		oprot.WriteMessageBegin("listBankTransactionDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("listBankTransactionDetail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorSimpleListBankTransactionDetail struct {
	handler Bank
}

func (p *bankProcessorSimpleListBankTransactionDetail) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankSimpleListBankTransactionDetailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("simpleListBankTransactionDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankSimpleListBankTransactionDetailResult{}
	var retval *ListBankTransactionDetailResponse
	if retval, err2 = p.handler.SimpleListBankTransactionDetail(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing simpleListBankTransactionDetail: "+err2.Error())
		oprot.WriteMessageBegin("simpleListBankTransactionDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("simpleListBankTransactionDetail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorGetBankTransactionDetail struct {
	handler Bank
}

func (p *bankProcessorGetBankTransactionDetail) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankGetBankTransactionDetailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getBankTransactionDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankGetBankTransactionDetailResult{}
	var retval *BankTransactionDetailData
	if retval, err2 = p.handler.GetBankTransactionDetail(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBankTransactionDetail: "+err2.Error())
		oprot.WriteMessageBegin("getBankTransactionDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getBankTransactionDetail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorSimpleGetBankTransactionDetail struct {
	handler Bank
}

func (p *bankProcessorSimpleGetBankTransactionDetail) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankSimpleGetBankTransactionDetailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("simpleGetBankTransactionDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankSimpleGetBankTransactionDetailResult{}
	var retval *BankTransactionDetailData
	if retval, err2 = p.handler.SimpleGetBankTransactionDetail(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing simpleGetBankTransactionDetail: "+err2.Error())
		oprot.WriteMessageBegin("simpleGetBankTransactionDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("simpleGetBankTransactionDetail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorHandleTransactionDetail struct {
	handler Bank
}

func (p *bankProcessorHandleTransactionDetail) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankHandleTransactionDetailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("handleTransactionDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankHandleTransactionDetailResult{}
	if err2 = p.handler.HandleTransactionDetail(ctx, args.BeginDate, args.EndDate, args.OrganizationId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing handleTransactionDetail: "+err2.Error())
		oprot.WriteMessageBegin("handleTransactionDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("handleTransactionDetail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorCreateTransactionDetailProcessInstance struct {
	handler Bank
}

func (p *bankProcessorCreateTransactionDetailProcessInstance) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankCreateTransactionDetailProcessInstanceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createTransactionDetailProcessInstance", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankCreateTransactionDetailProcessInstanceResult{}
	if err2 = p.handler.CreateTransactionDetailProcessInstance(ctx, args.Id); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createTransactionDetailProcessInstance: "+err2.Error())
		oprot.WriteMessageBegin("createTransactionDetailProcessInstance", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("createTransactionDetailProcessInstance", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorEditBankTransactionDetailExtField struct {
	handler Bank
}

func (p *bankProcessorEditBankTransactionDetailExtField) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankEditBankTransactionDetailExtFieldArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("EditBankTransactionDetailExtField", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankEditBankTransactionDetailExtFieldResult{}
	if err2 = p.handler.EditBankTransactionDetailExtField(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing EditBankTransactionDetailExtField: "+err2.Error())
		oprot.WriteMessageBegin("EditBankTransactionDetailExtField", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("EditBankTransactionDetailExtField", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorListBankTransactionDetailProcessInstance struct {
	handler Bank
}

func (p *bankProcessorListBankTransactionDetailProcessInstance) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankListBankTransactionDetailProcessInstanceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listBankTransactionDetailProcessInstance", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankListBankTransactionDetailProcessInstanceResult{}
	var retval []*BankTransactionDetailProcessInstanceData
	if retval, err2 = p.handler.ListBankTransactionDetailProcessInstance(ctx, args.Id); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listBankTransactionDetailProcessInstance: "+err2.Error())
		oprot.WriteMessageBegin("listBankTransactionDetailProcessInstance", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("listBankTransactionDetailProcessInstance", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorGetBankCodeInfo struct {
	handler Bank
}

func (p *bankProcessorGetBankCodeInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankGetBankCodeInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetBankCodeInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankGetBankCodeInfoResult{}
	var retval *BankCodeData
	if retval, err2 = p.handler.GetBankCodeInfo(ctx, args.Code); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetBankCodeInfo: "+err2.Error())
		oprot.WriteMessageBegin("GetBankCodeInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetBankCodeInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorQueryBankCardInfo struct {
	handler Bank
}

func (p *bankProcessorQueryBankCardInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankQueryBankCardInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("QueryBankCardInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankQueryBankCardInfoResult{}
	var retval *QueryBankCardInfoResponse
	if retval, err2 = p.handler.QueryBankCardInfo(ctx, args.CardNo); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing QueryBankCardInfo: "+err2.Error())
		oprot.WriteMessageBegin("QueryBankCardInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("QueryBankCardInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorListBankCode struct {
	handler Bank
}

func (p *bankProcessorListBankCode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankListBankCodeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListBankCode", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankListBankCodeResult{}
	var retval *ListBankCodeResponse
	if retval, err2 = p.handler.ListBankCode(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListBankCode: "+err2.Error())
		oprot.WriteMessageBegin("ListBankCode", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListBankCode", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorGetBankCode struct {
	handler Bank
}

func (p *bankProcessorGetBankCode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankGetBankCodeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetBankCode", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankGetBankCodeResult{}
	var retval *BankCodeData
	if retval, err2 = p.handler.GetBankCode(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetBankCode: "+err2.Error())
		oprot.WriteMessageBegin("GetBankCode", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetBankCode", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorAddBankCode struct {
	handler Bank
}

func (p *bankProcessorAddBankCode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankAddBankCodeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("AddBankCode", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankAddBankCodeResult{}
	if err2 = p.handler.AddBankCode(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddBankCode: "+err2.Error())
		oprot.WriteMessageBegin("AddBankCode", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("AddBankCode", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorEditBankCode struct {
	handler Bank
}

func (p *bankProcessorEditBankCode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankEditBankCodeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("EditBankCode", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankEditBankCodeResult{}
	if err2 = p.handler.EditBankCode(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing EditBankCode: "+err2.Error())
		oprot.WriteMessageBegin("EditBankCode", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("EditBankCode", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorDeleteBankCode struct {
	handler Bank
}

func (p *bankProcessorDeleteBankCode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankDeleteBankCodeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteBankCode", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankDeleteBankCodeResult{}
	if err2 = p.handler.DeleteBankCode(ctx, args.Id); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteBankCode: "+err2.Error())
		oprot.WriteMessageBegin("DeleteBankCode", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("DeleteBankCode", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorHandleSyncTransferReceipt struct {
	handler Bank
}

func (p *bankProcessorHandleSyncTransferReceipt) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankHandleSyncTransferReceiptArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("HandleSyncTransferReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankHandleSyncTransferReceiptResult{}
	if err2 = p.handler.HandleSyncTransferReceipt(ctx, args.BeginDate, args.EndDate, args.OrganizationId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing HandleSyncTransferReceipt: "+err2.Error())
		oprot.WriteMessageBegin("HandleSyncTransferReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("HandleSyncTransferReceipt", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorUpdateBankTransactionRecDetail struct {
	handler Bank
}

func (p *bankProcessorUpdateBankTransactionRecDetail) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankUpdateBankTransactionRecDetailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateBankTransactionRecDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankUpdateBankTransactionRecDetailResult{}
	if err2 = p.handler.UpdateBankTransactionRecDetail(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateBankTransactionRecDetail: "+err2.Error())
		oprot.WriteMessageBegin("UpdateBankTransactionRecDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("UpdateBankTransactionRecDetail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorSyncTransferReceipt struct {
	handler Bank
}

func (p *bankProcessorSyncTransferReceipt) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankSyncTransferReceiptArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("syncTransferReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankSyncTransferReceiptResult{}
	if err2 = p.handler.SyncTransferReceipt(ctx, args.TaskId, args.Param, args.OrganizationId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing syncTransferReceipt: "+err2.Error())
		oprot.WriteMessageBegin("syncTransferReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("syncTransferReceipt", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorSyncTransactionDetail struct {
	handler Bank
}

func (p *bankProcessorSyncTransactionDetail) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankSyncTransactionDetailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("syncTransactionDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankSyncTransactionDetailResult{}
	if err2 = p.handler.SyncTransactionDetail(ctx, args.TaskId, args.Param, args.OrganizationId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing syncTransactionDetail: "+err2.Error())
		oprot.WriteMessageBegin("syncTransactionDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("syncTransactionDetail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorDashboardData struct {
	handler Bank
}

func (p *bankProcessorDashboardData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankDashboardDataArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("dashboardData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankDashboardDataResult{}
	var retval *DashboardData
	if retval, err2 = p.handler.DashboardData(ctx, args.OrganizationId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dashboardData: "+err2.Error())
		oprot.WriteMessageBegin("dashboardData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("dashboardData", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorGetCashFlowMonthChartData struct {
	handler Bank
}

func (p *bankProcessorGetCashFlowMonthChartData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankGetCashFlowMonthChartDataArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getCashFlowMonthChartData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankGetCashFlowMonthChartDataResult{}
	var retval *ChartData
	if retval, err2 = p.handler.GetCashFlowMonthChartData(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCashFlowMonthChartData: "+err2.Error())
		oprot.WriteMessageBegin("getCashFlowMonthChartData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getCashFlowMonthChartData", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorGetBalanceMonthChartData struct {
	handler Bank
}

func (p *bankProcessorGetBalanceMonthChartData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankGetBalanceMonthChartDataArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getBalanceMonthChartData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankGetBalanceMonthChartDataResult{}
	var retval *ChartData
	if retval, err2 = p.handler.GetBalanceMonthChartData(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBalanceMonthChartData: "+err2.Error())
		oprot.WriteMessageBegin("getBalanceMonthChartData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getBalanceMonthChartData", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorQueryAccountBalance struct {
	handler Bank
}

func (p *bankProcessorQueryAccountBalance) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankQueryAccountBalanceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("QueryAccountBalance", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankQueryAccountBalanceResult{}
	var retval *QueryAccountBalanceResponse
	if retval, err2 = p.handler.QueryAccountBalance(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing QueryAccountBalance: "+err2.Error())
		oprot.WriteMessageBegin("QueryAccountBalance", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("QueryAccountBalance", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorImportBankBusinessPayrollData struct {
	handler Bank
}

func (p *bankProcessorImportBankBusinessPayrollData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankImportBankBusinessPayrollDataArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ImportBankBusinessPayrollData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankImportBankBusinessPayrollDataResult{}
	if err2 = p.handler.ImportBankBusinessPayrollData(ctx, args.TaskId, args.Param, args.OrganizationId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ImportBankBusinessPayrollData: "+err2.Error())
		oprot.WriteMessageBegin("ImportBankBusinessPayrollData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("ImportBankBusinessPayrollData", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorListBankBusinessPayroll struct {
	handler Bank
}

func (p *bankProcessorListBankBusinessPayroll) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankListBankBusinessPayrollArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListBankBusinessPayroll", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankListBankBusinessPayrollResult{}
	var retval *ListBusinessPayrollResponse
	if retval, err2 = p.handler.ListBankBusinessPayroll(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListBankBusinessPayroll: "+err2.Error())
		oprot.WriteMessageBegin("ListBankBusinessPayroll", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListBankBusinessPayroll", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorListBankBusinessPayrollDetail struct {
	handler Bank
}

func (p *bankProcessorListBankBusinessPayrollDetail) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankListBankBusinessPayrollDetailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListBankBusinessPayrollDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankListBankBusinessPayrollDetailResult{}
	var retval *ListBusinessPayrollDetailResponse
	if retval, err2 = p.handler.ListBankBusinessPayrollDetail(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListBankBusinessPayrollDetail: "+err2.Error())
		oprot.WriteMessageBegin("ListBankBusinessPayrollDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListBankBusinessPayrollDetail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorSyncBankBusinessPayrollDetail struct {
	handler Bank
}

func (p *bankProcessorSyncBankBusinessPayrollDetail) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankSyncBankBusinessPayrollDetailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SyncBankBusinessPayrollDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankSyncBankBusinessPayrollDetailResult{}
	var retval *SyncBusinessPayrollResultResponse
	if retval, err2 = p.handler.SyncBankBusinessPayrollDetail(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SyncBankBusinessPayrollDetail: "+err2.Error())
		oprot.WriteMessageBegin("SyncBankBusinessPayrollDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SyncBankBusinessPayrollDetail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorHandleTransactionDetailReceipt struct {
	handler Bank
}

func (p *bankProcessorHandleTransactionDetailReceipt) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankHandleTransactionDetailReceiptArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("HandleTransactionDetailReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankHandleTransactionDetailReceiptResult{}
	if err2 = p.handler.HandleTransactionDetailReceipt(ctx, args.BeginDate, args.EndDate, args.OrganizationId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing HandleTransactionDetailReceipt: "+err2.Error())
		oprot.WriteMessageBegin("HandleTransactionDetailReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("HandleTransactionDetailReceipt", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorCreateVirtualAccount struct {
	handler Bank
}

func (p *bankProcessorCreateVirtualAccount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankCreateVirtualAccountArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createVirtualAccount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankCreateVirtualAccountResult{}
	var retval *CreateVirtualAccountResponse
	if retval, err2 = p.handler.CreateVirtualAccount(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createVirtualAccount: "+err2.Error())
		oprot.WriteMessageBegin("createVirtualAccount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("createVirtualAccount", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorSyncVirtualAccountBalance struct {
	handler Bank
}

func (p *bankProcessorSyncVirtualAccountBalance) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankSyncVirtualAccountBalanceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SyncVirtualAccountBalance", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankSyncVirtualAccountBalanceResult{}
	if err2 = p.handler.SyncVirtualAccountBalance(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SyncVirtualAccountBalance: "+err2.Error())
		oprot.WriteMessageBegin("SyncVirtualAccountBalance", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("SyncVirtualAccountBalance", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorQueryVirtualAccountBalance struct {
	handler Bank
}

func (p *bankProcessorQueryVirtualAccountBalance) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankQueryVirtualAccountBalanceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("QueryVirtualAccountBalance", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankQueryVirtualAccountBalanceResult{}
	var retval *VirtualAccountBalanceData
	if retval, err2 = p.handler.QueryVirtualAccountBalance(ctx, args.OrganizationId, args.BankType); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing QueryVirtualAccountBalance: "+err2.Error())
		oprot.WriteMessageBegin("QueryVirtualAccountBalance", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("QueryVirtualAccountBalance", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorSpdBankVirtualAccountTranscation struct {
	handler Bank
}

func (p *bankProcessorSpdBankVirtualAccountTranscation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankSpdBankVirtualAccountTranscationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("spdBankVirtualAccountTranscation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankSpdBankVirtualAccountTranscationResult{}
	var retval *BankVirtualAccountTranscationResponse
	if retval, err2 = p.handler.SpdBankVirtualAccountTranscation(ctx, args.OrganizationId, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing spdBankVirtualAccountTranscation: "+err2.Error())
		oprot.WriteMessageBegin("spdBankVirtualAccountTranscation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("spdBankVirtualAccountTranscation", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorListPaymentReceipt struct {
	handler Bank
}

func (p *bankProcessorListPaymentReceipt) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankListPaymentReceiptArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listPaymentReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankListPaymentReceiptResult{}
	var retval *ListPaymentReceiptResponse
	if retval, err2 = p.handler.ListPaymentReceipt(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listPaymentReceipt: "+err2.Error())
		oprot.WriteMessageBegin("listPaymentReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("listPaymentReceipt", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorGetPaymentReceipt struct {
	handler Bank
}

func (p *bankProcessorGetPaymentReceipt) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankGetPaymentReceiptArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getPaymentReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankGetPaymentReceiptResult{}
	var retval *PaymentReceiptData
	if retval, err2 = p.handler.GetPaymentReceipt(ctx, args.Id); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getPaymentReceipt: "+err2.Error())
		oprot.WriteMessageBegin("getPaymentReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getPaymentReceipt", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorSimpleGetPaymentReceipt struct {
	handler Bank
}

func (p *bankProcessorSimpleGetPaymentReceipt) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankSimpleGetPaymentReceiptArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("simpleGetPaymentReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankSimpleGetPaymentReceiptResult{}
	var retval *PaymentReceiptData
	if retval, err2 = p.handler.SimpleGetPaymentReceipt(ctx, args.Id); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing simpleGetPaymentReceipt: "+err2.Error())
		oprot.WriteMessageBegin("simpleGetPaymentReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("simpleGetPaymentReceipt", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorSimpleGetPaymentReceiptByProcessInstanceId struct {
	handler Bank
}

func (p *bankProcessorSimpleGetPaymentReceiptByProcessInstanceId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankSimpleGetPaymentReceiptByProcessInstanceIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("simpleGetPaymentReceiptByProcessInstanceId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankSimpleGetPaymentReceiptByProcessInstanceIdResult{}
	var retval *PaymentReceiptData
	if retval, err2 = p.handler.SimpleGetPaymentReceiptByProcessInstanceId(ctx, args.Id); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing simpleGetPaymentReceiptByProcessInstanceId: "+err2.Error())
		oprot.WriteMessageBegin("simpleGetPaymentReceiptByProcessInstanceId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("simpleGetPaymentReceiptByProcessInstanceId", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorAddPaymentReceipt struct {
	handler Bank
}

func (p *bankProcessorAddPaymentReceipt) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankAddPaymentReceiptArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addPaymentReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankAddPaymentReceiptResult{}
	if err2 = p.handler.AddPaymentReceipt(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addPaymentReceipt: "+err2.Error())
		oprot.WriteMessageBegin("addPaymentReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("addPaymentReceipt", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorApprovePaymentReceipt struct {
	handler Bank
}

func (p *bankProcessorApprovePaymentReceipt) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankApprovePaymentReceiptArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("approvePaymentReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankApprovePaymentReceiptResult{}
	if err2 = p.handler.ApprovePaymentReceipt(ctx, args.Id, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing approvePaymentReceipt: "+err2.Error())
		oprot.WriteMessageBegin("approvePaymentReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("approvePaymentReceipt", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorRefusePaymentReceipt struct {
	handler Bank
}

func (p *bankProcessorRefusePaymentReceipt) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankRefusePaymentReceiptArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("refusePaymentReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankRefusePaymentReceiptResult{}
	if err2 = p.handler.RefusePaymentReceipt(ctx, args.Id, args.Req, args.Remark); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing refusePaymentReceipt: "+err2.Error())
		oprot.WriteMessageBegin("refusePaymentReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("refusePaymentReceipt", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorPaymentReceiptRun struct {
	handler Bank
}

func (p *bankProcessorPaymentReceiptRun) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankPaymentReceiptRunArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("paymentReceiptRun", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankPaymentReceiptRunResult{}
	if err2 = p.handler.PaymentReceiptRun(ctx, args.Id); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing paymentReceiptRun: "+err2.Error())
		oprot.WriteMessageBegin("paymentReceiptRun", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("paymentReceiptRun", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorTransmitPaymentReceipt struct {
	handler Bank
}

func (p *bankProcessorTransmitPaymentReceipt) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankTransmitPaymentReceiptArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("transmitPaymentReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankTransmitPaymentReceiptResult{}
	if err2 = p.handler.TransmitPaymentReceipt(ctx, args.ProcessInstanceId, args.TransmitUserId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing transmitPaymentReceipt: "+err2.Error())
		oprot.WriteMessageBegin("transmitPaymentReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("transmitPaymentReceipt", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorSendBackPaymentApplication struct {
	handler Bank
}

func (p *bankProcessorSendBackPaymentApplication) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankSendBackPaymentApplicationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("sendBackPaymentApplication", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankSendBackPaymentApplicationResult{}
	if err2 = p.handler.SendBackPaymentApplication(ctx, args.Id, args.Req, args.Remark); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendBackPaymentApplication: "+err2.Error())
		oprot.WriteMessageBegin("sendBackPaymentApplication", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("sendBackPaymentApplication", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorWithDrawPaymentReceipt struct {
	handler Bank
}

func (p *bankProcessorWithDrawPaymentReceipt) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankWithDrawPaymentReceiptArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("withDrawPaymentReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankWithDrawPaymentReceiptResult{}
	if err2 = p.handler.WithDrawPaymentReceipt(ctx, args.Id, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing withDrawPaymentReceipt: "+err2.Error())
		oprot.WriteMessageBegin("withDrawPaymentReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("withDrawPaymentReceipt", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorCommentPaymentReceipt struct {
	handler Bank
}

func (p *bankProcessorCommentPaymentReceipt) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankCommentPaymentReceiptArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("commentPaymentReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankCommentPaymentReceiptResult{}
	if err2 = p.handler.CommentPaymentReceipt(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing commentPaymentReceipt: "+err2.Error())
		oprot.WriteMessageBegin("commentPaymentReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("commentPaymentReceipt", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorAddTagPaymentReceipt struct {
	handler Bank
}

func (p *bankProcessorAddTagPaymentReceipt) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankAddTagPaymentReceiptArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addTagPaymentReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankAddTagPaymentReceiptResult{}
	if err2 = p.handler.AddTagPaymentReceipt(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addTagPaymentReceipt: "+err2.Error())
		oprot.WriteMessageBegin("addTagPaymentReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("addTagPaymentReceipt", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorHandleSyncPaymentReceipt struct {
	handler Bank
}

func (p *bankProcessorHandleSyncPaymentReceipt) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankHandleSyncPaymentReceiptArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("handleSyncPaymentReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankHandleSyncPaymentReceiptResult{}
	if err2 = p.handler.HandleSyncPaymentReceipt(ctx, args.BeginDate, args.EndDate, args.OrganizationId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing handleSyncPaymentReceipt: "+err2.Error())
		oprot.WriteMessageBegin("handleSyncPaymentReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("handleSyncPaymentReceipt", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorSyncPaymentReceipt struct {
	handler Bank
}

func (p *bankProcessorSyncPaymentReceipt) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankSyncPaymentReceiptArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("syncPaymentReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankSyncPaymentReceiptResult{}
	if err2 = p.handler.SyncPaymentReceipt(ctx, args.TaskId, args.Param, args.OrganizationId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing syncPaymentReceipt: "+err2.Error())
		oprot.WriteMessageBegin("syncPaymentReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("syncPaymentReceipt", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorPinganBankAccountSignatureApply struct {
	handler Bank
}

func (p *bankProcessorPinganBankAccountSignatureApply) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankPinganBankAccountSignatureApplyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("pinganBankAccountSignatureApply", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankPinganBankAccountSignatureApplyResult{}
	var retval *PinganUserAcctSignatureApplyResponse
	if retval, err2 = p.handler.PinganBankAccountSignatureApply(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing pinganBankAccountSignatureApply: "+err2.Error())
		oprot.WriteMessageBegin("pinganBankAccountSignatureApply", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("pinganBankAccountSignatureApply", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorPinganBankAccountSignatureQuery struct {
	handler Bank
}

func (p *bankProcessorPinganBankAccountSignatureQuery) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankPinganBankAccountSignatureQueryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("pinganBankAccountSignatureQuery", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankPinganBankAccountSignatureQueryResult{}
	var retval *PinganUserAcctSignatureApplyResponse
	if retval, err2 = p.handler.PinganBankAccountSignatureQuery(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing pinganBankAccountSignatureQuery: "+err2.Error())
		oprot.WriteMessageBegin("pinganBankAccountSignatureQuery", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("pinganBankAccountSignatureQuery", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorSystemRefusePaymentReceipt struct {
	handler Bank
}

func (p *bankProcessorSystemRefusePaymentReceipt) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankSystemRefusePaymentReceiptArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("systemRefusePaymentReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankSystemRefusePaymentReceiptResult{}
	if err2 = p.handler.SystemRefusePaymentReceipt(ctx, args.Id); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing systemRefusePaymentReceipt: "+err2.Error())
		oprot.WriteMessageBegin("systemRefusePaymentReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("systemRefusePaymentReceipt", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bankProcessorSystemApprovePaymentReceipt struct {
	handler Bank
}

func (p *bankProcessorSystemApprovePaymentReceipt) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BankSystemApprovePaymentReceiptArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("systemApprovePaymentReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BankSystemApprovePaymentReceiptResult{}
	if err2 = p.handler.SystemApprovePaymentReceipt(ctx, args.Id); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing systemApprovePaymentReceipt: "+err2.Error())
		oprot.WriteMessageBegin("systemApprovePaymentReceipt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("systemApprovePaymentReceipt", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type BankListBankTransferReceiptArgs struct {
	Req *ListBankTransferReceiptRequest `thrift:"req,1" frugal:"1,default,ListBankTransferReceiptRequest" json:"req"`
}

func NewBankListBankTransferReceiptArgs() *BankListBankTransferReceiptArgs {
	return &BankListBankTransferReceiptArgs{}
}

func (p *BankListBankTransferReceiptArgs) InitDefault() {
	*p = BankListBankTransferReceiptArgs{}
}

var BankListBankTransferReceiptArgs_Req_DEFAULT *ListBankTransferReceiptRequest

func (p *BankListBankTransferReceiptArgs) GetReq() (v *ListBankTransferReceiptRequest) {
	if !p.IsSetReq() {
		return BankListBankTransferReceiptArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BankListBankTransferReceiptArgs) SetReq(val *ListBankTransferReceiptRequest) {
	p.Req = val
}

var fieldIDToName_BankListBankTransferReceiptArgs = map[int16]string{
	1: "req",
}

func (p *BankListBankTransferReceiptArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BankListBankTransferReceiptArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankListBankTransferReceiptArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankListBankTransferReceiptArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewListBankTransferReceiptRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankListBankTransferReceiptArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("listBankTransferReceipt_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankListBankTransferReceiptArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankListBankTransferReceiptArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankListBankTransferReceiptArgs(%+v)", *p)
}

func (p *BankListBankTransferReceiptArgs) DeepEqual(ano *BankListBankTransferReceiptArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BankListBankTransferReceiptArgs) Field1DeepEqual(src *ListBankTransferReceiptRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BankListBankTransferReceiptResult struct {
	Success *ListBankTransferReceiptResponse `thrift:"success,0,optional" frugal:"0,optional,ListBankTransferReceiptResponse" json:"success,omitempty"`
}

func NewBankListBankTransferReceiptResult() *BankListBankTransferReceiptResult {
	return &BankListBankTransferReceiptResult{}
}

func (p *BankListBankTransferReceiptResult) InitDefault() {
	*p = BankListBankTransferReceiptResult{}
}

var BankListBankTransferReceiptResult_Success_DEFAULT *ListBankTransferReceiptResponse

func (p *BankListBankTransferReceiptResult) GetSuccess() (v *ListBankTransferReceiptResponse) {
	if !p.IsSetSuccess() {
		return BankListBankTransferReceiptResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BankListBankTransferReceiptResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListBankTransferReceiptResponse)
}

var fieldIDToName_BankListBankTransferReceiptResult = map[int16]string{
	0: "success",
}

func (p *BankListBankTransferReceiptResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BankListBankTransferReceiptResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankListBankTransferReceiptResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankListBankTransferReceiptResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewListBankTransferReceiptResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankListBankTransferReceiptResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("listBankTransferReceipt_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankListBankTransferReceiptResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BankListBankTransferReceiptResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankListBankTransferReceiptResult(%+v)", *p)
}

func (p *BankListBankTransferReceiptResult) DeepEqual(ano *BankListBankTransferReceiptResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BankListBankTransferReceiptResult) Field0DeepEqual(src *ListBankTransferReceiptResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BankGetBankTransferReceiptArgs struct {
	Req *BankTransferReceiptData `thrift:"req,1" frugal:"1,default,BankTransferReceiptData" json:"req"`
}

func NewBankGetBankTransferReceiptArgs() *BankGetBankTransferReceiptArgs {
	return &BankGetBankTransferReceiptArgs{}
}

func (p *BankGetBankTransferReceiptArgs) InitDefault() {
	*p = BankGetBankTransferReceiptArgs{}
}

var BankGetBankTransferReceiptArgs_Req_DEFAULT *BankTransferReceiptData

func (p *BankGetBankTransferReceiptArgs) GetReq() (v *BankTransferReceiptData) {
	if !p.IsSetReq() {
		return BankGetBankTransferReceiptArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BankGetBankTransferReceiptArgs) SetReq(val *BankTransferReceiptData) {
	p.Req = val
}

var fieldIDToName_BankGetBankTransferReceiptArgs = map[int16]string{
	1: "req",
}

func (p *BankGetBankTransferReceiptArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BankGetBankTransferReceiptArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankGetBankTransferReceiptArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankGetBankTransferReceiptArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewBankTransferReceiptData()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankGetBankTransferReceiptArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("getBankTransferReceipt_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankGetBankTransferReceiptArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankGetBankTransferReceiptArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankGetBankTransferReceiptArgs(%+v)", *p)
}

func (p *BankGetBankTransferReceiptArgs) DeepEqual(ano *BankGetBankTransferReceiptArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BankGetBankTransferReceiptArgs) Field1DeepEqual(src *BankTransferReceiptData) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BankGetBankTransferReceiptResult struct {
	Success *BankTransferReceiptData `thrift:"success,0,optional" frugal:"0,optional,BankTransferReceiptData" json:"success,omitempty"`
}

func NewBankGetBankTransferReceiptResult() *BankGetBankTransferReceiptResult {
	return &BankGetBankTransferReceiptResult{}
}

func (p *BankGetBankTransferReceiptResult) InitDefault() {
	*p = BankGetBankTransferReceiptResult{}
}

var BankGetBankTransferReceiptResult_Success_DEFAULT *BankTransferReceiptData

func (p *BankGetBankTransferReceiptResult) GetSuccess() (v *BankTransferReceiptData) {
	if !p.IsSetSuccess() {
		return BankGetBankTransferReceiptResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BankGetBankTransferReceiptResult) SetSuccess(x interface{}) {
	p.Success = x.(*BankTransferReceiptData)
}

var fieldIDToName_BankGetBankTransferReceiptResult = map[int16]string{
	0: "success",
}

func (p *BankGetBankTransferReceiptResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BankGetBankTransferReceiptResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankGetBankTransferReceiptResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankGetBankTransferReceiptResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewBankTransferReceiptData()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankGetBankTransferReceiptResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("getBankTransferReceipt_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankGetBankTransferReceiptResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BankGetBankTransferReceiptResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankGetBankTransferReceiptResult(%+v)", *p)
}

func (p *BankGetBankTransferReceiptResult) DeepEqual(ano *BankGetBankTransferReceiptResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BankGetBankTransferReceiptResult) Field0DeepEqual(src *BankTransferReceiptData) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BankAddBankTransferReceiptArgs struct {
	Req *BankTransferReceiptData `thrift:"req,1" frugal:"1,default,BankTransferReceiptData" json:"req"`
}

func NewBankAddBankTransferReceiptArgs() *BankAddBankTransferReceiptArgs {
	return &BankAddBankTransferReceiptArgs{}
}

func (p *BankAddBankTransferReceiptArgs) InitDefault() {
	*p = BankAddBankTransferReceiptArgs{}
}

var BankAddBankTransferReceiptArgs_Req_DEFAULT *BankTransferReceiptData

func (p *BankAddBankTransferReceiptArgs) GetReq() (v *BankTransferReceiptData) {
	if !p.IsSetReq() {
		return BankAddBankTransferReceiptArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BankAddBankTransferReceiptArgs) SetReq(val *BankTransferReceiptData) {
	p.Req = val
}

var fieldIDToName_BankAddBankTransferReceiptArgs = map[int16]string{
	1: "req",
}

func (p *BankAddBankTransferReceiptArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BankAddBankTransferReceiptArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankAddBankTransferReceiptArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankAddBankTransferReceiptArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewBankTransferReceiptData()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankAddBankTransferReceiptArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("addBankTransferReceipt_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankAddBankTransferReceiptArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankAddBankTransferReceiptArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankAddBankTransferReceiptArgs(%+v)", *p)
}

func (p *BankAddBankTransferReceiptArgs) DeepEqual(ano *BankAddBankTransferReceiptArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BankAddBankTransferReceiptArgs) Field1DeepEqual(src *BankTransferReceiptData) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BankAddBankTransferReceiptResult struct {
	Success *int64 `thrift:"success,0,optional" frugal:"0,optional,i64" json:"success,omitempty"`
}

func NewBankAddBankTransferReceiptResult() *BankAddBankTransferReceiptResult {
	return &BankAddBankTransferReceiptResult{}
}

func (p *BankAddBankTransferReceiptResult) InitDefault() {
	*p = BankAddBankTransferReceiptResult{}
}

var BankAddBankTransferReceiptResult_Success_DEFAULT int64

func (p *BankAddBankTransferReceiptResult) GetSuccess() (v int64) {
	if !p.IsSetSuccess() {
		return BankAddBankTransferReceiptResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *BankAddBankTransferReceiptResult) SetSuccess(x interface{}) {
	p.Success = x.(*int64)
}

var fieldIDToName_BankAddBankTransferReceiptResult = map[int16]string{
	0: "success",
}

func (p *BankAddBankTransferReceiptResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BankAddBankTransferReceiptResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankAddBankTransferReceiptResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankAddBankTransferReceiptResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Success = &v
	}
	return nil
}

func (p *BankAddBankTransferReceiptResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("addBankTransferReceipt_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankAddBankTransferReceiptResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Success); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BankAddBankTransferReceiptResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankAddBankTransferReceiptResult(%+v)", *p)
}

func (p *BankAddBankTransferReceiptResult) DeepEqual(ano *BankAddBankTransferReceiptResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BankAddBankTransferReceiptResult) Field0DeepEqual(src *int64) bool {

	if p.Success == src {
		return true
	} else if p.Success == nil || src == nil {
		return false
	}
	if *p.Success != *src {
		return false
	}
	return true
}

type BankEditBankTransferReceiptArgs struct {
	Req *BankTransferReceiptData `thrift:"req,1" frugal:"1,default,BankTransferReceiptData" json:"req"`
}

func NewBankEditBankTransferReceiptArgs() *BankEditBankTransferReceiptArgs {
	return &BankEditBankTransferReceiptArgs{}
}

func (p *BankEditBankTransferReceiptArgs) InitDefault() {
	*p = BankEditBankTransferReceiptArgs{}
}

var BankEditBankTransferReceiptArgs_Req_DEFAULT *BankTransferReceiptData

func (p *BankEditBankTransferReceiptArgs) GetReq() (v *BankTransferReceiptData) {
	if !p.IsSetReq() {
		return BankEditBankTransferReceiptArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BankEditBankTransferReceiptArgs) SetReq(val *BankTransferReceiptData) {
	p.Req = val
}

var fieldIDToName_BankEditBankTransferReceiptArgs = map[int16]string{
	1: "req",
}

func (p *BankEditBankTransferReceiptArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BankEditBankTransferReceiptArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankEditBankTransferReceiptArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankEditBankTransferReceiptArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewBankTransferReceiptData()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankEditBankTransferReceiptArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("editBankTransferReceipt_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankEditBankTransferReceiptArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankEditBankTransferReceiptArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankEditBankTransferReceiptArgs(%+v)", *p)
}

func (p *BankEditBankTransferReceiptArgs) DeepEqual(ano *BankEditBankTransferReceiptArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BankEditBankTransferReceiptArgs) Field1DeepEqual(src *BankTransferReceiptData) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BankEditBankTransferReceiptResult struct {
}

func NewBankEditBankTransferReceiptResult() *BankEditBankTransferReceiptResult {
	return &BankEditBankTransferReceiptResult{}
}

func (p *BankEditBankTransferReceiptResult) InitDefault() {
	*p = BankEditBankTransferReceiptResult{}
}

var fieldIDToName_BankEditBankTransferReceiptResult = map[int16]string{}

func (p *BankEditBankTransferReceiptResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankEditBankTransferReceiptResult) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("editBankTransferReceipt_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankEditBankTransferReceiptResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankEditBankTransferReceiptResult(%+v)", *p)
}

func (p *BankEditBankTransferReceiptResult) DeepEqual(ano *BankEditBankTransferReceiptResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type BankDeleteBankTransferReceiptArgs struct {
	Req int64 `thrift:"req,1" frugal:"1,default,i64" json:"req"`
}

func NewBankDeleteBankTransferReceiptArgs() *BankDeleteBankTransferReceiptArgs {
	return &BankDeleteBankTransferReceiptArgs{}
}

func (p *BankDeleteBankTransferReceiptArgs) InitDefault() {
	*p = BankDeleteBankTransferReceiptArgs{}
}

func (p *BankDeleteBankTransferReceiptArgs) GetReq() (v int64) {
	return p.Req
}
func (p *BankDeleteBankTransferReceiptArgs) SetReq(val int64) {
	p.Req = val
}

var fieldIDToName_BankDeleteBankTransferReceiptArgs = map[int16]string{
	1: "req",
}

func (p *BankDeleteBankTransferReceiptArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankDeleteBankTransferReceiptArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankDeleteBankTransferReceiptArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Req = v
	}
	return nil
}

func (p *BankDeleteBankTransferReceiptArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("deleteBankTransferReceipt_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankDeleteBankTransferReceiptArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Req); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankDeleteBankTransferReceiptArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankDeleteBankTransferReceiptArgs(%+v)", *p)
}

func (p *BankDeleteBankTransferReceiptArgs) DeepEqual(ano *BankDeleteBankTransferReceiptArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BankDeleteBankTransferReceiptArgs) Field1DeepEqual(src int64) bool {

	if p.Req != src {
		return false
	}
	return true
}

type BankDeleteBankTransferReceiptResult struct {
}

func NewBankDeleteBankTransferReceiptResult() *BankDeleteBankTransferReceiptResult {
	return &BankDeleteBankTransferReceiptResult{}
}

func (p *BankDeleteBankTransferReceiptResult) InitDefault() {
	*p = BankDeleteBankTransferReceiptResult{}
}

var fieldIDToName_BankDeleteBankTransferReceiptResult = map[int16]string{}

func (p *BankDeleteBankTransferReceiptResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankDeleteBankTransferReceiptResult) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("deleteBankTransferReceipt_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankDeleteBankTransferReceiptResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankDeleteBankTransferReceiptResult(%+v)", *p)
}

func (p *BankDeleteBankTransferReceiptResult) DeepEqual(ano *BankDeleteBankTransferReceiptResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type BankCountBankTransferReceiptArgs struct {
	Req *BankTransferReceiptData `thrift:"req,1" frugal:"1,default,BankTransferReceiptData" json:"req"`
}

func NewBankCountBankTransferReceiptArgs() *BankCountBankTransferReceiptArgs {
	return &BankCountBankTransferReceiptArgs{}
}

func (p *BankCountBankTransferReceiptArgs) InitDefault() {
	*p = BankCountBankTransferReceiptArgs{}
}

var BankCountBankTransferReceiptArgs_Req_DEFAULT *BankTransferReceiptData

func (p *BankCountBankTransferReceiptArgs) GetReq() (v *BankTransferReceiptData) {
	if !p.IsSetReq() {
		return BankCountBankTransferReceiptArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BankCountBankTransferReceiptArgs) SetReq(val *BankTransferReceiptData) {
	p.Req = val
}

var fieldIDToName_BankCountBankTransferReceiptArgs = map[int16]string{
	1: "req",
}

func (p *BankCountBankTransferReceiptArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BankCountBankTransferReceiptArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankCountBankTransferReceiptArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankCountBankTransferReceiptArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewBankTransferReceiptData()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankCountBankTransferReceiptArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("countBankTransferReceipt_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankCountBankTransferReceiptArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankCountBankTransferReceiptArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankCountBankTransferReceiptArgs(%+v)", *p)
}

func (p *BankCountBankTransferReceiptArgs) DeepEqual(ano *BankCountBankTransferReceiptArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BankCountBankTransferReceiptArgs) Field1DeepEqual(src *BankTransferReceiptData) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BankCountBankTransferReceiptResult struct {
	Success *int64 `thrift:"success,0,optional" frugal:"0,optional,i64" json:"success,omitempty"`
}

func NewBankCountBankTransferReceiptResult() *BankCountBankTransferReceiptResult {
	return &BankCountBankTransferReceiptResult{}
}

func (p *BankCountBankTransferReceiptResult) InitDefault() {
	*p = BankCountBankTransferReceiptResult{}
}

var BankCountBankTransferReceiptResult_Success_DEFAULT int64

func (p *BankCountBankTransferReceiptResult) GetSuccess() (v int64) {
	if !p.IsSetSuccess() {
		return BankCountBankTransferReceiptResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *BankCountBankTransferReceiptResult) SetSuccess(x interface{}) {
	p.Success = x.(*int64)
}

var fieldIDToName_BankCountBankTransferReceiptResult = map[int16]string{
	0: "success",
}

func (p *BankCountBankTransferReceiptResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BankCountBankTransferReceiptResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankCountBankTransferReceiptResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankCountBankTransferReceiptResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Success = &v
	}
	return nil
}

func (p *BankCountBankTransferReceiptResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("countBankTransferReceipt_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankCountBankTransferReceiptResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Success); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BankCountBankTransferReceiptResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankCountBankTransferReceiptResult(%+v)", *p)
}

func (p *BankCountBankTransferReceiptResult) DeepEqual(ano *BankCountBankTransferReceiptResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BankCountBankTransferReceiptResult) Field0DeepEqual(src *int64) bool {

	if p.Success == src {
		return true
	} else if p.Success == nil || src == nil {
		return false
	}
	if *p.Success != *src {
		return false
	}
	return true
}

type BankConfirmTransactionArgs struct {
	Req *BankTransferReceiptData `thrift:"req,1" frugal:"1,default,BankTransferReceiptData" json:"req"`
}

func NewBankConfirmTransactionArgs() *BankConfirmTransactionArgs {
	return &BankConfirmTransactionArgs{}
}

func (p *BankConfirmTransactionArgs) InitDefault() {
	*p = BankConfirmTransactionArgs{}
}

var BankConfirmTransactionArgs_Req_DEFAULT *BankTransferReceiptData

func (p *BankConfirmTransactionArgs) GetReq() (v *BankTransferReceiptData) {
	if !p.IsSetReq() {
		return BankConfirmTransactionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BankConfirmTransactionArgs) SetReq(val *BankTransferReceiptData) {
	p.Req = val
}

var fieldIDToName_BankConfirmTransactionArgs = map[int16]string{
	1: "req",
}

func (p *BankConfirmTransactionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BankConfirmTransactionArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankConfirmTransactionArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankConfirmTransactionArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewBankTransferReceiptData()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankConfirmTransactionArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("confirmTransaction_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankConfirmTransactionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankConfirmTransactionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankConfirmTransactionArgs(%+v)", *p)
}

func (p *BankConfirmTransactionArgs) DeepEqual(ano *BankConfirmTransactionArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BankConfirmTransactionArgs) Field1DeepEqual(src *BankTransferReceiptData) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BankConfirmTransactionResult struct {
}

func NewBankConfirmTransactionResult() *BankConfirmTransactionResult {
	return &BankConfirmTransactionResult{}
}

func (p *BankConfirmTransactionResult) InitDefault() {
	*p = BankConfirmTransactionResult{}
}

var fieldIDToName_BankConfirmTransactionResult = map[int16]string{}

func (p *BankConfirmTransactionResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankConfirmTransactionResult) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("confirmTransaction_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankConfirmTransactionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankConfirmTransactionResult(%+v)", *p)
}

func (p *BankConfirmTransactionResult) DeepEqual(ano *BankConfirmTransactionResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type BankHandleTransferReceiptResultArgs struct {
	Id int64 `thrift:"id,1" frugal:"1,default,i64" json:"id"`
}

func NewBankHandleTransferReceiptResultArgs() *BankHandleTransferReceiptResultArgs {
	return &BankHandleTransferReceiptResultArgs{}
}

func (p *BankHandleTransferReceiptResultArgs) InitDefault() {
	*p = BankHandleTransferReceiptResultArgs{}
}

func (p *BankHandleTransferReceiptResultArgs) GetId() (v int64) {
	return p.Id
}
func (p *BankHandleTransferReceiptResultArgs) SetId(val int64) {
	p.Id = val
}

var fieldIDToName_BankHandleTransferReceiptResultArgs = map[int16]string{
	1: "id",
}

func (p *BankHandleTransferReceiptResultArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankHandleTransferReceiptResultArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankHandleTransferReceiptResultArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *BankHandleTransferReceiptResultArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("handleTransferReceiptResult_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankHandleTransferReceiptResultArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankHandleTransferReceiptResultArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankHandleTransferReceiptResultArgs(%+v)", *p)
}

func (p *BankHandleTransferReceiptResultArgs) DeepEqual(ano *BankHandleTransferReceiptResultArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *BankHandleTransferReceiptResultArgs) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}

type BankHandleTransferReceiptResultResult struct {
}

func NewBankHandleTransferReceiptResultResult() *BankHandleTransferReceiptResultResult {
	return &BankHandleTransferReceiptResultResult{}
}

func (p *BankHandleTransferReceiptResultResult) InitDefault() {
	*p = BankHandleTransferReceiptResultResult{}
}

var fieldIDToName_BankHandleTransferReceiptResultResult = map[int16]string{}

func (p *BankHandleTransferReceiptResultResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankHandleTransferReceiptResultResult) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("handleTransferReceiptResult_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankHandleTransferReceiptResultResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankHandleTransferReceiptResultResult(%+v)", *p)
}

func (p *BankHandleTransferReceiptResultResult) DeepEqual(ano *BankHandleTransferReceiptResultResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type BankListBankTransactionDetailArgs struct {
	Req *ListBankTransactionDetailRequest `thrift:"req,1" frugal:"1,default,ListBankTransactionDetailRequest" json:"req"`
}

func NewBankListBankTransactionDetailArgs() *BankListBankTransactionDetailArgs {
	return &BankListBankTransactionDetailArgs{}
}

func (p *BankListBankTransactionDetailArgs) InitDefault() {
	*p = BankListBankTransactionDetailArgs{}
}

var BankListBankTransactionDetailArgs_Req_DEFAULT *ListBankTransactionDetailRequest

func (p *BankListBankTransactionDetailArgs) GetReq() (v *ListBankTransactionDetailRequest) {
	if !p.IsSetReq() {
		return BankListBankTransactionDetailArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BankListBankTransactionDetailArgs) SetReq(val *ListBankTransactionDetailRequest) {
	p.Req = val
}

var fieldIDToName_BankListBankTransactionDetailArgs = map[int16]string{
	1: "req",
}

func (p *BankListBankTransactionDetailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BankListBankTransactionDetailArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankListBankTransactionDetailArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankListBankTransactionDetailArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewListBankTransactionDetailRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankListBankTransactionDetailArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("listBankTransactionDetail_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankListBankTransactionDetailArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankListBankTransactionDetailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankListBankTransactionDetailArgs(%+v)", *p)
}

func (p *BankListBankTransactionDetailArgs) DeepEqual(ano *BankListBankTransactionDetailArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BankListBankTransactionDetailArgs) Field1DeepEqual(src *ListBankTransactionDetailRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BankListBankTransactionDetailResult struct {
	Success *ListBankTransactionDetailResponse `thrift:"success,0,optional" frugal:"0,optional,ListBankTransactionDetailResponse" json:"success,omitempty"`
}

func NewBankListBankTransactionDetailResult() *BankListBankTransactionDetailResult {
	return &BankListBankTransactionDetailResult{}
}

func (p *BankListBankTransactionDetailResult) InitDefault() {
	*p = BankListBankTransactionDetailResult{}
}

var BankListBankTransactionDetailResult_Success_DEFAULT *ListBankTransactionDetailResponse

func (p *BankListBankTransactionDetailResult) GetSuccess() (v *ListBankTransactionDetailResponse) {
	if !p.IsSetSuccess() {
		return BankListBankTransactionDetailResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BankListBankTransactionDetailResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListBankTransactionDetailResponse)
}

var fieldIDToName_BankListBankTransactionDetailResult = map[int16]string{
	0: "success",
}

func (p *BankListBankTransactionDetailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BankListBankTransactionDetailResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankListBankTransactionDetailResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankListBankTransactionDetailResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewListBankTransactionDetailResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankListBankTransactionDetailResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("listBankTransactionDetail_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankListBankTransactionDetailResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BankListBankTransactionDetailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankListBankTransactionDetailResult(%+v)", *p)
}

func (p *BankListBankTransactionDetailResult) DeepEqual(ano *BankListBankTransactionDetailResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BankListBankTransactionDetailResult) Field0DeepEqual(src *ListBankTransactionDetailResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BankSimpleListBankTransactionDetailArgs struct {
	Req *ListBankTransactionDetailRequest `thrift:"req,1" frugal:"1,default,ListBankTransactionDetailRequest" json:"req"`
}

func NewBankSimpleListBankTransactionDetailArgs() *BankSimpleListBankTransactionDetailArgs {
	return &BankSimpleListBankTransactionDetailArgs{}
}

func (p *BankSimpleListBankTransactionDetailArgs) InitDefault() {
	*p = BankSimpleListBankTransactionDetailArgs{}
}

var BankSimpleListBankTransactionDetailArgs_Req_DEFAULT *ListBankTransactionDetailRequest

func (p *BankSimpleListBankTransactionDetailArgs) GetReq() (v *ListBankTransactionDetailRequest) {
	if !p.IsSetReq() {
		return BankSimpleListBankTransactionDetailArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BankSimpleListBankTransactionDetailArgs) SetReq(val *ListBankTransactionDetailRequest) {
	p.Req = val
}

var fieldIDToName_BankSimpleListBankTransactionDetailArgs = map[int16]string{
	1: "req",
}

func (p *BankSimpleListBankTransactionDetailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BankSimpleListBankTransactionDetailArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankSimpleListBankTransactionDetailArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankSimpleListBankTransactionDetailArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewListBankTransactionDetailRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankSimpleListBankTransactionDetailArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("simpleListBankTransactionDetail_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankSimpleListBankTransactionDetailArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankSimpleListBankTransactionDetailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankSimpleListBankTransactionDetailArgs(%+v)", *p)
}

func (p *BankSimpleListBankTransactionDetailArgs) DeepEqual(ano *BankSimpleListBankTransactionDetailArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BankSimpleListBankTransactionDetailArgs) Field1DeepEqual(src *ListBankTransactionDetailRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BankSimpleListBankTransactionDetailResult struct {
	Success *ListBankTransactionDetailResponse `thrift:"success,0,optional" frugal:"0,optional,ListBankTransactionDetailResponse" json:"success,omitempty"`
}

func NewBankSimpleListBankTransactionDetailResult() *BankSimpleListBankTransactionDetailResult {
	return &BankSimpleListBankTransactionDetailResult{}
}

func (p *BankSimpleListBankTransactionDetailResult) InitDefault() {
	*p = BankSimpleListBankTransactionDetailResult{}
}

var BankSimpleListBankTransactionDetailResult_Success_DEFAULT *ListBankTransactionDetailResponse

func (p *BankSimpleListBankTransactionDetailResult) GetSuccess() (v *ListBankTransactionDetailResponse) {
	if !p.IsSetSuccess() {
		return BankSimpleListBankTransactionDetailResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BankSimpleListBankTransactionDetailResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListBankTransactionDetailResponse)
}

var fieldIDToName_BankSimpleListBankTransactionDetailResult = map[int16]string{
	0: "success",
}

func (p *BankSimpleListBankTransactionDetailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BankSimpleListBankTransactionDetailResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankSimpleListBankTransactionDetailResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankSimpleListBankTransactionDetailResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewListBankTransactionDetailResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankSimpleListBankTransactionDetailResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("simpleListBankTransactionDetail_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankSimpleListBankTransactionDetailResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BankSimpleListBankTransactionDetailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankSimpleListBankTransactionDetailResult(%+v)", *p)
}

func (p *BankSimpleListBankTransactionDetailResult) DeepEqual(ano *BankSimpleListBankTransactionDetailResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BankSimpleListBankTransactionDetailResult) Field0DeepEqual(src *ListBankTransactionDetailResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BankGetBankTransactionDetailArgs struct {
	Req *BankTransactionDetailData `thrift:"req,1" frugal:"1,default,BankTransactionDetailData" json:"req"`
}

func NewBankGetBankTransactionDetailArgs() *BankGetBankTransactionDetailArgs {
	return &BankGetBankTransactionDetailArgs{}
}

func (p *BankGetBankTransactionDetailArgs) InitDefault() {
	*p = BankGetBankTransactionDetailArgs{}
}

var BankGetBankTransactionDetailArgs_Req_DEFAULT *BankTransactionDetailData

func (p *BankGetBankTransactionDetailArgs) GetReq() (v *BankTransactionDetailData) {
	if !p.IsSetReq() {
		return BankGetBankTransactionDetailArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BankGetBankTransactionDetailArgs) SetReq(val *BankTransactionDetailData) {
	p.Req = val
}

var fieldIDToName_BankGetBankTransactionDetailArgs = map[int16]string{
	1: "req",
}

func (p *BankGetBankTransactionDetailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BankGetBankTransactionDetailArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankGetBankTransactionDetailArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankGetBankTransactionDetailArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewBankTransactionDetailData()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankGetBankTransactionDetailArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("getBankTransactionDetail_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankGetBankTransactionDetailArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankGetBankTransactionDetailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankGetBankTransactionDetailArgs(%+v)", *p)
}

func (p *BankGetBankTransactionDetailArgs) DeepEqual(ano *BankGetBankTransactionDetailArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BankGetBankTransactionDetailArgs) Field1DeepEqual(src *BankTransactionDetailData) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BankGetBankTransactionDetailResult struct {
	Success *BankTransactionDetailData `thrift:"success,0,optional" frugal:"0,optional,BankTransactionDetailData" json:"success,omitempty"`
}

func NewBankGetBankTransactionDetailResult() *BankGetBankTransactionDetailResult {
	return &BankGetBankTransactionDetailResult{}
}

func (p *BankGetBankTransactionDetailResult) InitDefault() {
	*p = BankGetBankTransactionDetailResult{}
}

var BankGetBankTransactionDetailResult_Success_DEFAULT *BankTransactionDetailData

func (p *BankGetBankTransactionDetailResult) GetSuccess() (v *BankTransactionDetailData) {
	if !p.IsSetSuccess() {
		return BankGetBankTransactionDetailResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BankGetBankTransactionDetailResult) SetSuccess(x interface{}) {
	p.Success = x.(*BankTransactionDetailData)
}

var fieldIDToName_BankGetBankTransactionDetailResult = map[int16]string{
	0: "success",
}

func (p *BankGetBankTransactionDetailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BankGetBankTransactionDetailResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankGetBankTransactionDetailResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankGetBankTransactionDetailResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewBankTransactionDetailData()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankGetBankTransactionDetailResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("getBankTransactionDetail_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankGetBankTransactionDetailResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BankGetBankTransactionDetailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankGetBankTransactionDetailResult(%+v)", *p)
}

func (p *BankGetBankTransactionDetailResult) DeepEqual(ano *BankGetBankTransactionDetailResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BankGetBankTransactionDetailResult) Field0DeepEqual(src *BankTransactionDetailData) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BankSimpleGetBankTransactionDetailArgs struct {
	Req *BankTransactionDetailData `thrift:"req,1" frugal:"1,default,BankTransactionDetailData" json:"req"`
}

func NewBankSimpleGetBankTransactionDetailArgs() *BankSimpleGetBankTransactionDetailArgs {
	return &BankSimpleGetBankTransactionDetailArgs{}
}

func (p *BankSimpleGetBankTransactionDetailArgs) InitDefault() {
	*p = BankSimpleGetBankTransactionDetailArgs{}
}

var BankSimpleGetBankTransactionDetailArgs_Req_DEFAULT *BankTransactionDetailData

func (p *BankSimpleGetBankTransactionDetailArgs) GetReq() (v *BankTransactionDetailData) {
	if !p.IsSetReq() {
		return BankSimpleGetBankTransactionDetailArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BankSimpleGetBankTransactionDetailArgs) SetReq(val *BankTransactionDetailData) {
	p.Req = val
}

var fieldIDToName_BankSimpleGetBankTransactionDetailArgs = map[int16]string{
	1: "req",
}

func (p *BankSimpleGetBankTransactionDetailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BankSimpleGetBankTransactionDetailArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankSimpleGetBankTransactionDetailArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankSimpleGetBankTransactionDetailArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewBankTransactionDetailData()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankSimpleGetBankTransactionDetailArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("simpleGetBankTransactionDetail_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankSimpleGetBankTransactionDetailArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankSimpleGetBankTransactionDetailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankSimpleGetBankTransactionDetailArgs(%+v)", *p)
}

func (p *BankSimpleGetBankTransactionDetailArgs) DeepEqual(ano *BankSimpleGetBankTransactionDetailArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BankSimpleGetBankTransactionDetailArgs) Field1DeepEqual(src *BankTransactionDetailData) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BankSimpleGetBankTransactionDetailResult struct {
	Success *BankTransactionDetailData `thrift:"success,0,optional" frugal:"0,optional,BankTransactionDetailData" json:"success,omitempty"`
}

func NewBankSimpleGetBankTransactionDetailResult() *BankSimpleGetBankTransactionDetailResult {
	return &BankSimpleGetBankTransactionDetailResult{}
}

func (p *BankSimpleGetBankTransactionDetailResult) InitDefault() {
	*p = BankSimpleGetBankTransactionDetailResult{}
}

var BankSimpleGetBankTransactionDetailResult_Success_DEFAULT *BankTransactionDetailData

func (p *BankSimpleGetBankTransactionDetailResult) GetSuccess() (v *BankTransactionDetailData) {
	if !p.IsSetSuccess() {
		return BankSimpleGetBankTransactionDetailResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BankSimpleGetBankTransactionDetailResult) SetSuccess(x interface{}) {
	p.Success = x.(*BankTransactionDetailData)
}

var fieldIDToName_BankSimpleGetBankTransactionDetailResult = map[int16]string{
	0: "success",
}

func (p *BankSimpleGetBankTransactionDetailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BankSimpleGetBankTransactionDetailResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankSimpleGetBankTransactionDetailResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankSimpleGetBankTransactionDetailResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewBankTransactionDetailData()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankSimpleGetBankTransactionDetailResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("simpleGetBankTransactionDetail_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankSimpleGetBankTransactionDetailResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BankSimpleGetBankTransactionDetailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankSimpleGetBankTransactionDetailResult(%+v)", *p)
}

func (p *BankSimpleGetBankTransactionDetailResult) DeepEqual(ano *BankSimpleGetBankTransactionDetailResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BankSimpleGetBankTransactionDetailResult) Field0DeepEqual(src *BankTransactionDetailData) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BankHandleTransactionDetailArgs struct {
	BeginDate      string `thrift:"beginDate,1" frugal:"1,default,string" json:"beginDate"`
	EndDate        string `thrift:"endDate,2" frugal:"2,default,string" json:"endDate"`
	OrganizationId int64  `thrift:"organizationId,3" frugal:"3,default,i64" json:"organizationId"`
}

func NewBankHandleTransactionDetailArgs() *BankHandleTransactionDetailArgs {
	return &BankHandleTransactionDetailArgs{}
}

func (p *BankHandleTransactionDetailArgs) InitDefault() {
	*p = BankHandleTransactionDetailArgs{}
}

func (p *BankHandleTransactionDetailArgs) GetBeginDate() (v string) {
	return p.BeginDate
}

func (p *BankHandleTransactionDetailArgs) GetEndDate() (v string) {
	return p.EndDate
}

func (p *BankHandleTransactionDetailArgs) GetOrganizationId() (v int64) {
	return p.OrganizationId
}
func (p *BankHandleTransactionDetailArgs) SetBeginDate(val string) {
	p.BeginDate = val
}
func (p *BankHandleTransactionDetailArgs) SetEndDate(val string) {
	p.EndDate = val
}
func (p *BankHandleTransactionDetailArgs) SetOrganizationId(val int64) {
	p.OrganizationId = val
}

var fieldIDToName_BankHandleTransactionDetailArgs = map[int16]string{
	1: "beginDate",
	2: "endDate",
	3: "organizationId",
}

func (p *BankHandleTransactionDetailArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankHandleTransactionDetailArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankHandleTransactionDetailArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.BeginDate = v
	}
	return nil
}

func (p *BankHandleTransactionDetailArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.EndDate = v
	}
	return nil
}

func (p *BankHandleTransactionDetailArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.OrganizationId = v
	}
	return nil
}

func (p *BankHandleTransactionDetailArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("handleTransactionDetail_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankHandleTransactionDetailArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("beginDate", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.BeginDate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankHandleTransactionDetailArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("endDate", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.EndDate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BankHandleTransactionDetailArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("organizationId", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.OrganizationId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *BankHandleTransactionDetailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankHandleTransactionDetailArgs(%+v)", *p)
}

func (p *BankHandleTransactionDetailArgs) DeepEqual(ano *BankHandleTransactionDetailArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BeginDate) {
		return false
	}
	if !p.Field2DeepEqual(ano.EndDate) {
		return false
	}
	if !p.Field3DeepEqual(ano.OrganizationId) {
		return false
	}
	return true
}

func (p *BankHandleTransactionDetailArgs) Field1DeepEqual(src string) bool {

	if strings.Compare(p.BeginDate, src) != 0 {
		return false
	}
	return true
}
func (p *BankHandleTransactionDetailArgs) Field2DeepEqual(src string) bool {

	if strings.Compare(p.EndDate, src) != 0 {
		return false
	}
	return true
}
func (p *BankHandleTransactionDetailArgs) Field3DeepEqual(src int64) bool {

	if p.OrganizationId != src {
		return false
	}
	return true
}

type BankHandleTransactionDetailResult struct {
}

func NewBankHandleTransactionDetailResult() *BankHandleTransactionDetailResult {
	return &BankHandleTransactionDetailResult{}
}

func (p *BankHandleTransactionDetailResult) InitDefault() {
	*p = BankHandleTransactionDetailResult{}
}

var fieldIDToName_BankHandleTransactionDetailResult = map[int16]string{}

func (p *BankHandleTransactionDetailResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankHandleTransactionDetailResult) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("handleTransactionDetail_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankHandleTransactionDetailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankHandleTransactionDetailResult(%+v)", *p)
}

func (p *BankHandleTransactionDetailResult) DeepEqual(ano *BankHandleTransactionDetailResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type BankCreateTransactionDetailProcessInstanceArgs struct {
	Id int64 `thrift:"id,1" frugal:"1,default,i64" json:"id"`
}

func NewBankCreateTransactionDetailProcessInstanceArgs() *BankCreateTransactionDetailProcessInstanceArgs {
	return &BankCreateTransactionDetailProcessInstanceArgs{}
}

func (p *BankCreateTransactionDetailProcessInstanceArgs) InitDefault() {
	*p = BankCreateTransactionDetailProcessInstanceArgs{}
}

func (p *BankCreateTransactionDetailProcessInstanceArgs) GetId() (v int64) {
	return p.Id
}
func (p *BankCreateTransactionDetailProcessInstanceArgs) SetId(val int64) {
	p.Id = val
}

var fieldIDToName_BankCreateTransactionDetailProcessInstanceArgs = map[int16]string{
	1: "id",
}

func (p *BankCreateTransactionDetailProcessInstanceArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankCreateTransactionDetailProcessInstanceArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankCreateTransactionDetailProcessInstanceArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *BankCreateTransactionDetailProcessInstanceArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("createTransactionDetailProcessInstance_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankCreateTransactionDetailProcessInstanceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankCreateTransactionDetailProcessInstanceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankCreateTransactionDetailProcessInstanceArgs(%+v)", *p)
}

func (p *BankCreateTransactionDetailProcessInstanceArgs) DeepEqual(ano *BankCreateTransactionDetailProcessInstanceArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *BankCreateTransactionDetailProcessInstanceArgs) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}

type BankCreateTransactionDetailProcessInstanceResult struct {
}

func NewBankCreateTransactionDetailProcessInstanceResult() *BankCreateTransactionDetailProcessInstanceResult {
	return &BankCreateTransactionDetailProcessInstanceResult{}
}

func (p *BankCreateTransactionDetailProcessInstanceResult) InitDefault() {
	*p = BankCreateTransactionDetailProcessInstanceResult{}
}

var fieldIDToName_BankCreateTransactionDetailProcessInstanceResult = map[int16]string{}

func (p *BankCreateTransactionDetailProcessInstanceResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankCreateTransactionDetailProcessInstanceResult) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("createTransactionDetailProcessInstance_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankCreateTransactionDetailProcessInstanceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankCreateTransactionDetailProcessInstanceResult(%+v)", *p)
}

func (p *BankCreateTransactionDetailProcessInstanceResult) DeepEqual(ano *BankCreateTransactionDetailProcessInstanceResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type BankEditBankTransactionDetailExtFieldArgs struct {
	Req *BankTransactionDetailData `thrift:"req,1" frugal:"1,default,BankTransactionDetailData" json:"req"`
}

func NewBankEditBankTransactionDetailExtFieldArgs() *BankEditBankTransactionDetailExtFieldArgs {
	return &BankEditBankTransactionDetailExtFieldArgs{}
}

func (p *BankEditBankTransactionDetailExtFieldArgs) InitDefault() {
	*p = BankEditBankTransactionDetailExtFieldArgs{}
}

var BankEditBankTransactionDetailExtFieldArgs_Req_DEFAULT *BankTransactionDetailData

func (p *BankEditBankTransactionDetailExtFieldArgs) GetReq() (v *BankTransactionDetailData) {
	if !p.IsSetReq() {
		return BankEditBankTransactionDetailExtFieldArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BankEditBankTransactionDetailExtFieldArgs) SetReq(val *BankTransactionDetailData) {
	p.Req = val
}

var fieldIDToName_BankEditBankTransactionDetailExtFieldArgs = map[int16]string{
	1: "req",
}

func (p *BankEditBankTransactionDetailExtFieldArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BankEditBankTransactionDetailExtFieldArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankEditBankTransactionDetailExtFieldArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankEditBankTransactionDetailExtFieldArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewBankTransactionDetailData()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankEditBankTransactionDetailExtFieldArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EditBankTransactionDetailExtField_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankEditBankTransactionDetailExtFieldArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankEditBankTransactionDetailExtFieldArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankEditBankTransactionDetailExtFieldArgs(%+v)", *p)
}

func (p *BankEditBankTransactionDetailExtFieldArgs) DeepEqual(ano *BankEditBankTransactionDetailExtFieldArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BankEditBankTransactionDetailExtFieldArgs) Field1DeepEqual(src *BankTransactionDetailData) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BankEditBankTransactionDetailExtFieldResult struct {
}

func NewBankEditBankTransactionDetailExtFieldResult() *BankEditBankTransactionDetailExtFieldResult {
	return &BankEditBankTransactionDetailExtFieldResult{}
}

func (p *BankEditBankTransactionDetailExtFieldResult) InitDefault() {
	*p = BankEditBankTransactionDetailExtFieldResult{}
}

var fieldIDToName_BankEditBankTransactionDetailExtFieldResult = map[int16]string{}

func (p *BankEditBankTransactionDetailExtFieldResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankEditBankTransactionDetailExtFieldResult) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("EditBankTransactionDetailExtField_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankEditBankTransactionDetailExtFieldResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankEditBankTransactionDetailExtFieldResult(%+v)", *p)
}

func (p *BankEditBankTransactionDetailExtFieldResult) DeepEqual(ano *BankEditBankTransactionDetailExtFieldResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type BankListBankTransactionDetailProcessInstanceArgs struct {
	Id int64 `thrift:"id,1" frugal:"1,default,i64" json:"id"`
}

func NewBankListBankTransactionDetailProcessInstanceArgs() *BankListBankTransactionDetailProcessInstanceArgs {
	return &BankListBankTransactionDetailProcessInstanceArgs{}
}

func (p *BankListBankTransactionDetailProcessInstanceArgs) InitDefault() {
	*p = BankListBankTransactionDetailProcessInstanceArgs{}
}

func (p *BankListBankTransactionDetailProcessInstanceArgs) GetId() (v int64) {
	return p.Id
}
func (p *BankListBankTransactionDetailProcessInstanceArgs) SetId(val int64) {
	p.Id = val
}

var fieldIDToName_BankListBankTransactionDetailProcessInstanceArgs = map[int16]string{
	1: "id",
}

func (p *BankListBankTransactionDetailProcessInstanceArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankListBankTransactionDetailProcessInstanceArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankListBankTransactionDetailProcessInstanceArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *BankListBankTransactionDetailProcessInstanceArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("listBankTransactionDetailProcessInstance_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankListBankTransactionDetailProcessInstanceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankListBankTransactionDetailProcessInstanceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankListBankTransactionDetailProcessInstanceArgs(%+v)", *p)
}

func (p *BankListBankTransactionDetailProcessInstanceArgs) DeepEqual(ano *BankListBankTransactionDetailProcessInstanceArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *BankListBankTransactionDetailProcessInstanceArgs) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}

type BankListBankTransactionDetailProcessInstanceResult struct {
	Success []*BankTransactionDetailProcessInstanceData `thrift:"success,0,optional" frugal:"0,optional,list<BankTransactionDetailProcessInstanceData>" json:"success,omitempty"`
}

func NewBankListBankTransactionDetailProcessInstanceResult() *BankListBankTransactionDetailProcessInstanceResult {
	return &BankListBankTransactionDetailProcessInstanceResult{}
}

func (p *BankListBankTransactionDetailProcessInstanceResult) InitDefault() {
	*p = BankListBankTransactionDetailProcessInstanceResult{}
}

var BankListBankTransactionDetailProcessInstanceResult_Success_DEFAULT []*BankTransactionDetailProcessInstanceData

func (p *BankListBankTransactionDetailProcessInstanceResult) GetSuccess() (v []*BankTransactionDetailProcessInstanceData) {
	if !p.IsSetSuccess() {
		return BankListBankTransactionDetailProcessInstanceResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BankListBankTransactionDetailProcessInstanceResult) SetSuccess(x interface{}) {
	p.Success = x.([]*BankTransactionDetailProcessInstanceData)
}

var fieldIDToName_BankListBankTransactionDetailProcessInstanceResult = map[int16]string{
	0: "success",
}

func (p *BankListBankTransactionDetailProcessInstanceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BankListBankTransactionDetailProcessInstanceResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankListBankTransactionDetailProcessInstanceResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankListBankTransactionDetailProcessInstanceResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Success = make([]*BankTransactionDetailProcessInstanceData, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewBankTransactionDetailProcessInstanceData()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Success = append(p.Success, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *BankListBankTransactionDetailProcessInstanceResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("listBankTransactionDetailProcessInstance_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankListBankTransactionDetailProcessInstanceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return err
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BankListBankTransactionDetailProcessInstanceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankListBankTransactionDetailProcessInstanceResult(%+v)", *p)
}

func (p *BankListBankTransactionDetailProcessInstanceResult) DeepEqual(ano *BankListBankTransactionDetailProcessInstanceResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BankListBankTransactionDetailProcessInstanceResult) Field0DeepEqual(src []*BankTransactionDetailProcessInstanceData) bool {

	if len(p.Success) != len(src) {
		return false
	}
	for i, v := range p.Success {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type BankGetBankCodeInfoArgs struct {
	Code string `thrift:"code,1" frugal:"1,default,string" json:"code"`
}

func NewBankGetBankCodeInfoArgs() *BankGetBankCodeInfoArgs {
	return &BankGetBankCodeInfoArgs{}
}

func (p *BankGetBankCodeInfoArgs) InitDefault() {
	*p = BankGetBankCodeInfoArgs{}
}

func (p *BankGetBankCodeInfoArgs) GetCode() (v string) {
	return p.Code
}
func (p *BankGetBankCodeInfoArgs) SetCode(val string) {
	p.Code = val
}

var fieldIDToName_BankGetBankCodeInfoArgs = map[int16]string{
	1: "code",
}

func (p *BankGetBankCodeInfoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankGetBankCodeInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankGetBankCodeInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Code = v
	}
	return nil
}

func (p *BankGetBankCodeInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetBankCodeInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankGetBankCodeInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankGetBankCodeInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankGetBankCodeInfoArgs(%+v)", *p)
}

func (p *BankGetBankCodeInfoArgs) DeepEqual(ano *BankGetBankCodeInfoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	return true
}

func (p *BankGetBankCodeInfoArgs) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Code, src) != 0 {
		return false
	}
	return true
}

type BankGetBankCodeInfoResult struct {
	Success *BankCodeData `thrift:"success,0,optional" frugal:"0,optional,BankCodeData" json:"success,omitempty"`
}

func NewBankGetBankCodeInfoResult() *BankGetBankCodeInfoResult {
	return &BankGetBankCodeInfoResult{}
}

func (p *BankGetBankCodeInfoResult) InitDefault() {
	*p = BankGetBankCodeInfoResult{}
}

var BankGetBankCodeInfoResult_Success_DEFAULT *BankCodeData

func (p *BankGetBankCodeInfoResult) GetSuccess() (v *BankCodeData) {
	if !p.IsSetSuccess() {
		return BankGetBankCodeInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BankGetBankCodeInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*BankCodeData)
}

var fieldIDToName_BankGetBankCodeInfoResult = map[int16]string{
	0: "success",
}

func (p *BankGetBankCodeInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BankGetBankCodeInfoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankGetBankCodeInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankGetBankCodeInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewBankCodeData()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankGetBankCodeInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetBankCodeInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankGetBankCodeInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BankGetBankCodeInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankGetBankCodeInfoResult(%+v)", *p)
}

func (p *BankGetBankCodeInfoResult) DeepEqual(ano *BankGetBankCodeInfoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BankGetBankCodeInfoResult) Field0DeepEqual(src *BankCodeData) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BankQueryBankCardInfoArgs struct {
	CardNo string `thrift:"cardNo,1" frugal:"1,default,string" json:"cardNo"`
}

func NewBankQueryBankCardInfoArgs() *BankQueryBankCardInfoArgs {
	return &BankQueryBankCardInfoArgs{}
}

func (p *BankQueryBankCardInfoArgs) InitDefault() {
	*p = BankQueryBankCardInfoArgs{}
}

func (p *BankQueryBankCardInfoArgs) GetCardNo() (v string) {
	return p.CardNo
}
func (p *BankQueryBankCardInfoArgs) SetCardNo(val string) {
	p.CardNo = val
}

var fieldIDToName_BankQueryBankCardInfoArgs = map[int16]string{
	1: "cardNo",
}

func (p *BankQueryBankCardInfoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankQueryBankCardInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankQueryBankCardInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CardNo = v
	}
	return nil
}

func (p *BankQueryBankCardInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryBankCardInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankQueryBankCardInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("cardNo", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CardNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankQueryBankCardInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankQueryBankCardInfoArgs(%+v)", *p)
}

func (p *BankQueryBankCardInfoArgs) DeepEqual(ano *BankQueryBankCardInfoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CardNo) {
		return false
	}
	return true
}

func (p *BankQueryBankCardInfoArgs) Field1DeepEqual(src string) bool {

	if strings.Compare(p.CardNo, src) != 0 {
		return false
	}
	return true
}

type BankQueryBankCardInfoResult struct {
	Success *QueryBankCardInfoResponse `thrift:"success,0,optional" frugal:"0,optional,QueryBankCardInfoResponse" json:"success,omitempty"`
}

func NewBankQueryBankCardInfoResult() *BankQueryBankCardInfoResult {
	return &BankQueryBankCardInfoResult{}
}

func (p *BankQueryBankCardInfoResult) InitDefault() {
	*p = BankQueryBankCardInfoResult{}
}

var BankQueryBankCardInfoResult_Success_DEFAULT *QueryBankCardInfoResponse

func (p *BankQueryBankCardInfoResult) GetSuccess() (v *QueryBankCardInfoResponse) {
	if !p.IsSetSuccess() {
		return BankQueryBankCardInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BankQueryBankCardInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*QueryBankCardInfoResponse)
}

var fieldIDToName_BankQueryBankCardInfoResult = map[int16]string{
	0: "success",
}

func (p *BankQueryBankCardInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BankQueryBankCardInfoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankQueryBankCardInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankQueryBankCardInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewQueryBankCardInfoResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankQueryBankCardInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryBankCardInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankQueryBankCardInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BankQueryBankCardInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankQueryBankCardInfoResult(%+v)", *p)
}

func (p *BankQueryBankCardInfoResult) DeepEqual(ano *BankQueryBankCardInfoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BankQueryBankCardInfoResult) Field0DeepEqual(src *QueryBankCardInfoResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BankListBankCodeArgs struct {
	Req *ListBankCodeRequest `thrift:"req,1" frugal:"1,default,ListBankCodeRequest" json:"req"`
}

func NewBankListBankCodeArgs() *BankListBankCodeArgs {
	return &BankListBankCodeArgs{}
}

func (p *BankListBankCodeArgs) InitDefault() {
	*p = BankListBankCodeArgs{}
}

var BankListBankCodeArgs_Req_DEFAULT *ListBankCodeRequest

func (p *BankListBankCodeArgs) GetReq() (v *ListBankCodeRequest) {
	if !p.IsSetReq() {
		return BankListBankCodeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BankListBankCodeArgs) SetReq(val *ListBankCodeRequest) {
	p.Req = val
}

var fieldIDToName_BankListBankCodeArgs = map[int16]string{
	1: "req",
}

func (p *BankListBankCodeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BankListBankCodeArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankListBankCodeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankListBankCodeArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewListBankCodeRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankListBankCodeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListBankCode_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankListBankCodeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankListBankCodeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankListBankCodeArgs(%+v)", *p)
}

func (p *BankListBankCodeArgs) DeepEqual(ano *BankListBankCodeArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BankListBankCodeArgs) Field1DeepEqual(src *ListBankCodeRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BankListBankCodeResult struct {
	Success *ListBankCodeResponse `thrift:"success,0,optional" frugal:"0,optional,ListBankCodeResponse" json:"success,omitempty"`
}

func NewBankListBankCodeResult() *BankListBankCodeResult {
	return &BankListBankCodeResult{}
}

func (p *BankListBankCodeResult) InitDefault() {
	*p = BankListBankCodeResult{}
}

var BankListBankCodeResult_Success_DEFAULT *ListBankCodeResponse

func (p *BankListBankCodeResult) GetSuccess() (v *ListBankCodeResponse) {
	if !p.IsSetSuccess() {
		return BankListBankCodeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BankListBankCodeResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListBankCodeResponse)
}

var fieldIDToName_BankListBankCodeResult = map[int16]string{
	0: "success",
}

func (p *BankListBankCodeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BankListBankCodeResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankListBankCodeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankListBankCodeResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewListBankCodeResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankListBankCodeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListBankCode_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankListBankCodeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BankListBankCodeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankListBankCodeResult(%+v)", *p)
}

func (p *BankListBankCodeResult) DeepEqual(ano *BankListBankCodeResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BankListBankCodeResult) Field0DeepEqual(src *ListBankCodeResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BankGetBankCodeArgs struct {
	Req *BankCodeData `thrift:"req,1" frugal:"1,default,BankCodeData" json:"req"`
}

func NewBankGetBankCodeArgs() *BankGetBankCodeArgs {
	return &BankGetBankCodeArgs{}
}

func (p *BankGetBankCodeArgs) InitDefault() {
	*p = BankGetBankCodeArgs{}
}

var BankGetBankCodeArgs_Req_DEFAULT *BankCodeData

func (p *BankGetBankCodeArgs) GetReq() (v *BankCodeData) {
	if !p.IsSetReq() {
		return BankGetBankCodeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BankGetBankCodeArgs) SetReq(val *BankCodeData) {
	p.Req = val
}

var fieldIDToName_BankGetBankCodeArgs = map[int16]string{
	1: "req",
}

func (p *BankGetBankCodeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BankGetBankCodeArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankGetBankCodeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankGetBankCodeArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewBankCodeData()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankGetBankCodeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetBankCode_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankGetBankCodeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankGetBankCodeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankGetBankCodeArgs(%+v)", *p)
}

func (p *BankGetBankCodeArgs) DeepEqual(ano *BankGetBankCodeArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BankGetBankCodeArgs) Field1DeepEqual(src *BankCodeData) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BankGetBankCodeResult struct {
	Success *BankCodeData `thrift:"success,0,optional" frugal:"0,optional,BankCodeData" json:"success,omitempty"`
}

func NewBankGetBankCodeResult() *BankGetBankCodeResult {
	return &BankGetBankCodeResult{}
}

func (p *BankGetBankCodeResult) InitDefault() {
	*p = BankGetBankCodeResult{}
}

var BankGetBankCodeResult_Success_DEFAULT *BankCodeData

func (p *BankGetBankCodeResult) GetSuccess() (v *BankCodeData) {
	if !p.IsSetSuccess() {
		return BankGetBankCodeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BankGetBankCodeResult) SetSuccess(x interface{}) {
	p.Success = x.(*BankCodeData)
}

var fieldIDToName_BankGetBankCodeResult = map[int16]string{
	0: "success",
}

func (p *BankGetBankCodeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BankGetBankCodeResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankGetBankCodeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankGetBankCodeResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewBankCodeData()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankGetBankCodeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetBankCode_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankGetBankCodeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BankGetBankCodeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankGetBankCodeResult(%+v)", *p)
}

func (p *BankGetBankCodeResult) DeepEqual(ano *BankGetBankCodeResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BankGetBankCodeResult) Field0DeepEqual(src *BankCodeData) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BankAddBankCodeArgs struct {
	Req *AddBankCodeRequest `thrift:"req,1" frugal:"1,default,AddBankCodeRequest" json:"req"`
}

func NewBankAddBankCodeArgs() *BankAddBankCodeArgs {
	return &BankAddBankCodeArgs{}
}

func (p *BankAddBankCodeArgs) InitDefault() {
	*p = BankAddBankCodeArgs{}
}

var BankAddBankCodeArgs_Req_DEFAULT *AddBankCodeRequest

func (p *BankAddBankCodeArgs) GetReq() (v *AddBankCodeRequest) {
	if !p.IsSetReq() {
		return BankAddBankCodeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BankAddBankCodeArgs) SetReq(val *AddBankCodeRequest) {
	p.Req = val
}

var fieldIDToName_BankAddBankCodeArgs = map[int16]string{
	1: "req",
}

func (p *BankAddBankCodeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BankAddBankCodeArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankAddBankCodeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankAddBankCodeArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewAddBankCodeRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankAddBankCodeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddBankCode_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankAddBankCodeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankAddBankCodeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankAddBankCodeArgs(%+v)", *p)
}

func (p *BankAddBankCodeArgs) DeepEqual(ano *BankAddBankCodeArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BankAddBankCodeArgs) Field1DeepEqual(src *AddBankCodeRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BankAddBankCodeResult struct {
}

func NewBankAddBankCodeResult() *BankAddBankCodeResult {
	return &BankAddBankCodeResult{}
}

func (p *BankAddBankCodeResult) InitDefault() {
	*p = BankAddBankCodeResult{}
}

var fieldIDToName_BankAddBankCodeResult = map[int16]string{}

func (p *BankAddBankCodeResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankAddBankCodeResult) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("AddBankCode_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankAddBankCodeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankAddBankCodeResult(%+v)", *p)
}

func (p *BankAddBankCodeResult) DeepEqual(ano *BankAddBankCodeResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type BankEditBankCodeArgs struct {
	Req *BankCodeData `thrift:"req,1" frugal:"1,default,BankCodeData" json:"req"`
}

func NewBankEditBankCodeArgs() *BankEditBankCodeArgs {
	return &BankEditBankCodeArgs{}
}

func (p *BankEditBankCodeArgs) InitDefault() {
	*p = BankEditBankCodeArgs{}
}

var BankEditBankCodeArgs_Req_DEFAULT *BankCodeData

func (p *BankEditBankCodeArgs) GetReq() (v *BankCodeData) {
	if !p.IsSetReq() {
		return BankEditBankCodeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BankEditBankCodeArgs) SetReq(val *BankCodeData) {
	p.Req = val
}

var fieldIDToName_BankEditBankCodeArgs = map[int16]string{
	1: "req",
}

func (p *BankEditBankCodeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BankEditBankCodeArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankEditBankCodeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankEditBankCodeArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewBankCodeData()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankEditBankCodeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EditBankCode_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankEditBankCodeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankEditBankCodeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankEditBankCodeArgs(%+v)", *p)
}

func (p *BankEditBankCodeArgs) DeepEqual(ano *BankEditBankCodeArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BankEditBankCodeArgs) Field1DeepEqual(src *BankCodeData) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BankEditBankCodeResult struct {
}

func NewBankEditBankCodeResult() *BankEditBankCodeResult {
	return &BankEditBankCodeResult{}
}

func (p *BankEditBankCodeResult) InitDefault() {
	*p = BankEditBankCodeResult{}
}

var fieldIDToName_BankEditBankCodeResult = map[int16]string{}

func (p *BankEditBankCodeResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankEditBankCodeResult) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("EditBankCode_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankEditBankCodeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankEditBankCodeResult(%+v)", *p)
}

func (p *BankEditBankCodeResult) DeepEqual(ano *BankEditBankCodeResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type BankDeleteBankCodeArgs struct {
	Id int64 `thrift:"id,1" frugal:"1,default,i64" json:"id"`
}

func NewBankDeleteBankCodeArgs() *BankDeleteBankCodeArgs {
	return &BankDeleteBankCodeArgs{}
}

func (p *BankDeleteBankCodeArgs) InitDefault() {
	*p = BankDeleteBankCodeArgs{}
}

func (p *BankDeleteBankCodeArgs) GetId() (v int64) {
	return p.Id
}
func (p *BankDeleteBankCodeArgs) SetId(val int64) {
	p.Id = val
}

var fieldIDToName_BankDeleteBankCodeArgs = map[int16]string{
	1: "id",
}

func (p *BankDeleteBankCodeArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankDeleteBankCodeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankDeleteBankCodeArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *BankDeleteBankCodeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteBankCode_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankDeleteBankCodeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankDeleteBankCodeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankDeleteBankCodeArgs(%+v)", *p)
}

func (p *BankDeleteBankCodeArgs) DeepEqual(ano *BankDeleteBankCodeArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *BankDeleteBankCodeArgs) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}

type BankDeleteBankCodeResult struct {
}

func NewBankDeleteBankCodeResult() *BankDeleteBankCodeResult {
	return &BankDeleteBankCodeResult{}
}

func (p *BankDeleteBankCodeResult) InitDefault() {
	*p = BankDeleteBankCodeResult{}
}

var fieldIDToName_BankDeleteBankCodeResult = map[int16]string{}

func (p *BankDeleteBankCodeResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankDeleteBankCodeResult) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("DeleteBankCode_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankDeleteBankCodeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankDeleteBankCodeResult(%+v)", *p)
}

func (p *BankDeleteBankCodeResult) DeepEqual(ano *BankDeleteBankCodeResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type BankHandleSyncTransferReceiptArgs struct {
	BeginDate      string `thrift:"beginDate,1" frugal:"1,default,string" json:"beginDate"`
	EndDate        string `thrift:"endDate,2" frugal:"2,default,string" json:"endDate"`
	OrganizationId int64  `thrift:"organizationId,3" frugal:"3,default,i64" json:"organizationId"`
}

func NewBankHandleSyncTransferReceiptArgs() *BankHandleSyncTransferReceiptArgs {
	return &BankHandleSyncTransferReceiptArgs{}
}

func (p *BankHandleSyncTransferReceiptArgs) InitDefault() {
	*p = BankHandleSyncTransferReceiptArgs{}
}

func (p *BankHandleSyncTransferReceiptArgs) GetBeginDate() (v string) {
	return p.BeginDate
}

func (p *BankHandleSyncTransferReceiptArgs) GetEndDate() (v string) {
	return p.EndDate
}

func (p *BankHandleSyncTransferReceiptArgs) GetOrganizationId() (v int64) {
	return p.OrganizationId
}
func (p *BankHandleSyncTransferReceiptArgs) SetBeginDate(val string) {
	p.BeginDate = val
}
func (p *BankHandleSyncTransferReceiptArgs) SetEndDate(val string) {
	p.EndDate = val
}
func (p *BankHandleSyncTransferReceiptArgs) SetOrganizationId(val int64) {
	p.OrganizationId = val
}

var fieldIDToName_BankHandleSyncTransferReceiptArgs = map[int16]string{
	1: "beginDate",
	2: "endDate",
	3: "organizationId",
}

func (p *BankHandleSyncTransferReceiptArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankHandleSyncTransferReceiptArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankHandleSyncTransferReceiptArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.BeginDate = v
	}
	return nil
}

func (p *BankHandleSyncTransferReceiptArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.EndDate = v
	}
	return nil
}

func (p *BankHandleSyncTransferReceiptArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.OrganizationId = v
	}
	return nil
}

func (p *BankHandleSyncTransferReceiptArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("HandleSyncTransferReceipt_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankHandleSyncTransferReceiptArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("beginDate", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.BeginDate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankHandleSyncTransferReceiptArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("endDate", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.EndDate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BankHandleSyncTransferReceiptArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("organizationId", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.OrganizationId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *BankHandleSyncTransferReceiptArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankHandleSyncTransferReceiptArgs(%+v)", *p)
}

func (p *BankHandleSyncTransferReceiptArgs) DeepEqual(ano *BankHandleSyncTransferReceiptArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BeginDate) {
		return false
	}
	if !p.Field2DeepEqual(ano.EndDate) {
		return false
	}
	if !p.Field3DeepEqual(ano.OrganizationId) {
		return false
	}
	return true
}

func (p *BankHandleSyncTransferReceiptArgs) Field1DeepEqual(src string) bool {

	if strings.Compare(p.BeginDate, src) != 0 {
		return false
	}
	return true
}
func (p *BankHandleSyncTransferReceiptArgs) Field2DeepEqual(src string) bool {

	if strings.Compare(p.EndDate, src) != 0 {
		return false
	}
	return true
}
func (p *BankHandleSyncTransferReceiptArgs) Field3DeepEqual(src int64) bool {

	if p.OrganizationId != src {
		return false
	}
	return true
}

type BankHandleSyncTransferReceiptResult struct {
}

func NewBankHandleSyncTransferReceiptResult() *BankHandleSyncTransferReceiptResult {
	return &BankHandleSyncTransferReceiptResult{}
}

func (p *BankHandleSyncTransferReceiptResult) InitDefault() {
	*p = BankHandleSyncTransferReceiptResult{}
}

var fieldIDToName_BankHandleSyncTransferReceiptResult = map[int16]string{}

func (p *BankHandleSyncTransferReceiptResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankHandleSyncTransferReceiptResult) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("HandleSyncTransferReceipt_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankHandleSyncTransferReceiptResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankHandleSyncTransferReceiptResult(%+v)", *p)
}

func (p *BankHandleSyncTransferReceiptResult) DeepEqual(ano *BankHandleSyncTransferReceiptResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type BankUpdateBankTransactionRecDetailArgs struct {
	Req *BankTransactionRecDetailData `thrift:"req,1" frugal:"1,default,BankTransactionRecDetailData" json:"req"`
}

func NewBankUpdateBankTransactionRecDetailArgs() *BankUpdateBankTransactionRecDetailArgs {
	return &BankUpdateBankTransactionRecDetailArgs{}
}

func (p *BankUpdateBankTransactionRecDetailArgs) InitDefault() {
	*p = BankUpdateBankTransactionRecDetailArgs{}
}

var BankUpdateBankTransactionRecDetailArgs_Req_DEFAULT *BankTransactionRecDetailData

func (p *BankUpdateBankTransactionRecDetailArgs) GetReq() (v *BankTransactionRecDetailData) {
	if !p.IsSetReq() {
		return BankUpdateBankTransactionRecDetailArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BankUpdateBankTransactionRecDetailArgs) SetReq(val *BankTransactionRecDetailData) {
	p.Req = val
}

var fieldIDToName_BankUpdateBankTransactionRecDetailArgs = map[int16]string{
	1: "req",
}

func (p *BankUpdateBankTransactionRecDetailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BankUpdateBankTransactionRecDetailArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankUpdateBankTransactionRecDetailArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankUpdateBankTransactionRecDetailArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewBankTransactionRecDetailData()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankUpdateBankTransactionRecDetailArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateBankTransactionRecDetail_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankUpdateBankTransactionRecDetailArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankUpdateBankTransactionRecDetailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankUpdateBankTransactionRecDetailArgs(%+v)", *p)
}

func (p *BankUpdateBankTransactionRecDetailArgs) DeepEqual(ano *BankUpdateBankTransactionRecDetailArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BankUpdateBankTransactionRecDetailArgs) Field1DeepEqual(src *BankTransactionRecDetailData) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BankUpdateBankTransactionRecDetailResult struct {
}

func NewBankUpdateBankTransactionRecDetailResult() *BankUpdateBankTransactionRecDetailResult {
	return &BankUpdateBankTransactionRecDetailResult{}
}

func (p *BankUpdateBankTransactionRecDetailResult) InitDefault() {
	*p = BankUpdateBankTransactionRecDetailResult{}
}

var fieldIDToName_BankUpdateBankTransactionRecDetailResult = map[int16]string{}

func (p *BankUpdateBankTransactionRecDetailResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankUpdateBankTransactionRecDetailResult) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("UpdateBankTransactionRecDetail_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankUpdateBankTransactionRecDetailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankUpdateBankTransactionRecDetailResult(%+v)", *p)
}

func (p *BankUpdateBankTransactionRecDetailResult) DeepEqual(ano *BankUpdateBankTransactionRecDetailResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type BankSyncTransferReceiptArgs struct {
	TaskId         int64  `thrift:"taskId,1" frugal:"1,default,i64" json:"taskId"`
	Param          []byte `thrift:"param,2" frugal:"2,default,binary" json:"param"`
	OrganizationId int64  `thrift:"organizationId,3" frugal:"3,default,i64" json:"organizationId"`
}

func NewBankSyncTransferReceiptArgs() *BankSyncTransferReceiptArgs {
	return &BankSyncTransferReceiptArgs{}
}

func (p *BankSyncTransferReceiptArgs) InitDefault() {
	*p = BankSyncTransferReceiptArgs{}
}

func (p *BankSyncTransferReceiptArgs) GetTaskId() (v int64) {
	return p.TaskId
}

func (p *BankSyncTransferReceiptArgs) GetParam() (v []byte) {
	return p.Param
}

func (p *BankSyncTransferReceiptArgs) GetOrganizationId() (v int64) {
	return p.OrganizationId
}
func (p *BankSyncTransferReceiptArgs) SetTaskId(val int64) {
	p.TaskId = val
}
func (p *BankSyncTransferReceiptArgs) SetParam(val []byte) {
	p.Param = val
}
func (p *BankSyncTransferReceiptArgs) SetOrganizationId(val int64) {
	p.OrganizationId = val
}

var fieldIDToName_BankSyncTransferReceiptArgs = map[int16]string{
	1: "taskId",
	2: "param",
	3: "organizationId",
}

func (p *BankSyncTransferReceiptArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankSyncTransferReceiptArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankSyncTransferReceiptArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.TaskId = v
	}
	return nil
}

func (p *BankSyncTransferReceiptArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		p.Param = []byte(v)
	}
	return nil
}

func (p *BankSyncTransferReceiptArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.OrganizationId = v
	}
	return nil
}

func (p *BankSyncTransferReceiptArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("syncTransferReceipt_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankSyncTransferReceiptArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("taskId", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TaskId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankSyncTransferReceiptArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("param", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.Param)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BankSyncTransferReceiptArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("organizationId", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.OrganizationId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *BankSyncTransferReceiptArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankSyncTransferReceiptArgs(%+v)", *p)
}

func (p *BankSyncTransferReceiptArgs) DeepEqual(ano *BankSyncTransferReceiptArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TaskId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Param) {
		return false
	}
	if !p.Field3DeepEqual(ano.OrganizationId) {
		return false
	}
	return true
}

func (p *BankSyncTransferReceiptArgs) Field1DeepEqual(src int64) bool {

	if p.TaskId != src {
		return false
	}
	return true
}
func (p *BankSyncTransferReceiptArgs) Field2DeepEqual(src []byte) bool {

	if bytes.Compare(p.Param, src) != 0 {
		return false
	}
	return true
}
func (p *BankSyncTransferReceiptArgs) Field3DeepEqual(src int64) bool {

	if p.OrganizationId != src {
		return false
	}
	return true
}

type BankSyncTransferReceiptResult struct {
}

func NewBankSyncTransferReceiptResult() *BankSyncTransferReceiptResult {
	return &BankSyncTransferReceiptResult{}
}

func (p *BankSyncTransferReceiptResult) InitDefault() {
	*p = BankSyncTransferReceiptResult{}
}

var fieldIDToName_BankSyncTransferReceiptResult = map[int16]string{}

func (p *BankSyncTransferReceiptResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankSyncTransferReceiptResult) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("syncTransferReceipt_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankSyncTransferReceiptResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankSyncTransferReceiptResult(%+v)", *p)
}

func (p *BankSyncTransferReceiptResult) DeepEqual(ano *BankSyncTransferReceiptResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type BankSyncTransactionDetailArgs struct {
	TaskId         int64  `thrift:"taskId,1" frugal:"1,default,i64" json:"taskId"`
	Param          []byte `thrift:"param,2" frugal:"2,default,binary" json:"param"`
	OrganizationId int64  `thrift:"organizationId,3" frugal:"3,default,i64" json:"organizationId"`
}

func NewBankSyncTransactionDetailArgs() *BankSyncTransactionDetailArgs {
	return &BankSyncTransactionDetailArgs{}
}

func (p *BankSyncTransactionDetailArgs) InitDefault() {
	*p = BankSyncTransactionDetailArgs{}
}

func (p *BankSyncTransactionDetailArgs) GetTaskId() (v int64) {
	return p.TaskId
}

func (p *BankSyncTransactionDetailArgs) GetParam() (v []byte) {
	return p.Param
}

func (p *BankSyncTransactionDetailArgs) GetOrganizationId() (v int64) {
	return p.OrganizationId
}
func (p *BankSyncTransactionDetailArgs) SetTaskId(val int64) {
	p.TaskId = val
}
func (p *BankSyncTransactionDetailArgs) SetParam(val []byte) {
	p.Param = val
}
func (p *BankSyncTransactionDetailArgs) SetOrganizationId(val int64) {
	p.OrganizationId = val
}

var fieldIDToName_BankSyncTransactionDetailArgs = map[int16]string{
	1: "taskId",
	2: "param",
	3: "organizationId",
}

func (p *BankSyncTransactionDetailArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankSyncTransactionDetailArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankSyncTransactionDetailArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.TaskId = v
	}
	return nil
}

func (p *BankSyncTransactionDetailArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		p.Param = []byte(v)
	}
	return nil
}

func (p *BankSyncTransactionDetailArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.OrganizationId = v
	}
	return nil
}

func (p *BankSyncTransactionDetailArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("syncTransactionDetail_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankSyncTransactionDetailArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("taskId", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TaskId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankSyncTransactionDetailArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("param", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.Param)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BankSyncTransactionDetailArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("organizationId", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.OrganizationId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *BankSyncTransactionDetailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankSyncTransactionDetailArgs(%+v)", *p)
}

func (p *BankSyncTransactionDetailArgs) DeepEqual(ano *BankSyncTransactionDetailArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TaskId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Param) {
		return false
	}
	if !p.Field3DeepEqual(ano.OrganizationId) {
		return false
	}
	return true
}

func (p *BankSyncTransactionDetailArgs) Field1DeepEqual(src int64) bool {

	if p.TaskId != src {
		return false
	}
	return true
}
func (p *BankSyncTransactionDetailArgs) Field2DeepEqual(src []byte) bool {

	if bytes.Compare(p.Param, src) != 0 {
		return false
	}
	return true
}
func (p *BankSyncTransactionDetailArgs) Field3DeepEqual(src int64) bool {

	if p.OrganizationId != src {
		return false
	}
	return true
}

type BankSyncTransactionDetailResult struct {
}

func NewBankSyncTransactionDetailResult() *BankSyncTransactionDetailResult {
	return &BankSyncTransactionDetailResult{}
}

func (p *BankSyncTransactionDetailResult) InitDefault() {
	*p = BankSyncTransactionDetailResult{}
}

var fieldIDToName_BankSyncTransactionDetailResult = map[int16]string{}

func (p *BankSyncTransactionDetailResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankSyncTransactionDetailResult) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("syncTransactionDetail_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankSyncTransactionDetailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankSyncTransactionDetailResult(%+v)", *p)
}

func (p *BankSyncTransactionDetailResult) DeepEqual(ano *BankSyncTransactionDetailResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type BankDashboardDataArgs struct {
	OrganizationId int64 `thrift:"organizationId,1" frugal:"1,default,i64" json:"organizationId"`
}

func NewBankDashboardDataArgs() *BankDashboardDataArgs {
	return &BankDashboardDataArgs{}
}

func (p *BankDashboardDataArgs) InitDefault() {
	*p = BankDashboardDataArgs{}
}

func (p *BankDashboardDataArgs) GetOrganizationId() (v int64) {
	return p.OrganizationId
}
func (p *BankDashboardDataArgs) SetOrganizationId(val int64) {
	p.OrganizationId = val
}

var fieldIDToName_BankDashboardDataArgs = map[int16]string{
	1: "organizationId",
}

func (p *BankDashboardDataArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankDashboardDataArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankDashboardDataArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.OrganizationId = v
	}
	return nil
}

func (p *BankDashboardDataArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("dashboardData_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankDashboardDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("organizationId", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.OrganizationId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankDashboardDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankDashboardDataArgs(%+v)", *p)
}

func (p *BankDashboardDataArgs) DeepEqual(ano *BankDashboardDataArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.OrganizationId) {
		return false
	}
	return true
}

func (p *BankDashboardDataArgs) Field1DeepEqual(src int64) bool {

	if p.OrganizationId != src {
		return false
	}
	return true
}

type BankDashboardDataResult struct {
	Success *DashboardData `thrift:"success,0,optional" frugal:"0,optional,DashboardData" json:"success,omitempty"`
}

func NewBankDashboardDataResult() *BankDashboardDataResult {
	return &BankDashboardDataResult{}
}

func (p *BankDashboardDataResult) InitDefault() {
	*p = BankDashboardDataResult{}
}

var BankDashboardDataResult_Success_DEFAULT *DashboardData

func (p *BankDashboardDataResult) GetSuccess() (v *DashboardData) {
	if !p.IsSetSuccess() {
		return BankDashboardDataResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BankDashboardDataResult) SetSuccess(x interface{}) {
	p.Success = x.(*DashboardData)
}

var fieldIDToName_BankDashboardDataResult = map[int16]string{
	0: "success",
}

func (p *BankDashboardDataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BankDashboardDataResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankDashboardDataResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankDashboardDataResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewDashboardData()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankDashboardDataResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("dashboardData_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankDashboardDataResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BankDashboardDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankDashboardDataResult(%+v)", *p)
}

func (p *BankDashboardDataResult) DeepEqual(ano *BankDashboardDataResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BankDashboardDataResult) Field0DeepEqual(src *DashboardData) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BankGetCashFlowMonthChartDataArgs struct {
	Req *MonthChartDataRequest `thrift:"req,1" frugal:"1,default,MonthChartDataRequest" json:"req"`
}

func NewBankGetCashFlowMonthChartDataArgs() *BankGetCashFlowMonthChartDataArgs {
	return &BankGetCashFlowMonthChartDataArgs{}
}

func (p *BankGetCashFlowMonthChartDataArgs) InitDefault() {
	*p = BankGetCashFlowMonthChartDataArgs{}
}

var BankGetCashFlowMonthChartDataArgs_Req_DEFAULT *MonthChartDataRequest

func (p *BankGetCashFlowMonthChartDataArgs) GetReq() (v *MonthChartDataRequest) {
	if !p.IsSetReq() {
		return BankGetCashFlowMonthChartDataArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BankGetCashFlowMonthChartDataArgs) SetReq(val *MonthChartDataRequest) {
	p.Req = val
}

var fieldIDToName_BankGetCashFlowMonthChartDataArgs = map[int16]string{
	1: "req",
}

func (p *BankGetCashFlowMonthChartDataArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BankGetCashFlowMonthChartDataArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankGetCashFlowMonthChartDataArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankGetCashFlowMonthChartDataArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewMonthChartDataRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankGetCashFlowMonthChartDataArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("getCashFlowMonthChartData_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankGetCashFlowMonthChartDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankGetCashFlowMonthChartDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankGetCashFlowMonthChartDataArgs(%+v)", *p)
}

func (p *BankGetCashFlowMonthChartDataArgs) DeepEqual(ano *BankGetCashFlowMonthChartDataArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BankGetCashFlowMonthChartDataArgs) Field1DeepEqual(src *MonthChartDataRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BankGetCashFlowMonthChartDataResult struct {
	Success *ChartData `thrift:"success,0,optional" frugal:"0,optional,ChartData" json:"success,omitempty"`
}

func NewBankGetCashFlowMonthChartDataResult() *BankGetCashFlowMonthChartDataResult {
	return &BankGetCashFlowMonthChartDataResult{}
}

func (p *BankGetCashFlowMonthChartDataResult) InitDefault() {
	*p = BankGetCashFlowMonthChartDataResult{}
}

var BankGetCashFlowMonthChartDataResult_Success_DEFAULT *ChartData

func (p *BankGetCashFlowMonthChartDataResult) GetSuccess() (v *ChartData) {
	if !p.IsSetSuccess() {
		return BankGetCashFlowMonthChartDataResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BankGetCashFlowMonthChartDataResult) SetSuccess(x interface{}) {
	p.Success = x.(*ChartData)
}

var fieldIDToName_BankGetCashFlowMonthChartDataResult = map[int16]string{
	0: "success",
}

func (p *BankGetCashFlowMonthChartDataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BankGetCashFlowMonthChartDataResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankGetCashFlowMonthChartDataResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankGetCashFlowMonthChartDataResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewChartData()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankGetCashFlowMonthChartDataResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("getCashFlowMonthChartData_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankGetCashFlowMonthChartDataResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BankGetCashFlowMonthChartDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankGetCashFlowMonthChartDataResult(%+v)", *p)
}

func (p *BankGetCashFlowMonthChartDataResult) DeepEqual(ano *BankGetCashFlowMonthChartDataResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BankGetCashFlowMonthChartDataResult) Field0DeepEqual(src *ChartData) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BankGetBalanceMonthChartDataArgs struct {
	Req *MonthChartDataRequest `thrift:"req,1" frugal:"1,default,MonthChartDataRequest" json:"req"`
}

func NewBankGetBalanceMonthChartDataArgs() *BankGetBalanceMonthChartDataArgs {
	return &BankGetBalanceMonthChartDataArgs{}
}

func (p *BankGetBalanceMonthChartDataArgs) InitDefault() {
	*p = BankGetBalanceMonthChartDataArgs{}
}

var BankGetBalanceMonthChartDataArgs_Req_DEFAULT *MonthChartDataRequest

func (p *BankGetBalanceMonthChartDataArgs) GetReq() (v *MonthChartDataRequest) {
	if !p.IsSetReq() {
		return BankGetBalanceMonthChartDataArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BankGetBalanceMonthChartDataArgs) SetReq(val *MonthChartDataRequest) {
	p.Req = val
}

var fieldIDToName_BankGetBalanceMonthChartDataArgs = map[int16]string{
	1: "req",
}

func (p *BankGetBalanceMonthChartDataArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BankGetBalanceMonthChartDataArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankGetBalanceMonthChartDataArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankGetBalanceMonthChartDataArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewMonthChartDataRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankGetBalanceMonthChartDataArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("getBalanceMonthChartData_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankGetBalanceMonthChartDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankGetBalanceMonthChartDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankGetBalanceMonthChartDataArgs(%+v)", *p)
}

func (p *BankGetBalanceMonthChartDataArgs) DeepEqual(ano *BankGetBalanceMonthChartDataArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BankGetBalanceMonthChartDataArgs) Field1DeepEqual(src *MonthChartDataRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BankGetBalanceMonthChartDataResult struct {
	Success *ChartData `thrift:"success,0,optional" frugal:"0,optional,ChartData" json:"success,omitempty"`
}

func NewBankGetBalanceMonthChartDataResult() *BankGetBalanceMonthChartDataResult {
	return &BankGetBalanceMonthChartDataResult{}
}

func (p *BankGetBalanceMonthChartDataResult) InitDefault() {
	*p = BankGetBalanceMonthChartDataResult{}
}

var BankGetBalanceMonthChartDataResult_Success_DEFAULT *ChartData

func (p *BankGetBalanceMonthChartDataResult) GetSuccess() (v *ChartData) {
	if !p.IsSetSuccess() {
		return BankGetBalanceMonthChartDataResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BankGetBalanceMonthChartDataResult) SetSuccess(x interface{}) {
	p.Success = x.(*ChartData)
}

var fieldIDToName_BankGetBalanceMonthChartDataResult = map[int16]string{
	0: "success",
}

func (p *BankGetBalanceMonthChartDataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BankGetBalanceMonthChartDataResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankGetBalanceMonthChartDataResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankGetBalanceMonthChartDataResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewChartData()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankGetBalanceMonthChartDataResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("getBalanceMonthChartData_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankGetBalanceMonthChartDataResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BankGetBalanceMonthChartDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankGetBalanceMonthChartDataResult(%+v)", *p)
}

func (p *BankGetBalanceMonthChartDataResult) DeepEqual(ano *BankGetBalanceMonthChartDataResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BankGetBalanceMonthChartDataResult) Field0DeepEqual(src *ChartData) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BankQueryAccountBalanceArgs struct {
	Req *QueryAccountBalanceRequest `thrift:"req,1" frugal:"1,default,QueryAccountBalanceRequest" json:"req"`
}

func NewBankQueryAccountBalanceArgs() *BankQueryAccountBalanceArgs {
	return &BankQueryAccountBalanceArgs{}
}

func (p *BankQueryAccountBalanceArgs) InitDefault() {
	*p = BankQueryAccountBalanceArgs{}
}

var BankQueryAccountBalanceArgs_Req_DEFAULT *QueryAccountBalanceRequest

func (p *BankQueryAccountBalanceArgs) GetReq() (v *QueryAccountBalanceRequest) {
	if !p.IsSetReq() {
		return BankQueryAccountBalanceArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BankQueryAccountBalanceArgs) SetReq(val *QueryAccountBalanceRequest) {
	p.Req = val
}

var fieldIDToName_BankQueryAccountBalanceArgs = map[int16]string{
	1: "req",
}

func (p *BankQueryAccountBalanceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BankQueryAccountBalanceArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankQueryAccountBalanceArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankQueryAccountBalanceArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewQueryAccountBalanceRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankQueryAccountBalanceArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryAccountBalance_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankQueryAccountBalanceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankQueryAccountBalanceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankQueryAccountBalanceArgs(%+v)", *p)
}

func (p *BankQueryAccountBalanceArgs) DeepEqual(ano *BankQueryAccountBalanceArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BankQueryAccountBalanceArgs) Field1DeepEqual(src *QueryAccountBalanceRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BankQueryAccountBalanceResult struct {
	Success *QueryAccountBalanceResponse `thrift:"success,0,optional" frugal:"0,optional,QueryAccountBalanceResponse" json:"success,omitempty"`
}

func NewBankQueryAccountBalanceResult() *BankQueryAccountBalanceResult {
	return &BankQueryAccountBalanceResult{}
}

func (p *BankQueryAccountBalanceResult) InitDefault() {
	*p = BankQueryAccountBalanceResult{}
}

var BankQueryAccountBalanceResult_Success_DEFAULT *QueryAccountBalanceResponse

func (p *BankQueryAccountBalanceResult) GetSuccess() (v *QueryAccountBalanceResponse) {
	if !p.IsSetSuccess() {
		return BankQueryAccountBalanceResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BankQueryAccountBalanceResult) SetSuccess(x interface{}) {
	p.Success = x.(*QueryAccountBalanceResponse)
}

var fieldIDToName_BankQueryAccountBalanceResult = map[int16]string{
	0: "success",
}

func (p *BankQueryAccountBalanceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BankQueryAccountBalanceResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankQueryAccountBalanceResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankQueryAccountBalanceResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewQueryAccountBalanceResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankQueryAccountBalanceResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryAccountBalance_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankQueryAccountBalanceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BankQueryAccountBalanceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankQueryAccountBalanceResult(%+v)", *p)
}

func (p *BankQueryAccountBalanceResult) DeepEqual(ano *BankQueryAccountBalanceResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BankQueryAccountBalanceResult) Field0DeepEqual(src *QueryAccountBalanceResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BankImportBankBusinessPayrollDataArgs struct {
	TaskId         int64  `thrift:"taskId,1" frugal:"1,default,i64" json:"taskId"`
	Param          []byte `thrift:"param,2" frugal:"2,default,binary" json:"param"`
	OrganizationId int64  `thrift:"organizationId,3" frugal:"3,default,i64" json:"organizationId"`
}

func NewBankImportBankBusinessPayrollDataArgs() *BankImportBankBusinessPayrollDataArgs {
	return &BankImportBankBusinessPayrollDataArgs{}
}

func (p *BankImportBankBusinessPayrollDataArgs) InitDefault() {
	*p = BankImportBankBusinessPayrollDataArgs{}
}

func (p *BankImportBankBusinessPayrollDataArgs) GetTaskId() (v int64) {
	return p.TaskId
}

func (p *BankImportBankBusinessPayrollDataArgs) GetParam() (v []byte) {
	return p.Param
}

func (p *BankImportBankBusinessPayrollDataArgs) GetOrganizationId() (v int64) {
	return p.OrganizationId
}
func (p *BankImportBankBusinessPayrollDataArgs) SetTaskId(val int64) {
	p.TaskId = val
}
func (p *BankImportBankBusinessPayrollDataArgs) SetParam(val []byte) {
	p.Param = val
}
func (p *BankImportBankBusinessPayrollDataArgs) SetOrganizationId(val int64) {
	p.OrganizationId = val
}

var fieldIDToName_BankImportBankBusinessPayrollDataArgs = map[int16]string{
	1: "taskId",
	2: "param",
	3: "organizationId",
}

func (p *BankImportBankBusinessPayrollDataArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankImportBankBusinessPayrollDataArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankImportBankBusinessPayrollDataArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.TaskId = v
	}
	return nil
}

func (p *BankImportBankBusinessPayrollDataArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		p.Param = []byte(v)
	}
	return nil
}

func (p *BankImportBankBusinessPayrollDataArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.OrganizationId = v
	}
	return nil
}

func (p *BankImportBankBusinessPayrollDataArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ImportBankBusinessPayrollData_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankImportBankBusinessPayrollDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("taskId", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TaskId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankImportBankBusinessPayrollDataArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("param", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.Param)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BankImportBankBusinessPayrollDataArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("organizationId", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.OrganizationId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *BankImportBankBusinessPayrollDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankImportBankBusinessPayrollDataArgs(%+v)", *p)
}

func (p *BankImportBankBusinessPayrollDataArgs) DeepEqual(ano *BankImportBankBusinessPayrollDataArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TaskId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Param) {
		return false
	}
	if !p.Field3DeepEqual(ano.OrganizationId) {
		return false
	}
	return true
}

func (p *BankImportBankBusinessPayrollDataArgs) Field1DeepEqual(src int64) bool {

	if p.TaskId != src {
		return false
	}
	return true
}
func (p *BankImportBankBusinessPayrollDataArgs) Field2DeepEqual(src []byte) bool {

	if bytes.Compare(p.Param, src) != 0 {
		return false
	}
	return true
}
func (p *BankImportBankBusinessPayrollDataArgs) Field3DeepEqual(src int64) bool {

	if p.OrganizationId != src {
		return false
	}
	return true
}

type BankImportBankBusinessPayrollDataResult struct {
}

func NewBankImportBankBusinessPayrollDataResult() *BankImportBankBusinessPayrollDataResult {
	return &BankImportBankBusinessPayrollDataResult{}
}

func (p *BankImportBankBusinessPayrollDataResult) InitDefault() {
	*p = BankImportBankBusinessPayrollDataResult{}
}

var fieldIDToName_BankImportBankBusinessPayrollDataResult = map[int16]string{}

func (p *BankImportBankBusinessPayrollDataResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankImportBankBusinessPayrollDataResult) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("ImportBankBusinessPayrollData_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankImportBankBusinessPayrollDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankImportBankBusinessPayrollDataResult(%+v)", *p)
}

func (p *BankImportBankBusinessPayrollDataResult) DeepEqual(ano *BankImportBankBusinessPayrollDataResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type BankListBankBusinessPayrollArgs struct {
	Req *ListBusinessPayrollRequest `thrift:"req,1" frugal:"1,default,ListBusinessPayrollRequest" json:"req"`
}

func NewBankListBankBusinessPayrollArgs() *BankListBankBusinessPayrollArgs {
	return &BankListBankBusinessPayrollArgs{}
}

func (p *BankListBankBusinessPayrollArgs) InitDefault() {
	*p = BankListBankBusinessPayrollArgs{}
}

var BankListBankBusinessPayrollArgs_Req_DEFAULT *ListBusinessPayrollRequest

func (p *BankListBankBusinessPayrollArgs) GetReq() (v *ListBusinessPayrollRequest) {
	if !p.IsSetReq() {
		return BankListBankBusinessPayrollArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BankListBankBusinessPayrollArgs) SetReq(val *ListBusinessPayrollRequest) {
	p.Req = val
}

var fieldIDToName_BankListBankBusinessPayrollArgs = map[int16]string{
	1: "req",
}

func (p *BankListBankBusinessPayrollArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BankListBankBusinessPayrollArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankListBankBusinessPayrollArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankListBankBusinessPayrollArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewListBusinessPayrollRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankListBankBusinessPayrollArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListBankBusinessPayroll_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankListBankBusinessPayrollArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankListBankBusinessPayrollArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankListBankBusinessPayrollArgs(%+v)", *p)
}

func (p *BankListBankBusinessPayrollArgs) DeepEqual(ano *BankListBankBusinessPayrollArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BankListBankBusinessPayrollArgs) Field1DeepEqual(src *ListBusinessPayrollRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BankListBankBusinessPayrollResult struct {
	Success *ListBusinessPayrollResponse `thrift:"success,0,optional" frugal:"0,optional,ListBusinessPayrollResponse" json:"success,omitempty"`
}

func NewBankListBankBusinessPayrollResult() *BankListBankBusinessPayrollResult {
	return &BankListBankBusinessPayrollResult{}
}

func (p *BankListBankBusinessPayrollResult) InitDefault() {
	*p = BankListBankBusinessPayrollResult{}
}

var BankListBankBusinessPayrollResult_Success_DEFAULT *ListBusinessPayrollResponse

func (p *BankListBankBusinessPayrollResult) GetSuccess() (v *ListBusinessPayrollResponse) {
	if !p.IsSetSuccess() {
		return BankListBankBusinessPayrollResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BankListBankBusinessPayrollResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListBusinessPayrollResponse)
}

var fieldIDToName_BankListBankBusinessPayrollResult = map[int16]string{
	0: "success",
}

func (p *BankListBankBusinessPayrollResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BankListBankBusinessPayrollResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankListBankBusinessPayrollResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankListBankBusinessPayrollResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewListBusinessPayrollResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankListBankBusinessPayrollResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListBankBusinessPayroll_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankListBankBusinessPayrollResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BankListBankBusinessPayrollResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankListBankBusinessPayrollResult(%+v)", *p)
}

func (p *BankListBankBusinessPayrollResult) DeepEqual(ano *BankListBankBusinessPayrollResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BankListBankBusinessPayrollResult) Field0DeepEqual(src *ListBusinessPayrollResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BankListBankBusinessPayrollDetailArgs struct {
	Req *ListBusinessPayrollDetailRequest `thrift:"req,1" frugal:"1,default,ListBusinessPayrollDetailRequest" json:"req"`
}

func NewBankListBankBusinessPayrollDetailArgs() *BankListBankBusinessPayrollDetailArgs {
	return &BankListBankBusinessPayrollDetailArgs{}
}

func (p *BankListBankBusinessPayrollDetailArgs) InitDefault() {
	*p = BankListBankBusinessPayrollDetailArgs{}
}

var BankListBankBusinessPayrollDetailArgs_Req_DEFAULT *ListBusinessPayrollDetailRequest

func (p *BankListBankBusinessPayrollDetailArgs) GetReq() (v *ListBusinessPayrollDetailRequest) {
	if !p.IsSetReq() {
		return BankListBankBusinessPayrollDetailArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BankListBankBusinessPayrollDetailArgs) SetReq(val *ListBusinessPayrollDetailRequest) {
	p.Req = val
}

var fieldIDToName_BankListBankBusinessPayrollDetailArgs = map[int16]string{
	1: "req",
}

func (p *BankListBankBusinessPayrollDetailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BankListBankBusinessPayrollDetailArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankListBankBusinessPayrollDetailArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankListBankBusinessPayrollDetailArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewListBusinessPayrollDetailRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankListBankBusinessPayrollDetailArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListBankBusinessPayrollDetail_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankListBankBusinessPayrollDetailArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankListBankBusinessPayrollDetailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankListBankBusinessPayrollDetailArgs(%+v)", *p)
}

func (p *BankListBankBusinessPayrollDetailArgs) DeepEqual(ano *BankListBankBusinessPayrollDetailArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BankListBankBusinessPayrollDetailArgs) Field1DeepEqual(src *ListBusinessPayrollDetailRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BankListBankBusinessPayrollDetailResult struct {
	Success *ListBusinessPayrollDetailResponse `thrift:"success,0,optional" frugal:"0,optional,ListBusinessPayrollDetailResponse" json:"success,omitempty"`
}

func NewBankListBankBusinessPayrollDetailResult() *BankListBankBusinessPayrollDetailResult {
	return &BankListBankBusinessPayrollDetailResult{}
}

func (p *BankListBankBusinessPayrollDetailResult) InitDefault() {
	*p = BankListBankBusinessPayrollDetailResult{}
}

var BankListBankBusinessPayrollDetailResult_Success_DEFAULT *ListBusinessPayrollDetailResponse

func (p *BankListBankBusinessPayrollDetailResult) GetSuccess() (v *ListBusinessPayrollDetailResponse) {
	if !p.IsSetSuccess() {
		return BankListBankBusinessPayrollDetailResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BankListBankBusinessPayrollDetailResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListBusinessPayrollDetailResponse)
}

var fieldIDToName_BankListBankBusinessPayrollDetailResult = map[int16]string{
	0: "success",
}

func (p *BankListBankBusinessPayrollDetailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BankListBankBusinessPayrollDetailResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankListBankBusinessPayrollDetailResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankListBankBusinessPayrollDetailResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewListBusinessPayrollDetailResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankListBankBusinessPayrollDetailResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListBankBusinessPayrollDetail_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankListBankBusinessPayrollDetailResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BankListBankBusinessPayrollDetailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankListBankBusinessPayrollDetailResult(%+v)", *p)
}

func (p *BankListBankBusinessPayrollDetailResult) DeepEqual(ano *BankListBankBusinessPayrollDetailResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BankListBankBusinessPayrollDetailResult) Field0DeepEqual(src *ListBusinessPayrollDetailResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BankSyncBankBusinessPayrollDetailArgs struct {
	Req *SyncBusinessPayrollResultRequest `thrift:"req,1" frugal:"1,default,SyncBusinessPayrollResultRequest" json:"req"`
}

func NewBankSyncBankBusinessPayrollDetailArgs() *BankSyncBankBusinessPayrollDetailArgs {
	return &BankSyncBankBusinessPayrollDetailArgs{}
}

func (p *BankSyncBankBusinessPayrollDetailArgs) InitDefault() {
	*p = BankSyncBankBusinessPayrollDetailArgs{}
}

var BankSyncBankBusinessPayrollDetailArgs_Req_DEFAULT *SyncBusinessPayrollResultRequest

func (p *BankSyncBankBusinessPayrollDetailArgs) GetReq() (v *SyncBusinessPayrollResultRequest) {
	if !p.IsSetReq() {
		return BankSyncBankBusinessPayrollDetailArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BankSyncBankBusinessPayrollDetailArgs) SetReq(val *SyncBusinessPayrollResultRequest) {
	p.Req = val
}

var fieldIDToName_BankSyncBankBusinessPayrollDetailArgs = map[int16]string{
	1: "req",
}

func (p *BankSyncBankBusinessPayrollDetailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BankSyncBankBusinessPayrollDetailArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankSyncBankBusinessPayrollDetailArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankSyncBankBusinessPayrollDetailArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewSyncBusinessPayrollResultRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankSyncBankBusinessPayrollDetailArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SyncBankBusinessPayrollDetail_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankSyncBankBusinessPayrollDetailArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankSyncBankBusinessPayrollDetailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankSyncBankBusinessPayrollDetailArgs(%+v)", *p)
}

func (p *BankSyncBankBusinessPayrollDetailArgs) DeepEqual(ano *BankSyncBankBusinessPayrollDetailArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BankSyncBankBusinessPayrollDetailArgs) Field1DeepEqual(src *SyncBusinessPayrollResultRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BankSyncBankBusinessPayrollDetailResult struct {
	Success *SyncBusinessPayrollResultResponse `thrift:"success,0,optional" frugal:"0,optional,SyncBusinessPayrollResultResponse" json:"success,omitempty"`
}

func NewBankSyncBankBusinessPayrollDetailResult() *BankSyncBankBusinessPayrollDetailResult {
	return &BankSyncBankBusinessPayrollDetailResult{}
}

func (p *BankSyncBankBusinessPayrollDetailResult) InitDefault() {
	*p = BankSyncBankBusinessPayrollDetailResult{}
}

var BankSyncBankBusinessPayrollDetailResult_Success_DEFAULT *SyncBusinessPayrollResultResponse

func (p *BankSyncBankBusinessPayrollDetailResult) GetSuccess() (v *SyncBusinessPayrollResultResponse) {
	if !p.IsSetSuccess() {
		return BankSyncBankBusinessPayrollDetailResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BankSyncBankBusinessPayrollDetailResult) SetSuccess(x interface{}) {
	p.Success = x.(*SyncBusinessPayrollResultResponse)
}

var fieldIDToName_BankSyncBankBusinessPayrollDetailResult = map[int16]string{
	0: "success",
}

func (p *BankSyncBankBusinessPayrollDetailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BankSyncBankBusinessPayrollDetailResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankSyncBankBusinessPayrollDetailResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankSyncBankBusinessPayrollDetailResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewSyncBusinessPayrollResultResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankSyncBankBusinessPayrollDetailResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SyncBankBusinessPayrollDetail_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankSyncBankBusinessPayrollDetailResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BankSyncBankBusinessPayrollDetailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankSyncBankBusinessPayrollDetailResult(%+v)", *p)
}

func (p *BankSyncBankBusinessPayrollDetailResult) DeepEqual(ano *BankSyncBankBusinessPayrollDetailResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BankSyncBankBusinessPayrollDetailResult) Field0DeepEqual(src *SyncBusinessPayrollResultResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BankHandleTransactionDetailReceiptArgs struct {
	BeginDate      string `thrift:"beginDate,1" frugal:"1,default,string" json:"beginDate"`
	EndDate        string `thrift:"endDate,2" frugal:"2,default,string" json:"endDate"`
	OrganizationId int64  `thrift:"organizationId,3" frugal:"3,default,i64" json:"organizationId"`
}

func NewBankHandleTransactionDetailReceiptArgs() *BankHandleTransactionDetailReceiptArgs {
	return &BankHandleTransactionDetailReceiptArgs{}
}

func (p *BankHandleTransactionDetailReceiptArgs) InitDefault() {
	*p = BankHandleTransactionDetailReceiptArgs{}
}

func (p *BankHandleTransactionDetailReceiptArgs) GetBeginDate() (v string) {
	return p.BeginDate
}

func (p *BankHandleTransactionDetailReceiptArgs) GetEndDate() (v string) {
	return p.EndDate
}

func (p *BankHandleTransactionDetailReceiptArgs) GetOrganizationId() (v int64) {
	return p.OrganizationId
}
func (p *BankHandleTransactionDetailReceiptArgs) SetBeginDate(val string) {
	p.BeginDate = val
}
func (p *BankHandleTransactionDetailReceiptArgs) SetEndDate(val string) {
	p.EndDate = val
}
func (p *BankHandleTransactionDetailReceiptArgs) SetOrganizationId(val int64) {
	p.OrganizationId = val
}

var fieldIDToName_BankHandleTransactionDetailReceiptArgs = map[int16]string{
	1: "beginDate",
	2: "endDate",
	3: "organizationId",
}

func (p *BankHandleTransactionDetailReceiptArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankHandleTransactionDetailReceiptArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankHandleTransactionDetailReceiptArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.BeginDate = v
	}
	return nil
}

func (p *BankHandleTransactionDetailReceiptArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.EndDate = v
	}
	return nil
}

func (p *BankHandleTransactionDetailReceiptArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.OrganizationId = v
	}
	return nil
}

func (p *BankHandleTransactionDetailReceiptArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("HandleTransactionDetailReceipt_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankHandleTransactionDetailReceiptArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("beginDate", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.BeginDate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankHandleTransactionDetailReceiptArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("endDate", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.EndDate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BankHandleTransactionDetailReceiptArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("organizationId", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.OrganizationId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *BankHandleTransactionDetailReceiptArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankHandleTransactionDetailReceiptArgs(%+v)", *p)
}

func (p *BankHandleTransactionDetailReceiptArgs) DeepEqual(ano *BankHandleTransactionDetailReceiptArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BeginDate) {
		return false
	}
	if !p.Field2DeepEqual(ano.EndDate) {
		return false
	}
	if !p.Field3DeepEqual(ano.OrganizationId) {
		return false
	}
	return true
}

func (p *BankHandleTransactionDetailReceiptArgs) Field1DeepEqual(src string) bool {

	if strings.Compare(p.BeginDate, src) != 0 {
		return false
	}
	return true
}
func (p *BankHandleTransactionDetailReceiptArgs) Field2DeepEqual(src string) bool {

	if strings.Compare(p.EndDate, src) != 0 {
		return false
	}
	return true
}
func (p *BankHandleTransactionDetailReceiptArgs) Field3DeepEqual(src int64) bool {

	if p.OrganizationId != src {
		return false
	}
	return true
}

type BankHandleTransactionDetailReceiptResult struct {
}

func NewBankHandleTransactionDetailReceiptResult() *BankHandleTransactionDetailReceiptResult {
	return &BankHandleTransactionDetailReceiptResult{}
}

func (p *BankHandleTransactionDetailReceiptResult) InitDefault() {
	*p = BankHandleTransactionDetailReceiptResult{}
}

var fieldIDToName_BankHandleTransactionDetailReceiptResult = map[int16]string{}

func (p *BankHandleTransactionDetailReceiptResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankHandleTransactionDetailReceiptResult) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("HandleTransactionDetailReceipt_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankHandleTransactionDetailReceiptResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankHandleTransactionDetailReceiptResult(%+v)", *p)
}

func (p *BankHandleTransactionDetailReceiptResult) DeepEqual(ano *BankHandleTransactionDetailReceiptResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type BankCreateVirtualAccountArgs struct {
	Req *CreateVirtualAccountRequest `thrift:"req,1" frugal:"1,default,CreateVirtualAccountRequest" json:"req"`
}

func NewBankCreateVirtualAccountArgs() *BankCreateVirtualAccountArgs {
	return &BankCreateVirtualAccountArgs{}
}

func (p *BankCreateVirtualAccountArgs) InitDefault() {
	*p = BankCreateVirtualAccountArgs{}
}

var BankCreateVirtualAccountArgs_Req_DEFAULT *CreateVirtualAccountRequest

func (p *BankCreateVirtualAccountArgs) GetReq() (v *CreateVirtualAccountRequest) {
	if !p.IsSetReq() {
		return BankCreateVirtualAccountArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BankCreateVirtualAccountArgs) SetReq(val *CreateVirtualAccountRequest) {
	p.Req = val
}

var fieldIDToName_BankCreateVirtualAccountArgs = map[int16]string{
	1: "req",
}

func (p *BankCreateVirtualAccountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BankCreateVirtualAccountArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankCreateVirtualAccountArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankCreateVirtualAccountArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewCreateVirtualAccountRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankCreateVirtualAccountArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("createVirtualAccount_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankCreateVirtualAccountArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankCreateVirtualAccountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankCreateVirtualAccountArgs(%+v)", *p)
}

func (p *BankCreateVirtualAccountArgs) DeepEqual(ano *BankCreateVirtualAccountArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BankCreateVirtualAccountArgs) Field1DeepEqual(src *CreateVirtualAccountRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BankCreateVirtualAccountResult struct {
	Success *CreateVirtualAccountResponse `thrift:"success,0,optional" frugal:"0,optional,CreateVirtualAccountResponse" json:"success,omitempty"`
}

func NewBankCreateVirtualAccountResult() *BankCreateVirtualAccountResult {
	return &BankCreateVirtualAccountResult{}
}

func (p *BankCreateVirtualAccountResult) InitDefault() {
	*p = BankCreateVirtualAccountResult{}
}

var BankCreateVirtualAccountResult_Success_DEFAULT *CreateVirtualAccountResponse

func (p *BankCreateVirtualAccountResult) GetSuccess() (v *CreateVirtualAccountResponse) {
	if !p.IsSetSuccess() {
		return BankCreateVirtualAccountResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BankCreateVirtualAccountResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateVirtualAccountResponse)
}

var fieldIDToName_BankCreateVirtualAccountResult = map[int16]string{
	0: "success",
}

func (p *BankCreateVirtualAccountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BankCreateVirtualAccountResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankCreateVirtualAccountResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankCreateVirtualAccountResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewCreateVirtualAccountResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankCreateVirtualAccountResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("createVirtualAccount_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankCreateVirtualAccountResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BankCreateVirtualAccountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankCreateVirtualAccountResult(%+v)", *p)
}

func (p *BankCreateVirtualAccountResult) DeepEqual(ano *BankCreateVirtualAccountResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BankCreateVirtualAccountResult) Field0DeepEqual(src *CreateVirtualAccountResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BankSyncVirtualAccountBalanceArgs struct {
}

func NewBankSyncVirtualAccountBalanceArgs() *BankSyncVirtualAccountBalanceArgs {
	return &BankSyncVirtualAccountBalanceArgs{}
}

func (p *BankSyncVirtualAccountBalanceArgs) InitDefault() {
	*p = BankSyncVirtualAccountBalanceArgs{}
}

var fieldIDToName_BankSyncVirtualAccountBalanceArgs = map[int16]string{}

func (p *BankSyncVirtualAccountBalanceArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankSyncVirtualAccountBalanceArgs) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("SyncVirtualAccountBalance_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankSyncVirtualAccountBalanceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankSyncVirtualAccountBalanceArgs(%+v)", *p)
}

func (p *BankSyncVirtualAccountBalanceArgs) DeepEqual(ano *BankSyncVirtualAccountBalanceArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type BankSyncVirtualAccountBalanceResult struct {
}

func NewBankSyncVirtualAccountBalanceResult() *BankSyncVirtualAccountBalanceResult {
	return &BankSyncVirtualAccountBalanceResult{}
}

func (p *BankSyncVirtualAccountBalanceResult) InitDefault() {
	*p = BankSyncVirtualAccountBalanceResult{}
}

var fieldIDToName_BankSyncVirtualAccountBalanceResult = map[int16]string{}

func (p *BankSyncVirtualAccountBalanceResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankSyncVirtualAccountBalanceResult) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("SyncVirtualAccountBalance_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankSyncVirtualAccountBalanceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankSyncVirtualAccountBalanceResult(%+v)", *p)
}

func (p *BankSyncVirtualAccountBalanceResult) DeepEqual(ano *BankSyncVirtualAccountBalanceResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type BankQueryVirtualAccountBalanceArgs struct {
	OrganizationId int64  `thrift:"organizationId,1" frugal:"1,default,i64" json:"organizationId"`
	BankType       string `thrift:"bankType,2" frugal:"2,default,string" json:"bankType"`
}

func NewBankQueryVirtualAccountBalanceArgs() *BankQueryVirtualAccountBalanceArgs {
	return &BankQueryVirtualAccountBalanceArgs{}
}

func (p *BankQueryVirtualAccountBalanceArgs) InitDefault() {
	*p = BankQueryVirtualAccountBalanceArgs{}
}

func (p *BankQueryVirtualAccountBalanceArgs) GetOrganizationId() (v int64) {
	return p.OrganizationId
}

func (p *BankQueryVirtualAccountBalanceArgs) GetBankType() (v string) {
	return p.BankType
}
func (p *BankQueryVirtualAccountBalanceArgs) SetOrganizationId(val int64) {
	p.OrganizationId = val
}
func (p *BankQueryVirtualAccountBalanceArgs) SetBankType(val string) {
	p.BankType = val
}

var fieldIDToName_BankQueryVirtualAccountBalanceArgs = map[int16]string{
	1: "organizationId",
	2: "bankType",
}

func (p *BankQueryVirtualAccountBalanceArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankQueryVirtualAccountBalanceArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankQueryVirtualAccountBalanceArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.OrganizationId = v
	}
	return nil
}

func (p *BankQueryVirtualAccountBalanceArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.BankType = v
	}
	return nil
}

func (p *BankQueryVirtualAccountBalanceArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryVirtualAccountBalance_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankQueryVirtualAccountBalanceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("organizationId", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.OrganizationId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankQueryVirtualAccountBalanceArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("bankType", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.BankType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BankQueryVirtualAccountBalanceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankQueryVirtualAccountBalanceArgs(%+v)", *p)
}

func (p *BankQueryVirtualAccountBalanceArgs) DeepEqual(ano *BankQueryVirtualAccountBalanceArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.OrganizationId) {
		return false
	}
	if !p.Field2DeepEqual(ano.BankType) {
		return false
	}
	return true
}

func (p *BankQueryVirtualAccountBalanceArgs) Field1DeepEqual(src int64) bool {

	if p.OrganizationId != src {
		return false
	}
	return true
}
func (p *BankQueryVirtualAccountBalanceArgs) Field2DeepEqual(src string) bool {

	if strings.Compare(p.BankType, src) != 0 {
		return false
	}
	return true
}

type BankQueryVirtualAccountBalanceResult struct {
	Success *VirtualAccountBalanceData `thrift:"success,0,optional" frugal:"0,optional,VirtualAccountBalanceData" json:"success,omitempty"`
}

func NewBankQueryVirtualAccountBalanceResult() *BankQueryVirtualAccountBalanceResult {
	return &BankQueryVirtualAccountBalanceResult{}
}

func (p *BankQueryVirtualAccountBalanceResult) InitDefault() {
	*p = BankQueryVirtualAccountBalanceResult{}
}

var BankQueryVirtualAccountBalanceResult_Success_DEFAULT *VirtualAccountBalanceData

func (p *BankQueryVirtualAccountBalanceResult) GetSuccess() (v *VirtualAccountBalanceData) {
	if !p.IsSetSuccess() {
		return BankQueryVirtualAccountBalanceResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BankQueryVirtualAccountBalanceResult) SetSuccess(x interface{}) {
	p.Success = x.(*VirtualAccountBalanceData)
}

var fieldIDToName_BankQueryVirtualAccountBalanceResult = map[int16]string{
	0: "success",
}

func (p *BankQueryVirtualAccountBalanceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BankQueryVirtualAccountBalanceResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankQueryVirtualAccountBalanceResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankQueryVirtualAccountBalanceResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewVirtualAccountBalanceData()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankQueryVirtualAccountBalanceResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryVirtualAccountBalance_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankQueryVirtualAccountBalanceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BankQueryVirtualAccountBalanceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankQueryVirtualAccountBalanceResult(%+v)", *p)
}

func (p *BankQueryVirtualAccountBalanceResult) DeepEqual(ano *BankQueryVirtualAccountBalanceResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BankQueryVirtualAccountBalanceResult) Field0DeepEqual(src *VirtualAccountBalanceData) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BankSpdBankVirtualAccountTranscationArgs struct {
	OrganizationId int64                    `thrift:"organizationId,1" frugal:"1,default,i64" json:"organizationId"`
	Req            *BankTransferReceiptData `thrift:"req,2" frugal:"2,default,BankTransferReceiptData" json:"req"`
}

func NewBankSpdBankVirtualAccountTranscationArgs() *BankSpdBankVirtualAccountTranscationArgs {
	return &BankSpdBankVirtualAccountTranscationArgs{}
}

func (p *BankSpdBankVirtualAccountTranscationArgs) InitDefault() {
	*p = BankSpdBankVirtualAccountTranscationArgs{}
}

func (p *BankSpdBankVirtualAccountTranscationArgs) GetOrganizationId() (v int64) {
	return p.OrganizationId
}

var BankSpdBankVirtualAccountTranscationArgs_Req_DEFAULT *BankTransferReceiptData

func (p *BankSpdBankVirtualAccountTranscationArgs) GetReq() (v *BankTransferReceiptData) {
	if !p.IsSetReq() {
		return BankSpdBankVirtualAccountTranscationArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BankSpdBankVirtualAccountTranscationArgs) SetOrganizationId(val int64) {
	p.OrganizationId = val
}
func (p *BankSpdBankVirtualAccountTranscationArgs) SetReq(val *BankTransferReceiptData) {
	p.Req = val
}

var fieldIDToName_BankSpdBankVirtualAccountTranscationArgs = map[int16]string{
	1: "organizationId",
	2: "req",
}

func (p *BankSpdBankVirtualAccountTranscationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BankSpdBankVirtualAccountTranscationArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankSpdBankVirtualAccountTranscationArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankSpdBankVirtualAccountTranscationArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.OrganizationId = v
	}
	return nil
}

func (p *BankSpdBankVirtualAccountTranscationArgs) ReadField2(iprot thrift.TProtocol) error {
	p.Req = NewBankTransferReceiptData()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankSpdBankVirtualAccountTranscationArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("spdBankVirtualAccountTranscation_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankSpdBankVirtualAccountTranscationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("organizationId", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.OrganizationId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankSpdBankVirtualAccountTranscationArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BankSpdBankVirtualAccountTranscationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankSpdBankVirtualAccountTranscationArgs(%+v)", *p)
}

func (p *BankSpdBankVirtualAccountTranscationArgs) DeepEqual(ano *BankSpdBankVirtualAccountTranscationArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.OrganizationId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BankSpdBankVirtualAccountTranscationArgs) Field1DeepEqual(src int64) bool {

	if p.OrganizationId != src {
		return false
	}
	return true
}
func (p *BankSpdBankVirtualAccountTranscationArgs) Field2DeepEqual(src *BankTransferReceiptData) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BankSpdBankVirtualAccountTranscationResult struct {
	Success *BankVirtualAccountTranscationResponse `thrift:"success,0,optional" frugal:"0,optional,BankVirtualAccountTranscationResponse" json:"success,omitempty"`
}

func NewBankSpdBankVirtualAccountTranscationResult() *BankSpdBankVirtualAccountTranscationResult {
	return &BankSpdBankVirtualAccountTranscationResult{}
}

func (p *BankSpdBankVirtualAccountTranscationResult) InitDefault() {
	*p = BankSpdBankVirtualAccountTranscationResult{}
}

var BankSpdBankVirtualAccountTranscationResult_Success_DEFAULT *BankVirtualAccountTranscationResponse

func (p *BankSpdBankVirtualAccountTranscationResult) GetSuccess() (v *BankVirtualAccountTranscationResponse) {
	if !p.IsSetSuccess() {
		return BankSpdBankVirtualAccountTranscationResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BankSpdBankVirtualAccountTranscationResult) SetSuccess(x interface{}) {
	p.Success = x.(*BankVirtualAccountTranscationResponse)
}

var fieldIDToName_BankSpdBankVirtualAccountTranscationResult = map[int16]string{
	0: "success",
}

func (p *BankSpdBankVirtualAccountTranscationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BankSpdBankVirtualAccountTranscationResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankSpdBankVirtualAccountTranscationResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankSpdBankVirtualAccountTranscationResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewBankVirtualAccountTranscationResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankSpdBankVirtualAccountTranscationResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("spdBankVirtualAccountTranscation_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankSpdBankVirtualAccountTranscationResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BankSpdBankVirtualAccountTranscationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankSpdBankVirtualAccountTranscationResult(%+v)", *p)
}

func (p *BankSpdBankVirtualAccountTranscationResult) DeepEqual(ano *BankSpdBankVirtualAccountTranscationResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BankSpdBankVirtualAccountTranscationResult) Field0DeepEqual(src *BankVirtualAccountTranscationResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BankListPaymentReceiptArgs struct {
	Req *ListPaymentReceiptRequest `thrift:"req,1" frugal:"1,default,ListPaymentReceiptRequest" json:"req"`
}

func NewBankListPaymentReceiptArgs() *BankListPaymentReceiptArgs {
	return &BankListPaymentReceiptArgs{}
}

func (p *BankListPaymentReceiptArgs) InitDefault() {
	*p = BankListPaymentReceiptArgs{}
}

var BankListPaymentReceiptArgs_Req_DEFAULT *ListPaymentReceiptRequest

func (p *BankListPaymentReceiptArgs) GetReq() (v *ListPaymentReceiptRequest) {
	if !p.IsSetReq() {
		return BankListPaymentReceiptArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BankListPaymentReceiptArgs) SetReq(val *ListPaymentReceiptRequest) {
	p.Req = val
}

var fieldIDToName_BankListPaymentReceiptArgs = map[int16]string{
	1: "req",
}

func (p *BankListPaymentReceiptArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BankListPaymentReceiptArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankListPaymentReceiptArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankListPaymentReceiptArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewListPaymentReceiptRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankListPaymentReceiptArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("listPaymentReceipt_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankListPaymentReceiptArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankListPaymentReceiptArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankListPaymentReceiptArgs(%+v)", *p)
}

func (p *BankListPaymentReceiptArgs) DeepEqual(ano *BankListPaymentReceiptArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BankListPaymentReceiptArgs) Field1DeepEqual(src *ListPaymentReceiptRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BankListPaymentReceiptResult struct {
	Success *ListPaymentReceiptResponse `thrift:"success,0,optional" frugal:"0,optional,ListPaymentReceiptResponse" json:"success,omitempty"`
}

func NewBankListPaymentReceiptResult() *BankListPaymentReceiptResult {
	return &BankListPaymentReceiptResult{}
}

func (p *BankListPaymentReceiptResult) InitDefault() {
	*p = BankListPaymentReceiptResult{}
}

var BankListPaymentReceiptResult_Success_DEFAULT *ListPaymentReceiptResponse

func (p *BankListPaymentReceiptResult) GetSuccess() (v *ListPaymentReceiptResponse) {
	if !p.IsSetSuccess() {
		return BankListPaymentReceiptResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BankListPaymentReceiptResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListPaymentReceiptResponse)
}

var fieldIDToName_BankListPaymentReceiptResult = map[int16]string{
	0: "success",
}

func (p *BankListPaymentReceiptResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BankListPaymentReceiptResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankListPaymentReceiptResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankListPaymentReceiptResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewListPaymentReceiptResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankListPaymentReceiptResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("listPaymentReceipt_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankListPaymentReceiptResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BankListPaymentReceiptResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankListPaymentReceiptResult(%+v)", *p)
}

func (p *BankListPaymentReceiptResult) DeepEqual(ano *BankListPaymentReceiptResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BankListPaymentReceiptResult) Field0DeepEqual(src *ListPaymentReceiptResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BankGetPaymentReceiptArgs struct {
	Id int64 `thrift:"id,1" frugal:"1,default,i64" json:"id"`
}

func NewBankGetPaymentReceiptArgs() *BankGetPaymentReceiptArgs {
	return &BankGetPaymentReceiptArgs{}
}

func (p *BankGetPaymentReceiptArgs) InitDefault() {
	*p = BankGetPaymentReceiptArgs{}
}

func (p *BankGetPaymentReceiptArgs) GetId() (v int64) {
	return p.Id
}
func (p *BankGetPaymentReceiptArgs) SetId(val int64) {
	p.Id = val
}

var fieldIDToName_BankGetPaymentReceiptArgs = map[int16]string{
	1: "id",
}

func (p *BankGetPaymentReceiptArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankGetPaymentReceiptArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankGetPaymentReceiptArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *BankGetPaymentReceiptArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("getPaymentReceipt_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankGetPaymentReceiptArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankGetPaymentReceiptArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankGetPaymentReceiptArgs(%+v)", *p)
}

func (p *BankGetPaymentReceiptArgs) DeepEqual(ano *BankGetPaymentReceiptArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *BankGetPaymentReceiptArgs) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}

type BankGetPaymentReceiptResult struct {
	Success *PaymentReceiptData `thrift:"success,0,optional" frugal:"0,optional,PaymentReceiptData" json:"success,omitempty"`
}

func NewBankGetPaymentReceiptResult() *BankGetPaymentReceiptResult {
	return &BankGetPaymentReceiptResult{}
}

func (p *BankGetPaymentReceiptResult) InitDefault() {
	*p = BankGetPaymentReceiptResult{}
}

var BankGetPaymentReceiptResult_Success_DEFAULT *PaymentReceiptData

func (p *BankGetPaymentReceiptResult) GetSuccess() (v *PaymentReceiptData) {
	if !p.IsSetSuccess() {
		return BankGetPaymentReceiptResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BankGetPaymentReceiptResult) SetSuccess(x interface{}) {
	p.Success = x.(*PaymentReceiptData)
}

var fieldIDToName_BankGetPaymentReceiptResult = map[int16]string{
	0: "success",
}

func (p *BankGetPaymentReceiptResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BankGetPaymentReceiptResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankGetPaymentReceiptResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankGetPaymentReceiptResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewPaymentReceiptData()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankGetPaymentReceiptResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("getPaymentReceipt_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankGetPaymentReceiptResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BankGetPaymentReceiptResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankGetPaymentReceiptResult(%+v)", *p)
}

func (p *BankGetPaymentReceiptResult) DeepEqual(ano *BankGetPaymentReceiptResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BankGetPaymentReceiptResult) Field0DeepEqual(src *PaymentReceiptData) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BankSimpleGetPaymentReceiptArgs struct {
	Id int64 `thrift:"id,1" frugal:"1,default,i64" json:"id"`
}

func NewBankSimpleGetPaymentReceiptArgs() *BankSimpleGetPaymentReceiptArgs {
	return &BankSimpleGetPaymentReceiptArgs{}
}

func (p *BankSimpleGetPaymentReceiptArgs) InitDefault() {
	*p = BankSimpleGetPaymentReceiptArgs{}
}

func (p *BankSimpleGetPaymentReceiptArgs) GetId() (v int64) {
	return p.Id
}
func (p *BankSimpleGetPaymentReceiptArgs) SetId(val int64) {
	p.Id = val
}

var fieldIDToName_BankSimpleGetPaymentReceiptArgs = map[int16]string{
	1: "id",
}

func (p *BankSimpleGetPaymentReceiptArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankSimpleGetPaymentReceiptArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankSimpleGetPaymentReceiptArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *BankSimpleGetPaymentReceiptArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("simpleGetPaymentReceipt_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankSimpleGetPaymentReceiptArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankSimpleGetPaymentReceiptArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankSimpleGetPaymentReceiptArgs(%+v)", *p)
}

func (p *BankSimpleGetPaymentReceiptArgs) DeepEqual(ano *BankSimpleGetPaymentReceiptArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *BankSimpleGetPaymentReceiptArgs) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}

type BankSimpleGetPaymentReceiptResult struct {
	Success *PaymentReceiptData `thrift:"success,0,optional" frugal:"0,optional,PaymentReceiptData" json:"success,omitempty"`
}

func NewBankSimpleGetPaymentReceiptResult() *BankSimpleGetPaymentReceiptResult {
	return &BankSimpleGetPaymentReceiptResult{}
}

func (p *BankSimpleGetPaymentReceiptResult) InitDefault() {
	*p = BankSimpleGetPaymentReceiptResult{}
}

var BankSimpleGetPaymentReceiptResult_Success_DEFAULT *PaymentReceiptData

func (p *BankSimpleGetPaymentReceiptResult) GetSuccess() (v *PaymentReceiptData) {
	if !p.IsSetSuccess() {
		return BankSimpleGetPaymentReceiptResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BankSimpleGetPaymentReceiptResult) SetSuccess(x interface{}) {
	p.Success = x.(*PaymentReceiptData)
}

var fieldIDToName_BankSimpleGetPaymentReceiptResult = map[int16]string{
	0: "success",
}

func (p *BankSimpleGetPaymentReceiptResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BankSimpleGetPaymentReceiptResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankSimpleGetPaymentReceiptResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankSimpleGetPaymentReceiptResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewPaymentReceiptData()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankSimpleGetPaymentReceiptResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("simpleGetPaymentReceipt_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankSimpleGetPaymentReceiptResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BankSimpleGetPaymentReceiptResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankSimpleGetPaymentReceiptResult(%+v)", *p)
}

func (p *BankSimpleGetPaymentReceiptResult) DeepEqual(ano *BankSimpleGetPaymentReceiptResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BankSimpleGetPaymentReceiptResult) Field0DeepEqual(src *PaymentReceiptData) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BankSimpleGetPaymentReceiptByProcessInstanceIdArgs struct {
	Id int64 `thrift:"id,1" frugal:"1,default,i64" json:"id"`
}

func NewBankSimpleGetPaymentReceiptByProcessInstanceIdArgs() *BankSimpleGetPaymentReceiptByProcessInstanceIdArgs {
	return &BankSimpleGetPaymentReceiptByProcessInstanceIdArgs{}
}

func (p *BankSimpleGetPaymentReceiptByProcessInstanceIdArgs) InitDefault() {
	*p = BankSimpleGetPaymentReceiptByProcessInstanceIdArgs{}
}

func (p *BankSimpleGetPaymentReceiptByProcessInstanceIdArgs) GetId() (v int64) {
	return p.Id
}
func (p *BankSimpleGetPaymentReceiptByProcessInstanceIdArgs) SetId(val int64) {
	p.Id = val
}

var fieldIDToName_BankSimpleGetPaymentReceiptByProcessInstanceIdArgs = map[int16]string{
	1: "id",
}

func (p *BankSimpleGetPaymentReceiptByProcessInstanceIdArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankSimpleGetPaymentReceiptByProcessInstanceIdArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankSimpleGetPaymentReceiptByProcessInstanceIdArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *BankSimpleGetPaymentReceiptByProcessInstanceIdArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("simpleGetPaymentReceiptByProcessInstanceId_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankSimpleGetPaymentReceiptByProcessInstanceIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankSimpleGetPaymentReceiptByProcessInstanceIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankSimpleGetPaymentReceiptByProcessInstanceIdArgs(%+v)", *p)
}

func (p *BankSimpleGetPaymentReceiptByProcessInstanceIdArgs) DeepEqual(ano *BankSimpleGetPaymentReceiptByProcessInstanceIdArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *BankSimpleGetPaymentReceiptByProcessInstanceIdArgs) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}

type BankSimpleGetPaymentReceiptByProcessInstanceIdResult struct {
	Success *PaymentReceiptData `thrift:"success,0,optional" frugal:"0,optional,PaymentReceiptData" json:"success,omitempty"`
}

func NewBankSimpleGetPaymentReceiptByProcessInstanceIdResult() *BankSimpleGetPaymentReceiptByProcessInstanceIdResult {
	return &BankSimpleGetPaymentReceiptByProcessInstanceIdResult{}
}

func (p *BankSimpleGetPaymentReceiptByProcessInstanceIdResult) InitDefault() {
	*p = BankSimpleGetPaymentReceiptByProcessInstanceIdResult{}
}

var BankSimpleGetPaymentReceiptByProcessInstanceIdResult_Success_DEFAULT *PaymentReceiptData

func (p *BankSimpleGetPaymentReceiptByProcessInstanceIdResult) GetSuccess() (v *PaymentReceiptData) {
	if !p.IsSetSuccess() {
		return BankSimpleGetPaymentReceiptByProcessInstanceIdResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BankSimpleGetPaymentReceiptByProcessInstanceIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*PaymentReceiptData)
}

var fieldIDToName_BankSimpleGetPaymentReceiptByProcessInstanceIdResult = map[int16]string{
	0: "success",
}

func (p *BankSimpleGetPaymentReceiptByProcessInstanceIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BankSimpleGetPaymentReceiptByProcessInstanceIdResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankSimpleGetPaymentReceiptByProcessInstanceIdResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankSimpleGetPaymentReceiptByProcessInstanceIdResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewPaymentReceiptData()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankSimpleGetPaymentReceiptByProcessInstanceIdResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("simpleGetPaymentReceiptByProcessInstanceId_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankSimpleGetPaymentReceiptByProcessInstanceIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BankSimpleGetPaymentReceiptByProcessInstanceIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankSimpleGetPaymentReceiptByProcessInstanceIdResult(%+v)", *p)
}

func (p *BankSimpleGetPaymentReceiptByProcessInstanceIdResult) DeepEqual(ano *BankSimpleGetPaymentReceiptByProcessInstanceIdResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BankSimpleGetPaymentReceiptByProcessInstanceIdResult) Field0DeepEqual(src *PaymentReceiptData) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BankAddPaymentReceiptArgs struct {
	Req *PaymentReceiptData `thrift:"req,1" frugal:"1,default,PaymentReceiptData" json:"req"`
}

func NewBankAddPaymentReceiptArgs() *BankAddPaymentReceiptArgs {
	return &BankAddPaymentReceiptArgs{}
}

func (p *BankAddPaymentReceiptArgs) InitDefault() {
	*p = BankAddPaymentReceiptArgs{}
}

var BankAddPaymentReceiptArgs_Req_DEFAULT *PaymentReceiptData

func (p *BankAddPaymentReceiptArgs) GetReq() (v *PaymentReceiptData) {
	if !p.IsSetReq() {
		return BankAddPaymentReceiptArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BankAddPaymentReceiptArgs) SetReq(val *PaymentReceiptData) {
	p.Req = val
}

var fieldIDToName_BankAddPaymentReceiptArgs = map[int16]string{
	1: "req",
}

func (p *BankAddPaymentReceiptArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BankAddPaymentReceiptArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankAddPaymentReceiptArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankAddPaymentReceiptArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewPaymentReceiptData()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankAddPaymentReceiptArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("addPaymentReceipt_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankAddPaymentReceiptArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankAddPaymentReceiptArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankAddPaymentReceiptArgs(%+v)", *p)
}

func (p *BankAddPaymentReceiptArgs) DeepEqual(ano *BankAddPaymentReceiptArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BankAddPaymentReceiptArgs) Field1DeepEqual(src *PaymentReceiptData) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BankAddPaymentReceiptResult struct {
}

func NewBankAddPaymentReceiptResult() *BankAddPaymentReceiptResult {
	return &BankAddPaymentReceiptResult{}
}

func (p *BankAddPaymentReceiptResult) InitDefault() {
	*p = BankAddPaymentReceiptResult{}
}

var fieldIDToName_BankAddPaymentReceiptResult = map[int16]string{}

func (p *BankAddPaymentReceiptResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankAddPaymentReceiptResult) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("addPaymentReceipt_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankAddPaymentReceiptResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankAddPaymentReceiptResult(%+v)", *p)
}

func (p *BankAddPaymentReceiptResult) DeepEqual(ano *BankAddPaymentReceiptResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type BankApprovePaymentReceiptArgs struct {
	Id  int64               `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	Req *PaymentReceiptData `thrift:"req,2" frugal:"2,default,PaymentReceiptData" json:"req"`
}

func NewBankApprovePaymentReceiptArgs() *BankApprovePaymentReceiptArgs {
	return &BankApprovePaymentReceiptArgs{}
}

func (p *BankApprovePaymentReceiptArgs) InitDefault() {
	*p = BankApprovePaymentReceiptArgs{}
}

func (p *BankApprovePaymentReceiptArgs) GetId() (v int64) {
	return p.Id
}

var BankApprovePaymentReceiptArgs_Req_DEFAULT *PaymentReceiptData

func (p *BankApprovePaymentReceiptArgs) GetReq() (v *PaymentReceiptData) {
	if !p.IsSetReq() {
		return BankApprovePaymentReceiptArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BankApprovePaymentReceiptArgs) SetId(val int64) {
	p.Id = val
}
func (p *BankApprovePaymentReceiptArgs) SetReq(val *PaymentReceiptData) {
	p.Req = val
}

var fieldIDToName_BankApprovePaymentReceiptArgs = map[int16]string{
	1: "id",
	2: "req",
}

func (p *BankApprovePaymentReceiptArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BankApprovePaymentReceiptArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankApprovePaymentReceiptArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankApprovePaymentReceiptArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *BankApprovePaymentReceiptArgs) ReadField2(iprot thrift.TProtocol) error {
	p.Req = NewPaymentReceiptData()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankApprovePaymentReceiptArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("approvePaymentReceipt_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankApprovePaymentReceiptArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankApprovePaymentReceiptArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BankApprovePaymentReceiptArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankApprovePaymentReceiptArgs(%+v)", *p)
}

func (p *BankApprovePaymentReceiptArgs) DeepEqual(ano *BankApprovePaymentReceiptArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BankApprovePaymentReceiptArgs) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *BankApprovePaymentReceiptArgs) Field2DeepEqual(src *PaymentReceiptData) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BankApprovePaymentReceiptResult struct {
}

func NewBankApprovePaymentReceiptResult() *BankApprovePaymentReceiptResult {
	return &BankApprovePaymentReceiptResult{}
}

func (p *BankApprovePaymentReceiptResult) InitDefault() {
	*p = BankApprovePaymentReceiptResult{}
}

var fieldIDToName_BankApprovePaymentReceiptResult = map[int16]string{}

func (p *BankApprovePaymentReceiptResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankApprovePaymentReceiptResult) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("approvePaymentReceipt_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankApprovePaymentReceiptResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankApprovePaymentReceiptResult(%+v)", *p)
}

func (p *BankApprovePaymentReceiptResult) DeepEqual(ano *BankApprovePaymentReceiptResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type BankRefusePaymentReceiptArgs struct {
	Id     int64               `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	Req    *PaymentReceiptData `thrift:"req,2" frugal:"2,default,PaymentReceiptData" json:"req"`
	Remark string              `thrift:"remark,3" frugal:"3,default,string" json:"remark"`
}

func NewBankRefusePaymentReceiptArgs() *BankRefusePaymentReceiptArgs {
	return &BankRefusePaymentReceiptArgs{}
}

func (p *BankRefusePaymentReceiptArgs) InitDefault() {
	*p = BankRefusePaymentReceiptArgs{}
}

func (p *BankRefusePaymentReceiptArgs) GetId() (v int64) {
	return p.Id
}

var BankRefusePaymentReceiptArgs_Req_DEFAULT *PaymentReceiptData

func (p *BankRefusePaymentReceiptArgs) GetReq() (v *PaymentReceiptData) {
	if !p.IsSetReq() {
		return BankRefusePaymentReceiptArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *BankRefusePaymentReceiptArgs) GetRemark() (v string) {
	return p.Remark
}
func (p *BankRefusePaymentReceiptArgs) SetId(val int64) {
	p.Id = val
}
func (p *BankRefusePaymentReceiptArgs) SetReq(val *PaymentReceiptData) {
	p.Req = val
}
func (p *BankRefusePaymentReceiptArgs) SetRemark(val string) {
	p.Remark = val
}

var fieldIDToName_BankRefusePaymentReceiptArgs = map[int16]string{
	1: "id",
	2: "req",
	3: "remark",
}

func (p *BankRefusePaymentReceiptArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BankRefusePaymentReceiptArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankRefusePaymentReceiptArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankRefusePaymentReceiptArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *BankRefusePaymentReceiptArgs) ReadField2(iprot thrift.TProtocol) error {
	p.Req = NewPaymentReceiptData()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankRefusePaymentReceiptArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Remark = v
	}
	return nil
}

func (p *BankRefusePaymentReceiptArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("refusePaymentReceipt_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankRefusePaymentReceiptArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankRefusePaymentReceiptArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BankRefusePaymentReceiptArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("remark", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Remark); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *BankRefusePaymentReceiptArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankRefusePaymentReceiptArgs(%+v)", *p)
}

func (p *BankRefusePaymentReceiptArgs) DeepEqual(ano *BankRefusePaymentReceiptArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Req) {
		return false
	}
	if !p.Field3DeepEqual(ano.Remark) {
		return false
	}
	return true
}

func (p *BankRefusePaymentReceiptArgs) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *BankRefusePaymentReceiptArgs) Field2DeepEqual(src *PaymentReceiptData) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}
func (p *BankRefusePaymentReceiptArgs) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Remark, src) != 0 {
		return false
	}
	return true
}

type BankRefusePaymentReceiptResult struct {
}

func NewBankRefusePaymentReceiptResult() *BankRefusePaymentReceiptResult {
	return &BankRefusePaymentReceiptResult{}
}

func (p *BankRefusePaymentReceiptResult) InitDefault() {
	*p = BankRefusePaymentReceiptResult{}
}

var fieldIDToName_BankRefusePaymentReceiptResult = map[int16]string{}

func (p *BankRefusePaymentReceiptResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankRefusePaymentReceiptResult) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("refusePaymentReceipt_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankRefusePaymentReceiptResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankRefusePaymentReceiptResult(%+v)", *p)
}

func (p *BankRefusePaymentReceiptResult) DeepEqual(ano *BankRefusePaymentReceiptResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type BankPaymentReceiptRunArgs struct {
	Id int64 `thrift:"id,1" frugal:"1,default,i64" json:"id"`
}

func NewBankPaymentReceiptRunArgs() *BankPaymentReceiptRunArgs {
	return &BankPaymentReceiptRunArgs{}
}

func (p *BankPaymentReceiptRunArgs) InitDefault() {
	*p = BankPaymentReceiptRunArgs{}
}

func (p *BankPaymentReceiptRunArgs) GetId() (v int64) {
	return p.Id
}
func (p *BankPaymentReceiptRunArgs) SetId(val int64) {
	p.Id = val
}

var fieldIDToName_BankPaymentReceiptRunArgs = map[int16]string{
	1: "id",
}

func (p *BankPaymentReceiptRunArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankPaymentReceiptRunArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankPaymentReceiptRunArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *BankPaymentReceiptRunArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("paymentReceiptRun_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankPaymentReceiptRunArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankPaymentReceiptRunArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankPaymentReceiptRunArgs(%+v)", *p)
}

func (p *BankPaymentReceiptRunArgs) DeepEqual(ano *BankPaymentReceiptRunArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *BankPaymentReceiptRunArgs) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}

type BankPaymentReceiptRunResult struct {
}

func NewBankPaymentReceiptRunResult() *BankPaymentReceiptRunResult {
	return &BankPaymentReceiptRunResult{}
}

func (p *BankPaymentReceiptRunResult) InitDefault() {
	*p = BankPaymentReceiptRunResult{}
}

var fieldIDToName_BankPaymentReceiptRunResult = map[int16]string{}

func (p *BankPaymentReceiptRunResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankPaymentReceiptRunResult) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("paymentReceiptRun_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankPaymentReceiptRunResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankPaymentReceiptRunResult(%+v)", *p)
}

func (p *BankPaymentReceiptRunResult) DeepEqual(ano *BankPaymentReceiptRunResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type BankTransmitPaymentReceiptArgs struct {
	ProcessInstanceId int64 `thrift:"processInstanceId,1" frugal:"1,default,i64" json:"processInstanceId"`
	TransmitUserId    int64 `thrift:"transmitUserId,2" frugal:"2,default,i64" json:"transmitUserId"`
}

func NewBankTransmitPaymentReceiptArgs() *BankTransmitPaymentReceiptArgs {
	return &BankTransmitPaymentReceiptArgs{}
}

func (p *BankTransmitPaymentReceiptArgs) InitDefault() {
	*p = BankTransmitPaymentReceiptArgs{}
}

func (p *BankTransmitPaymentReceiptArgs) GetProcessInstanceId() (v int64) {
	return p.ProcessInstanceId
}

func (p *BankTransmitPaymentReceiptArgs) GetTransmitUserId() (v int64) {
	return p.TransmitUserId
}
func (p *BankTransmitPaymentReceiptArgs) SetProcessInstanceId(val int64) {
	p.ProcessInstanceId = val
}
func (p *BankTransmitPaymentReceiptArgs) SetTransmitUserId(val int64) {
	p.TransmitUserId = val
}

var fieldIDToName_BankTransmitPaymentReceiptArgs = map[int16]string{
	1: "processInstanceId",
	2: "transmitUserId",
}

func (p *BankTransmitPaymentReceiptArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankTransmitPaymentReceiptArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankTransmitPaymentReceiptArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ProcessInstanceId = v
	}
	return nil
}

func (p *BankTransmitPaymentReceiptArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.TransmitUserId = v
	}
	return nil
}

func (p *BankTransmitPaymentReceiptArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("transmitPaymentReceipt_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankTransmitPaymentReceiptArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("processInstanceId", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ProcessInstanceId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankTransmitPaymentReceiptArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("transmitUserId", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TransmitUserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BankTransmitPaymentReceiptArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankTransmitPaymentReceiptArgs(%+v)", *p)
}

func (p *BankTransmitPaymentReceiptArgs) DeepEqual(ano *BankTransmitPaymentReceiptArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ProcessInstanceId) {
		return false
	}
	if !p.Field2DeepEqual(ano.TransmitUserId) {
		return false
	}
	return true
}

func (p *BankTransmitPaymentReceiptArgs) Field1DeepEqual(src int64) bool {

	if p.ProcessInstanceId != src {
		return false
	}
	return true
}
func (p *BankTransmitPaymentReceiptArgs) Field2DeepEqual(src int64) bool {

	if p.TransmitUserId != src {
		return false
	}
	return true
}

type BankTransmitPaymentReceiptResult struct {
}

func NewBankTransmitPaymentReceiptResult() *BankTransmitPaymentReceiptResult {
	return &BankTransmitPaymentReceiptResult{}
}

func (p *BankTransmitPaymentReceiptResult) InitDefault() {
	*p = BankTransmitPaymentReceiptResult{}
}

var fieldIDToName_BankTransmitPaymentReceiptResult = map[int16]string{}

func (p *BankTransmitPaymentReceiptResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankTransmitPaymentReceiptResult) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("transmitPaymentReceipt_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankTransmitPaymentReceiptResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankTransmitPaymentReceiptResult(%+v)", *p)
}

func (p *BankTransmitPaymentReceiptResult) DeepEqual(ano *BankTransmitPaymentReceiptResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type BankSendBackPaymentApplicationArgs struct {
	Id     int64               `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	Req    *PaymentReceiptData `thrift:"req,2" frugal:"2,default,PaymentReceiptData" json:"req"`
	Remark string              `thrift:"remark,3" frugal:"3,default,string" json:"remark"`
}

func NewBankSendBackPaymentApplicationArgs() *BankSendBackPaymentApplicationArgs {
	return &BankSendBackPaymentApplicationArgs{}
}

func (p *BankSendBackPaymentApplicationArgs) InitDefault() {
	*p = BankSendBackPaymentApplicationArgs{}
}

func (p *BankSendBackPaymentApplicationArgs) GetId() (v int64) {
	return p.Id
}

var BankSendBackPaymentApplicationArgs_Req_DEFAULT *PaymentReceiptData

func (p *BankSendBackPaymentApplicationArgs) GetReq() (v *PaymentReceiptData) {
	if !p.IsSetReq() {
		return BankSendBackPaymentApplicationArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *BankSendBackPaymentApplicationArgs) GetRemark() (v string) {
	return p.Remark
}
func (p *BankSendBackPaymentApplicationArgs) SetId(val int64) {
	p.Id = val
}
func (p *BankSendBackPaymentApplicationArgs) SetReq(val *PaymentReceiptData) {
	p.Req = val
}
func (p *BankSendBackPaymentApplicationArgs) SetRemark(val string) {
	p.Remark = val
}

var fieldIDToName_BankSendBackPaymentApplicationArgs = map[int16]string{
	1: "id",
	2: "req",
	3: "remark",
}

func (p *BankSendBackPaymentApplicationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BankSendBackPaymentApplicationArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankSendBackPaymentApplicationArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankSendBackPaymentApplicationArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *BankSendBackPaymentApplicationArgs) ReadField2(iprot thrift.TProtocol) error {
	p.Req = NewPaymentReceiptData()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankSendBackPaymentApplicationArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Remark = v
	}
	return nil
}

func (p *BankSendBackPaymentApplicationArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("sendBackPaymentApplication_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankSendBackPaymentApplicationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankSendBackPaymentApplicationArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BankSendBackPaymentApplicationArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("remark", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Remark); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *BankSendBackPaymentApplicationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankSendBackPaymentApplicationArgs(%+v)", *p)
}

func (p *BankSendBackPaymentApplicationArgs) DeepEqual(ano *BankSendBackPaymentApplicationArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Req) {
		return false
	}
	if !p.Field3DeepEqual(ano.Remark) {
		return false
	}
	return true
}

func (p *BankSendBackPaymentApplicationArgs) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *BankSendBackPaymentApplicationArgs) Field2DeepEqual(src *PaymentReceiptData) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}
func (p *BankSendBackPaymentApplicationArgs) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Remark, src) != 0 {
		return false
	}
	return true
}

type BankSendBackPaymentApplicationResult struct {
}

func NewBankSendBackPaymentApplicationResult() *BankSendBackPaymentApplicationResult {
	return &BankSendBackPaymentApplicationResult{}
}

func (p *BankSendBackPaymentApplicationResult) InitDefault() {
	*p = BankSendBackPaymentApplicationResult{}
}

var fieldIDToName_BankSendBackPaymentApplicationResult = map[int16]string{}

func (p *BankSendBackPaymentApplicationResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankSendBackPaymentApplicationResult) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("sendBackPaymentApplication_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankSendBackPaymentApplicationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankSendBackPaymentApplicationResult(%+v)", *p)
}

func (p *BankSendBackPaymentApplicationResult) DeepEqual(ano *BankSendBackPaymentApplicationResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type BankWithDrawPaymentReceiptArgs struct {
	Id  int64               `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	Req *PaymentReceiptData `thrift:"req,2" frugal:"2,default,PaymentReceiptData" json:"req"`
}

func NewBankWithDrawPaymentReceiptArgs() *BankWithDrawPaymentReceiptArgs {
	return &BankWithDrawPaymentReceiptArgs{}
}

func (p *BankWithDrawPaymentReceiptArgs) InitDefault() {
	*p = BankWithDrawPaymentReceiptArgs{}
}

func (p *BankWithDrawPaymentReceiptArgs) GetId() (v int64) {
	return p.Id
}

var BankWithDrawPaymentReceiptArgs_Req_DEFAULT *PaymentReceiptData

func (p *BankWithDrawPaymentReceiptArgs) GetReq() (v *PaymentReceiptData) {
	if !p.IsSetReq() {
		return BankWithDrawPaymentReceiptArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BankWithDrawPaymentReceiptArgs) SetId(val int64) {
	p.Id = val
}
func (p *BankWithDrawPaymentReceiptArgs) SetReq(val *PaymentReceiptData) {
	p.Req = val
}

var fieldIDToName_BankWithDrawPaymentReceiptArgs = map[int16]string{
	1: "id",
	2: "req",
}

func (p *BankWithDrawPaymentReceiptArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BankWithDrawPaymentReceiptArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankWithDrawPaymentReceiptArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankWithDrawPaymentReceiptArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *BankWithDrawPaymentReceiptArgs) ReadField2(iprot thrift.TProtocol) error {
	p.Req = NewPaymentReceiptData()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankWithDrawPaymentReceiptArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("withDrawPaymentReceipt_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankWithDrawPaymentReceiptArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankWithDrawPaymentReceiptArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BankWithDrawPaymentReceiptArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankWithDrawPaymentReceiptArgs(%+v)", *p)
}

func (p *BankWithDrawPaymentReceiptArgs) DeepEqual(ano *BankWithDrawPaymentReceiptArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BankWithDrawPaymentReceiptArgs) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *BankWithDrawPaymentReceiptArgs) Field2DeepEqual(src *PaymentReceiptData) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BankWithDrawPaymentReceiptResult struct {
}

func NewBankWithDrawPaymentReceiptResult() *BankWithDrawPaymentReceiptResult {
	return &BankWithDrawPaymentReceiptResult{}
}

func (p *BankWithDrawPaymentReceiptResult) InitDefault() {
	*p = BankWithDrawPaymentReceiptResult{}
}

var fieldIDToName_BankWithDrawPaymentReceiptResult = map[int16]string{}

func (p *BankWithDrawPaymentReceiptResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankWithDrawPaymentReceiptResult) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("withDrawPaymentReceipt_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankWithDrawPaymentReceiptResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankWithDrawPaymentReceiptResult(%+v)", *p)
}

func (p *BankWithDrawPaymentReceiptResult) DeepEqual(ano *BankWithDrawPaymentReceiptResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type BankCommentPaymentReceiptArgs struct {
	Req *PaymentReceiptData `thrift:"req,1" frugal:"1,default,PaymentReceiptData" json:"req"`
}

func NewBankCommentPaymentReceiptArgs() *BankCommentPaymentReceiptArgs {
	return &BankCommentPaymentReceiptArgs{}
}

func (p *BankCommentPaymentReceiptArgs) InitDefault() {
	*p = BankCommentPaymentReceiptArgs{}
}

var BankCommentPaymentReceiptArgs_Req_DEFAULT *PaymentReceiptData

func (p *BankCommentPaymentReceiptArgs) GetReq() (v *PaymentReceiptData) {
	if !p.IsSetReq() {
		return BankCommentPaymentReceiptArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BankCommentPaymentReceiptArgs) SetReq(val *PaymentReceiptData) {
	p.Req = val
}

var fieldIDToName_BankCommentPaymentReceiptArgs = map[int16]string{
	1: "req",
}

func (p *BankCommentPaymentReceiptArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BankCommentPaymentReceiptArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankCommentPaymentReceiptArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankCommentPaymentReceiptArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewPaymentReceiptData()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankCommentPaymentReceiptArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("commentPaymentReceipt_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankCommentPaymentReceiptArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankCommentPaymentReceiptArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankCommentPaymentReceiptArgs(%+v)", *p)
}

func (p *BankCommentPaymentReceiptArgs) DeepEqual(ano *BankCommentPaymentReceiptArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BankCommentPaymentReceiptArgs) Field1DeepEqual(src *PaymentReceiptData) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BankCommentPaymentReceiptResult struct {
}

func NewBankCommentPaymentReceiptResult() *BankCommentPaymentReceiptResult {
	return &BankCommentPaymentReceiptResult{}
}

func (p *BankCommentPaymentReceiptResult) InitDefault() {
	*p = BankCommentPaymentReceiptResult{}
}

var fieldIDToName_BankCommentPaymentReceiptResult = map[int16]string{}

func (p *BankCommentPaymentReceiptResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankCommentPaymentReceiptResult) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("commentPaymentReceipt_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankCommentPaymentReceiptResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankCommentPaymentReceiptResult(%+v)", *p)
}

func (p *BankCommentPaymentReceiptResult) DeepEqual(ano *BankCommentPaymentReceiptResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type BankAddTagPaymentReceiptArgs struct {
	Req *PaymentReceiptData `thrift:"req,1" frugal:"1,default,PaymentReceiptData" json:"req"`
}

func NewBankAddTagPaymentReceiptArgs() *BankAddTagPaymentReceiptArgs {
	return &BankAddTagPaymentReceiptArgs{}
}

func (p *BankAddTagPaymentReceiptArgs) InitDefault() {
	*p = BankAddTagPaymentReceiptArgs{}
}

var BankAddTagPaymentReceiptArgs_Req_DEFAULT *PaymentReceiptData

func (p *BankAddTagPaymentReceiptArgs) GetReq() (v *PaymentReceiptData) {
	if !p.IsSetReq() {
		return BankAddTagPaymentReceiptArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BankAddTagPaymentReceiptArgs) SetReq(val *PaymentReceiptData) {
	p.Req = val
}

var fieldIDToName_BankAddTagPaymentReceiptArgs = map[int16]string{
	1: "req",
}

func (p *BankAddTagPaymentReceiptArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BankAddTagPaymentReceiptArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankAddTagPaymentReceiptArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankAddTagPaymentReceiptArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewPaymentReceiptData()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankAddTagPaymentReceiptArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("addTagPaymentReceipt_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankAddTagPaymentReceiptArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankAddTagPaymentReceiptArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankAddTagPaymentReceiptArgs(%+v)", *p)
}

func (p *BankAddTagPaymentReceiptArgs) DeepEqual(ano *BankAddTagPaymentReceiptArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BankAddTagPaymentReceiptArgs) Field1DeepEqual(src *PaymentReceiptData) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BankAddTagPaymentReceiptResult struct {
}

func NewBankAddTagPaymentReceiptResult() *BankAddTagPaymentReceiptResult {
	return &BankAddTagPaymentReceiptResult{}
}

func (p *BankAddTagPaymentReceiptResult) InitDefault() {
	*p = BankAddTagPaymentReceiptResult{}
}

var fieldIDToName_BankAddTagPaymentReceiptResult = map[int16]string{}

func (p *BankAddTagPaymentReceiptResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankAddTagPaymentReceiptResult) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("addTagPaymentReceipt_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankAddTagPaymentReceiptResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankAddTagPaymentReceiptResult(%+v)", *p)
}

func (p *BankAddTagPaymentReceiptResult) DeepEqual(ano *BankAddTagPaymentReceiptResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type BankHandleSyncPaymentReceiptArgs struct {
	BeginDate      string `thrift:"beginDate,1" frugal:"1,default,string" json:"beginDate"`
	EndDate        string `thrift:"endDate,2" frugal:"2,default,string" json:"endDate"`
	OrganizationId int64  `thrift:"organizationId,3" frugal:"3,default,i64" json:"organizationId"`
}

func NewBankHandleSyncPaymentReceiptArgs() *BankHandleSyncPaymentReceiptArgs {
	return &BankHandleSyncPaymentReceiptArgs{}
}

func (p *BankHandleSyncPaymentReceiptArgs) InitDefault() {
	*p = BankHandleSyncPaymentReceiptArgs{}
}

func (p *BankHandleSyncPaymentReceiptArgs) GetBeginDate() (v string) {
	return p.BeginDate
}

func (p *BankHandleSyncPaymentReceiptArgs) GetEndDate() (v string) {
	return p.EndDate
}

func (p *BankHandleSyncPaymentReceiptArgs) GetOrganizationId() (v int64) {
	return p.OrganizationId
}
func (p *BankHandleSyncPaymentReceiptArgs) SetBeginDate(val string) {
	p.BeginDate = val
}
func (p *BankHandleSyncPaymentReceiptArgs) SetEndDate(val string) {
	p.EndDate = val
}
func (p *BankHandleSyncPaymentReceiptArgs) SetOrganizationId(val int64) {
	p.OrganizationId = val
}

var fieldIDToName_BankHandleSyncPaymentReceiptArgs = map[int16]string{
	1: "beginDate",
	2: "endDate",
	3: "organizationId",
}

func (p *BankHandleSyncPaymentReceiptArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankHandleSyncPaymentReceiptArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankHandleSyncPaymentReceiptArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.BeginDate = v
	}
	return nil
}

func (p *BankHandleSyncPaymentReceiptArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.EndDate = v
	}
	return nil
}

func (p *BankHandleSyncPaymentReceiptArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.OrganizationId = v
	}
	return nil
}

func (p *BankHandleSyncPaymentReceiptArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("handleSyncPaymentReceipt_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankHandleSyncPaymentReceiptArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("beginDate", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.BeginDate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankHandleSyncPaymentReceiptArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("endDate", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.EndDate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BankHandleSyncPaymentReceiptArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("organizationId", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.OrganizationId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *BankHandleSyncPaymentReceiptArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankHandleSyncPaymentReceiptArgs(%+v)", *p)
}

func (p *BankHandleSyncPaymentReceiptArgs) DeepEqual(ano *BankHandleSyncPaymentReceiptArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BeginDate) {
		return false
	}
	if !p.Field2DeepEqual(ano.EndDate) {
		return false
	}
	if !p.Field3DeepEqual(ano.OrganizationId) {
		return false
	}
	return true
}

func (p *BankHandleSyncPaymentReceiptArgs) Field1DeepEqual(src string) bool {

	if strings.Compare(p.BeginDate, src) != 0 {
		return false
	}
	return true
}
func (p *BankHandleSyncPaymentReceiptArgs) Field2DeepEqual(src string) bool {

	if strings.Compare(p.EndDate, src) != 0 {
		return false
	}
	return true
}
func (p *BankHandleSyncPaymentReceiptArgs) Field3DeepEqual(src int64) bool {

	if p.OrganizationId != src {
		return false
	}
	return true
}

type BankHandleSyncPaymentReceiptResult struct {
}

func NewBankHandleSyncPaymentReceiptResult() *BankHandleSyncPaymentReceiptResult {
	return &BankHandleSyncPaymentReceiptResult{}
}

func (p *BankHandleSyncPaymentReceiptResult) InitDefault() {
	*p = BankHandleSyncPaymentReceiptResult{}
}

var fieldIDToName_BankHandleSyncPaymentReceiptResult = map[int16]string{}

func (p *BankHandleSyncPaymentReceiptResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankHandleSyncPaymentReceiptResult) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("handleSyncPaymentReceipt_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankHandleSyncPaymentReceiptResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankHandleSyncPaymentReceiptResult(%+v)", *p)
}

func (p *BankHandleSyncPaymentReceiptResult) DeepEqual(ano *BankHandleSyncPaymentReceiptResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type BankSyncPaymentReceiptArgs struct {
	TaskId         int64  `thrift:"taskId,1" frugal:"1,default,i64" json:"taskId"`
	Param          []byte `thrift:"param,2" frugal:"2,default,binary" json:"param"`
	OrganizationId int64  `thrift:"organizationId,3" frugal:"3,default,i64" json:"organizationId"`
}

func NewBankSyncPaymentReceiptArgs() *BankSyncPaymentReceiptArgs {
	return &BankSyncPaymentReceiptArgs{}
}

func (p *BankSyncPaymentReceiptArgs) InitDefault() {
	*p = BankSyncPaymentReceiptArgs{}
}

func (p *BankSyncPaymentReceiptArgs) GetTaskId() (v int64) {
	return p.TaskId
}

func (p *BankSyncPaymentReceiptArgs) GetParam() (v []byte) {
	return p.Param
}

func (p *BankSyncPaymentReceiptArgs) GetOrganizationId() (v int64) {
	return p.OrganizationId
}
func (p *BankSyncPaymentReceiptArgs) SetTaskId(val int64) {
	p.TaskId = val
}
func (p *BankSyncPaymentReceiptArgs) SetParam(val []byte) {
	p.Param = val
}
func (p *BankSyncPaymentReceiptArgs) SetOrganizationId(val int64) {
	p.OrganizationId = val
}

var fieldIDToName_BankSyncPaymentReceiptArgs = map[int16]string{
	1: "taskId",
	2: "param",
	3: "organizationId",
}

func (p *BankSyncPaymentReceiptArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankSyncPaymentReceiptArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankSyncPaymentReceiptArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.TaskId = v
	}
	return nil
}

func (p *BankSyncPaymentReceiptArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		p.Param = []byte(v)
	}
	return nil
}

func (p *BankSyncPaymentReceiptArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.OrganizationId = v
	}
	return nil
}

func (p *BankSyncPaymentReceiptArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("syncPaymentReceipt_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankSyncPaymentReceiptArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("taskId", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TaskId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankSyncPaymentReceiptArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("param", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.Param)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BankSyncPaymentReceiptArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("organizationId", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.OrganizationId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *BankSyncPaymentReceiptArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankSyncPaymentReceiptArgs(%+v)", *p)
}

func (p *BankSyncPaymentReceiptArgs) DeepEqual(ano *BankSyncPaymentReceiptArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TaskId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Param) {
		return false
	}
	if !p.Field3DeepEqual(ano.OrganizationId) {
		return false
	}
	return true
}

func (p *BankSyncPaymentReceiptArgs) Field1DeepEqual(src int64) bool {

	if p.TaskId != src {
		return false
	}
	return true
}
func (p *BankSyncPaymentReceiptArgs) Field2DeepEqual(src []byte) bool {

	if bytes.Compare(p.Param, src) != 0 {
		return false
	}
	return true
}
func (p *BankSyncPaymentReceiptArgs) Field3DeepEqual(src int64) bool {

	if p.OrganizationId != src {
		return false
	}
	return true
}

type BankSyncPaymentReceiptResult struct {
}

func NewBankSyncPaymentReceiptResult() *BankSyncPaymentReceiptResult {
	return &BankSyncPaymentReceiptResult{}
}

func (p *BankSyncPaymentReceiptResult) InitDefault() {
	*p = BankSyncPaymentReceiptResult{}
}

var fieldIDToName_BankSyncPaymentReceiptResult = map[int16]string{}

func (p *BankSyncPaymentReceiptResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankSyncPaymentReceiptResult) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("syncPaymentReceipt_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankSyncPaymentReceiptResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankSyncPaymentReceiptResult(%+v)", *p)
}

func (p *BankSyncPaymentReceiptResult) DeepEqual(ano *BankSyncPaymentReceiptResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type BankPinganBankAccountSignatureApplyArgs struct {
	Req *PinganBankAccountSignatureApplyRequest `thrift:"req,1" frugal:"1,default,PinganBankAccountSignatureApplyRequest" json:"req"`
}

func NewBankPinganBankAccountSignatureApplyArgs() *BankPinganBankAccountSignatureApplyArgs {
	return &BankPinganBankAccountSignatureApplyArgs{}
}

func (p *BankPinganBankAccountSignatureApplyArgs) InitDefault() {
	*p = BankPinganBankAccountSignatureApplyArgs{}
}

var BankPinganBankAccountSignatureApplyArgs_Req_DEFAULT *PinganBankAccountSignatureApplyRequest

func (p *BankPinganBankAccountSignatureApplyArgs) GetReq() (v *PinganBankAccountSignatureApplyRequest) {
	if !p.IsSetReq() {
		return BankPinganBankAccountSignatureApplyArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BankPinganBankAccountSignatureApplyArgs) SetReq(val *PinganBankAccountSignatureApplyRequest) {
	p.Req = val
}

var fieldIDToName_BankPinganBankAccountSignatureApplyArgs = map[int16]string{
	1: "req",
}

func (p *BankPinganBankAccountSignatureApplyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BankPinganBankAccountSignatureApplyArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankPinganBankAccountSignatureApplyArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankPinganBankAccountSignatureApplyArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewPinganBankAccountSignatureApplyRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankPinganBankAccountSignatureApplyArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("pinganBankAccountSignatureApply_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankPinganBankAccountSignatureApplyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankPinganBankAccountSignatureApplyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankPinganBankAccountSignatureApplyArgs(%+v)", *p)
}

func (p *BankPinganBankAccountSignatureApplyArgs) DeepEqual(ano *BankPinganBankAccountSignatureApplyArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BankPinganBankAccountSignatureApplyArgs) Field1DeepEqual(src *PinganBankAccountSignatureApplyRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BankPinganBankAccountSignatureApplyResult struct {
	Success *PinganUserAcctSignatureApplyResponse `thrift:"success,0,optional" frugal:"0,optional,PinganUserAcctSignatureApplyResponse" json:"success,omitempty"`
}

func NewBankPinganBankAccountSignatureApplyResult() *BankPinganBankAccountSignatureApplyResult {
	return &BankPinganBankAccountSignatureApplyResult{}
}

func (p *BankPinganBankAccountSignatureApplyResult) InitDefault() {
	*p = BankPinganBankAccountSignatureApplyResult{}
}

var BankPinganBankAccountSignatureApplyResult_Success_DEFAULT *PinganUserAcctSignatureApplyResponse

func (p *BankPinganBankAccountSignatureApplyResult) GetSuccess() (v *PinganUserAcctSignatureApplyResponse) {
	if !p.IsSetSuccess() {
		return BankPinganBankAccountSignatureApplyResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BankPinganBankAccountSignatureApplyResult) SetSuccess(x interface{}) {
	p.Success = x.(*PinganUserAcctSignatureApplyResponse)
}

var fieldIDToName_BankPinganBankAccountSignatureApplyResult = map[int16]string{
	0: "success",
}

func (p *BankPinganBankAccountSignatureApplyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BankPinganBankAccountSignatureApplyResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankPinganBankAccountSignatureApplyResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankPinganBankAccountSignatureApplyResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewPinganUserAcctSignatureApplyResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankPinganBankAccountSignatureApplyResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("pinganBankAccountSignatureApply_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankPinganBankAccountSignatureApplyResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BankPinganBankAccountSignatureApplyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankPinganBankAccountSignatureApplyResult(%+v)", *p)
}

func (p *BankPinganBankAccountSignatureApplyResult) DeepEqual(ano *BankPinganBankAccountSignatureApplyResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BankPinganBankAccountSignatureApplyResult) Field0DeepEqual(src *PinganUserAcctSignatureApplyResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BankPinganBankAccountSignatureQueryArgs struct {
	Req *PinganBankAccountSignatureApplyRequest `thrift:"req,1" frugal:"1,default,PinganBankAccountSignatureApplyRequest" json:"req"`
}

func NewBankPinganBankAccountSignatureQueryArgs() *BankPinganBankAccountSignatureQueryArgs {
	return &BankPinganBankAccountSignatureQueryArgs{}
}

func (p *BankPinganBankAccountSignatureQueryArgs) InitDefault() {
	*p = BankPinganBankAccountSignatureQueryArgs{}
}

var BankPinganBankAccountSignatureQueryArgs_Req_DEFAULT *PinganBankAccountSignatureApplyRequest

func (p *BankPinganBankAccountSignatureQueryArgs) GetReq() (v *PinganBankAccountSignatureApplyRequest) {
	if !p.IsSetReq() {
		return BankPinganBankAccountSignatureQueryArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BankPinganBankAccountSignatureQueryArgs) SetReq(val *PinganBankAccountSignatureApplyRequest) {
	p.Req = val
}

var fieldIDToName_BankPinganBankAccountSignatureQueryArgs = map[int16]string{
	1: "req",
}

func (p *BankPinganBankAccountSignatureQueryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BankPinganBankAccountSignatureQueryArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankPinganBankAccountSignatureQueryArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankPinganBankAccountSignatureQueryArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewPinganBankAccountSignatureApplyRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankPinganBankAccountSignatureQueryArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("pinganBankAccountSignatureQuery_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankPinganBankAccountSignatureQueryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankPinganBankAccountSignatureQueryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankPinganBankAccountSignatureQueryArgs(%+v)", *p)
}

func (p *BankPinganBankAccountSignatureQueryArgs) DeepEqual(ano *BankPinganBankAccountSignatureQueryArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BankPinganBankAccountSignatureQueryArgs) Field1DeepEqual(src *PinganBankAccountSignatureApplyRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BankPinganBankAccountSignatureQueryResult struct {
	Success *PinganUserAcctSignatureApplyResponse `thrift:"success,0,optional" frugal:"0,optional,PinganUserAcctSignatureApplyResponse" json:"success,omitempty"`
}

func NewBankPinganBankAccountSignatureQueryResult() *BankPinganBankAccountSignatureQueryResult {
	return &BankPinganBankAccountSignatureQueryResult{}
}

func (p *BankPinganBankAccountSignatureQueryResult) InitDefault() {
	*p = BankPinganBankAccountSignatureQueryResult{}
}

var BankPinganBankAccountSignatureQueryResult_Success_DEFAULT *PinganUserAcctSignatureApplyResponse

func (p *BankPinganBankAccountSignatureQueryResult) GetSuccess() (v *PinganUserAcctSignatureApplyResponse) {
	if !p.IsSetSuccess() {
		return BankPinganBankAccountSignatureQueryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BankPinganBankAccountSignatureQueryResult) SetSuccess(x interface{}) {
	p.Success = x.(*PinganUserAcctSignatureApplyResponse)
}

var fieldIDToName_BankPinganBankAccountSignatureQueryResult = map[int16]string{
	0: "success",
}

func (p *BankPinganBankAccountSignatureQueryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BankPinganBankAccountSignatureQueryResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankPinganBankAccountSignatureQueryResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankPinganBankAccountSignatureQueryResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewPinganUserAcctSignatureApplyResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BankPinganBankAccountSignatureQueryResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("pinganBankAccountSignatureQuery_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankPinganBankAccountSignatureQueryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BankPinganBankAccountSignatureQueryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankPinganBankAccountSignatureQueryResult(%+v)", *p)
}

func (p *BankPinganBankAccountSignatureQueryResult) DeepEqual(ano *BankPinganBankAccountSignatureQueryResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BankPinganBankAccountSignatureQueryResult) Field0DeepEqual(src *PinganUserAcctSignatureApplyResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BankSystemRefusePaymentReceiptArgs struct {
	Id int64 `thrift:"id,1" frugal:"1,default,i64" json:"id"`
}

func NewBankSystemRefusePaymentReceiptArgs() *BankSystemRefusePaymentReceiptArgs {
	return &BankSystemRefusePaymentReceiptArgs{}
}

func (p *BankSystemRefusePaymentReceiptArgs) InitDefault() {
	*p = BankSystemRefusePaymentReceiptArgs{}
}

func (p *BankSystemRefusePaymentReceiptArgs) GetId() (v int64) {
	return p.Id
}
func (p *BankSystemRefusePaymentReceiptArgs) SetId(val int64) {
	p.Id = val
}

var fieldIDToName_BankSystemRefusePaymentReceiptArgs = map[int16]string{
	1: "id",
}

func (p *BankSystemRefusePaymentReceiptArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankSystemRefusePaymentReceiptArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankSystemRefusePaymentReceiptArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *BankSystemRefusePaymentReceiptArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("systemRefusePaymentReceipt_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankSystemRefusePaymentReceiptArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankSystemRefusePaymentReceiptArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankSystemRefusePaymentReceiptArgs(%+v)", *p)
}

func (p *BankSystemRefusePaymentReceiptArgs) DeepEqual(ano *BankSystemRefusePaymentReceiptArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *BankSystemRefusePaymentReceiptArgs) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}

type BankSystemRefusePaymentReceiptResult struct {
}

func NewBankSystemRefusePaymentReceiptResult() *BankSystemRefusePaymentReceiptResult {
	return &BankSystemRefusePaymentReceiptResult{}
}

func (p *BankSystemRefusePaymentReceiptResult) InitDefault() {
	*p = BankSystemRefusePaymentReceiptResult{}
}

var fieldIDToName_BankSystemRefusePaymentReceiptResult = map[int16]string{}

func (p *BankSystemRefusePaymentReceiptResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankSystemRefusePaymentReceiptResult) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("systemRefusePaymentReceipt_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankSystemRefusePaymentReceiptResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankSystemRefusePaymentReceiptResult(%+v)", *p)
}

func (p *BankSystemRefusePaymentReceiptResult) DeepEqual(ano *BankSystemRefusePaymentReceiptResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type BankSystemApprovePaymentReceiptArgs struct {
	Id int64 `thrift:"id,1" frugal:"1,default,i64" json:"id"`
}

func NewBankSystemApprovePaymentReceiptArgs() *BankSystemApprovePaymentReceiptArgs {
	return &BankSystemApprovePaymentReceiptArgs{}
}

func (p *BankSystemApprovePaymentReceiptArgs) InitDefault() {
	*p = BankSystemApprovePaymentReceiptArgs{}
}

func (p *BankSystemApprovePaymentReceiptArgs) GetId() (v int64) {
	return p.Id
}
func (p *BankSystemApprovePaymentReceiptArgs) SetId(val int64) {
	p.Id = val
}

var fieldIDToName_BankSystemApprovePaymentReceiptArgs = map[int16]string{
	1: "id",
}

func (p *BankSystemApprovePaymentReceiptArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BankSystemApprovePaymentReceiptArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankSystemApprovePaymentReceiptArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *BankSystemApprovePaymentReceiptArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("systemApprovePaymentReceipt_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankSystemApprovePaymentReceiptArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BankSystemApprovePaymentReceiptArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankSystemApprovePaymentReceiptArgs(%+v)", *p)
}

func (p *BankSystemApprovePaymentReceiptArgs) DeepEqual(ano *BankSystemApprovePaymentReceiptArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *BankSystemApprovePaymentReceiptArgs) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}

type BankSystemApprovePaymentReceiptResult struct {
}

func NewBankSystemApprovePaymentReceiptResult() *BankSystemApprovePaymentReceiptResult {
	return &BankSystemApprovePaymentReceiptResult{}
}

func (p *BankSystemApprovePaymentReceiptResult) InitDefault() {
	*p = BankSystemApprovePaymentReceiptResult{}
}

var fieldIDToName_BankSystemApprovePaymentReceiptResult = map[int16]string{}

func (p *BankSystemApprovePaymentReceiptResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BankSystemApprovePaymentReceiptResult) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("systemApprovePaymentReceipt_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BankSystemApprovePaymentReceiptResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BankSystemApprovePaymentReceiptResult(%+v)", *p)
}

func (p *BankSystemApprovePaymentReceiptResult) DeepEqual(ano *BankSystemApprovePaymentReceiptResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}
